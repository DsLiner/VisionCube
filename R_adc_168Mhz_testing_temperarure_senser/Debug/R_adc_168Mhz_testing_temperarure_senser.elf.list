
R_adc_168Mhz_testing_temperarure_senser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080010c4  080010c4  000110c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080010d4  080010d4  000110d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080010d8  080010d8  000110d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080010dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000068  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000006c  2000006c  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005b65  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000145d  00000000  00000000  00025b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000418  00000000  00000000  00026ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000580  00000000  00000000  00027410  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002d90  00000000  00000000  00027990  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001bbf  00000000  00000000  0002a720  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002c2df  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000904  00000000  00000000  0002c360  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000015e1  00000000  00000000  0002cc64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080010ac 	.word	0x080010ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080010ac 	.word	0x080010ac

080001c8 <NMI_Handler>:
 80001c8:	4770      	bx	lr

080001ca <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80001ca:	e7fe      	b.n	80001ca <HardFault_Handler>

080001cc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80001cc:	e7fe      	b.n	80001cc <MemManage_Handler>

080001ce <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80001ce:	e7fe      	b.n	80001ce <BusFault_Handler>

080001d0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80001d0:	e7fe      	b.n	80001d0 <UsageFault_Handler>

080001d2 <SVC_Handler>:
 80001d2:	4770      	bx	lr

080001d4 <DebugMon_Handler>:
 80001d4:	4770      	bx	lr

080001d6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80001d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001da:	f000 fed5 	bl	8000f88 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80001e2:	f000 bcaa 	b.w	8000b3a <HAL_SYSTICK_IRQHandler>

080001e6 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80001e6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e8:	2003      	movs	r0, #3
 80001ea:	f000 fc3d 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	4611      	mov	r1, r2
 80001f2:	f06f 000b 	mvn.w	r0, #11
 80001f6:	f000 fc49 	bl	8000a8c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80001fa:	2200      	movs	r2, #0
 80001fc:	4611      	mov	r1, r2
 80001fe:	f06f 000a 	mvn.w	r0, #10
 8000202:	f000 fc43 	bl	8000a8c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000206:	2200      	movs	r2, #0
 8000208:	4611      	mov	r1, r2
 800020a:	f06f 0009 	mvn.w	r0, #9
 800020e:	f000 fc3d 	bl	8000a8c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	4611      	mov	r1, r2
 8000216:	f06f 0004 	mvn.w	r0, #4
 800021a:	f000 fc37 	bl	8000a8c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800021e:	2200      	movs	r2, #0
 8000220:	4611      	mov	r1, r2
 8000222:	f06f 0003 	mvn.w	r0, #3
 8000226:	f000 fc31 	bl	8000a8c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800022a:	2200      	movs	r2, #0
 800022c:	4611      	mov	r1, r2
 800022e:	f06f 0001 	mvn.w	r0, #1
 8000232:	f000 fc2b 	bl	8000a8c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000236:	2200      	movs	r2, #0
 8000238:	4611      	mov	r1, r2
 800023a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800023e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000242:	f000 bc23 	b.w	8000a8c <HAL_NVIC_SetPriority>
	...

08000248 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000248:	b530      	push	{r4, r5, lr}
 800024a:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800024c:	2300      	movs	r3, #0
 800024e:	4a27      	ldr	r2, [pc, #156]	; (80002ec <SystemClock_Config+0xa4>)
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000254:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000258:	6411      	str	r1, [r2, #64]	; 0x40
 800025a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800025c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000260:	9201      	str	r2, [sp, #4]
 8000262:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000264:	4a22      	ldr	r2, [pc, #136]	; (80002f0 <SystemClock_Config+0xa8>)
 8000266:	9302      	str	r3, [sp, #8]
 8000268:	6811      	ldr	r1, [r2, #0]
 800026a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800026e:	6011      	str	r1, [r2, #0]
 8000270:	6812      	ldr	r2, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000272:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000274:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000278:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800027a:	2308      	movs	r3, #8
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800027c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800027e:	9310      	str	r3, [sp, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2201      	movs	r2, #1

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000282:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000286:	23a8      	movs	r3, #168	; 0xa8

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000288:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800028a:	2504      	movs	r5, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	a808      	add	r0, sp, #32

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000290:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000292:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000294:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000296:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000298:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f000 f8a5 	bl	80003e8 <HAL_RCC_OscConfig>
 800029e:	b100      	cbz	r0, 80002a2 <SystemClock_Config+0x5a>
 80002a0:	e7fe      	b.n	80002a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002ac:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002ae:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002b4:	a803      	add	r0, sp, #12
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80002b8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002ba:	f000 fa3b 	bl	8000734 <HAL_RCC_ClockConfig>
 80002be:	4604      	mov	r4, r0
 80002c0:	b100      	cbz	r0, 80002c4 <SystemClock_Config+0x7c>
 80002c2:	e7fe      	b.n	80002c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002c4:	f000 faea 	bl	800089c <HAL_RCC_GetHCLKFreq>
 80002c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80002d0:	f000 fc10 	bl	8000af4 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80002d4:	4628      	mov	r0, r5
 80002d6:	f000 fc23 	bl	8000b20 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002da:	4622      	mov	r2, r4
 80002dc:	4621      	mov	r1, r4
 80002de:	f04f 30ff 	mov.w	r0, #4294967295
 80002e2:	f000 fbd3 	bl	8000a8c <HAL_NVIC_SetPriority>
}
 80002e6:	b015      	add	sp, #84	; 0x54
 80002e8:	bd30      	pop	{r4, r5, pc}
 80002ea:	bf00      	nop
 80002ec:	40023800 	.word	0x40023800
 80002f0:	40007000 	.word	0x40007000

080002f4 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80002f4:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f6:	f000 fe2d 	bl	8000f54 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80002fa:	f7ff ffa5 	bl	8000248 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fe:	f000 f817 	bl	8000330 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000302:	f000 f827 	bl	8000354 <MX_ADC1_Init>
  /* USER CODE BEGIN WHILE */
  int ADCValue = 0;
  while (1)
  {
  /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8000306:	4807      	ldr	r0, [pc, #28]	; (8000324 <main+0x30>)
 8000308:	f000 fcc6 	bl	8000c98 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 800030c:	4906      	ldr	r1, [pc, #24]	; (8000328 <main+0x34>)
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <main+0x30>)
 8000310:	f000 fd22 	bl	8000d58 <HAL_ADC_PollForConversion>
 8000314:	b910      	cbnz	r0, 800031c <main+0x28>
		  ADCValue = HAL_ADC_GetValue(&hadc1);
 8000316:	4803      	ldr	r0, [pc, #12]	; (8000324 <main+0x30>)
 8000318:	f000 fd6e 	bl	8000df8 <HAL_ADC_GetValue>
	  }
	  HAL_Delay(100);
 800031c:	2064      	movs	r0, #100	; 0x64
 800031e:	f000 fe41 	bl	8000fa4 <HAL_Delay>


  /* USER CODE BEGIN 3 */

  }
 8000322:	e7f0      	b.n	8000306 <main+0x12>
 8000324:	20000020 	.word	0x20000020
 8000328:	000f4240 	.word	0x000f4240

0800032c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800032c:	e7fe      	b.n	800032c <Error_Handler>
	...

08000330 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000330:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000332:	2300      	movs	r3, #0
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_GPIO_Init+0x20>)
 8000338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800033a:	f042 0201 	orr.w	r2, r2, #1
 800033e:	631a      	str	r2, [r3, #48]	; 0x30
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	9b01      	ldr	r3, [sp, #4]

}
 800034a:	b002      	add	sp, #8
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800

08000354 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8000356:	4811      	ldr	r0, [pc, #68]	; (800039c <MX_ADC1_Init+0x48>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_ADC1_Init+0x4c>)
 800035a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800035e:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000362:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000364:	2401      	movs	r4, #1

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000366:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000368:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800036a:	6183      	str	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800036c:	6203      	str	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800036e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000370:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000372:	61c4      	str	r4, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000374:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000376:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000378:	f000 fbe4 	bl	8000b44 <HAL_ADC_Init>
 800037c:	b108      	cbz	r0, 8000382 <MX_ADC1_Init+0x2e>
  {
    Error_Handler();
 800037e:	f7ff ffd5 	bl	800032c <Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000382:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000384:	4669      	mov	r1, sp
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_ADC1_Init+0x48>)
    Error_Handler();
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8000388:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 800038a:	9401      	str	r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800038c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038e:	f000 fd37 	bl	8000e00 <HAL_ADC_ConfigChannel>
 8000392:	b108      	cbz	r0, 8000398 <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 8000394:	f7ff ffca 	bl	800032c <Error_Handler>
  }

}
 8000398:	b004      	add	sp, #16
 800039a:	bd10      	pop	{r4, pc}
 800039c:	20000020 	.word	0x20000020
 80003a0:	40012000 	.word	0x40012000

080003a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80003a6:	6802      	ldr	r2, [r0, #0]
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <HAL_ADC_MspInit+0x3c>)
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d115      	bne.n	80003da <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003ae:	2100      	movs	r1, #0
 80003b0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80003b4:	9100      	str	r1, [sp, #0]
 80003b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b8:	480a      	ldr	r0, [pc, #40]	; (80003e4 <HAL_ADC_MspInit+0x40>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80003be:	645a      	str	r2, [r3, #68]	; 0x44
 80003c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	9103      	str	r1, [sp, #12]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80003c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	9b00      	ldr	r3, [sp, #0]
  
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003cc:	2302      	movs	r3, #2
 80003ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d0:	a901      	add	r1, sp, #4
  
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d2:	2303      	movs	r3, #3
 80003d4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d6:	f000 fa67 	bl	80008a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003da:	b007      	add	sp, #28
 80003dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80003e0:	40012000 	.word	0x40012000
 80003e4:	40020000 	.word	0x40020000

080003e8 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80003e8:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80003ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80003ee:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80003f0:	07d8      	lsls	r0, r3, #31
 80003f2:	d403      	bmi.n	80003fc <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80003f4:	6823      	ldr	r3, [r4, #0]
 80003f6:	0799      	lsls	r1, r3, #30
 80003f8:	d437      	bmi.n	800046a <HAL_RCC_OscConfig+0x82>
 80003fa:	e087      	b.n	800050c <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80003fc:	4ba7      	ldr	r3, [pc, #668]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
 80003fe:	689a      	ldr	r2, [r3, #8]
 8000400:	f002 020c 	and.w	r2, r2, #12
 8000404:	2a04      	cmp	r2, #4
 8000406:	d007      	beq.n	8000418 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000408:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800040a:	f002 020c 	and.w	r2, r2, #12
 800040e:	2a08      	cmp	r2, #8
 8000410:	d10b      	bne.n	800042a <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	025a      	lsls	r2, r3, #9
 8000416:	d508      	bpl.n	800042a <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000418:	4ba0      	ldr	r3, [pc, #640]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	039b      	lsls	r3, r3, #14
 800041e:	d5e9      	bpl.n	80003f4 <HAL_RCC_OscConfig+0xc>
 8000420:	6863      	ldr	r3, [r4, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1e6      	bne.n	80003f4 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000426:	2001      	movs	r0, #1
 8000428:	e134      	b.n	8000694 <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800042a:	4b9d      	ldr	r3, [pc, #628]	; (80006a0 <HAL_RCC_OscConfig+0x2b8>)
 800042c:	7922      	ldrb	r2, [r4, #4]
 800042e:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000430:	6863      	ldr	r3, [r4, #4]
 8000432:	b16b      	cbz	r3, 8000450 <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000434:	f000 fdb0 	bl	8000f98 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000438:	4d98      	ldr	r5, [pc, #608]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800043a:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800043c:	682b      	ldr	r3, [r5, #0]
 800043e:	039f      	lsls	r7, r3, #14
 8000440:	d4d8      	bmi.n	80003f4 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000442:	f000 fda9 	bl	8000f98 <HAL_GetTick>
 8000446:	1b80      	subs	r0, r0, r6
 8000448:	2864      	cmp	r0, #100	; 0x64
 800044a:	d9f7      	bls.n	800043c <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 800044c:	2003      	movs	r0, #3
 800044e:	e121      	b.n	8000694 <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000450:	f000 fda2 	bl	8000f98 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000454:	4d91      	ldr	r5, [pc, #580]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000456:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000458:	682b      	ldr	r3, [r5, #0]
 800045a:	0398      	lsls	r0, r3, #14
 800045c:	d5ca      	bpl.n	80003f4 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800045e:	f000 fd9b 	bl	8000f98 <HAL_GetTick>
 8000462:	1b80      	subs	r0, r0, r6
 8000464:	2864      	cmp	r0, #100	; 0x64
 8000466:	d9f7      	bls.n	8000458 <HAL_RCC_OscConfig+0x70>
 8000468:	e7f0      	b.n	800044c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800046a:	4b8c      	ldr	r3, [pc, #560]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	f012 0f0c 	tst.w	r2, #12
 8000472:	d007      	beq.n	8000484 <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000474:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000476:	f002 020c 	and.w	r2, r2, #12
 800047a:	2a08      	cmp	r2, #8
 800047c:	d117      	bne.n	80004ae <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	0259      	lsls	r1, r3, #9
 8000482:	d414      	bmi.n	80004ae <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000484:	4b85      	ldr	r3, [pc, #532]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	0792      	lsls	r2, r2, #30
 800048a:	d502      	bpl.n	8000492 <HAL_RCC_OscConfig+0xaa>
 800048c:	68e2      	ldr	r2, [r4, #12]
 800048e:	2a01      	cmp	r2, #1
 8000490:	d1c9      	bne.n	8000426 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000492:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000494:	21f8      	movs	r1, #248	; 0xf8
 8000496:	fa91 f1a1 	rbit	r1, r1
 800049a:	6920      	ldr	r0, [r4, #16]
 800049c:	fab1 f181 	clz	r1, r1
 80004a0:	fa00 f101 	lsl.w	r1, r0, r1
 80004a4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80004a8:	430a      	orrs	r2, r1
 80004aa:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80004ac:	e02e      	b.n	800050c <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80004ae:	68e2      	ldr	r2, [r4, #12]
 80004b0:	4b7c      	ldr	r3, [pc, #496]	; (80006a4 <HAL_RCC_OscConfig+0x2bc>)
 80004b2:	b1ea      	cbz	r2, 80004f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80004b4:	2201      	movs	r2, #1
 80004b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80004b8:	f000 fd6e 	bl	8000f98 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80004bc:	4d77      	ldr	r5, [pc, #476]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80004be:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80004c0:	682b      	ldr	r3, [r5, #0]
 80004c2:	4876      	ldr	r0, [pc, #472]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
 80004c4:	079b      	lsls	r3, r3, #30
 80004c6:	d405      	bmi.n	80004d4 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80004c8:	f000 fd66 	bl	8000f98 <HAL_GetTick>
 80004cc:	1b80      	subs	r0, r0, r6
 80004ce:	2802      	cmp	r0, #2
 80004d0:	d9f6      	bls.n	80004c0 <HAL_RCC_OscConfig+0xd8>
 80004d2:	e7bb      	b.n	800044c <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80004d4:	6803      	ldr	r3, [r0, #0]
 80004d6:	22f8      	movs	r2, #248	; 0xf8
 80004d8:	fa92 f2a2 	rbit	r2, r2
 80004dc:	6921      	ldr	r1, [r4, #16]
 80004de:	fab2 f282 	clz	r2, r2
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80004ea:	4313      	orrs	r3, r2
 80004ec:	6003      	str	r3, [r0, #0]
 80004ee:	e00d      	b.n	800050c <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80004f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80004f2:	f000 fd51 	bl	8000f98 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80004f6:	4d69      	ldr	r5, [pc, #420]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80004f8:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80004fa:	682b      	ldr	r3, [r5, #0]
 80004fc:	079f      	lsls	r7, r3, #30
 80004fe:	d505      	bpl.n	800050c <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000500:	f000 fd4a 	bl	8000f98 <HAL_GetTick>
 8000504:	1b80      	subs	r0, r0, r6
 8000506:	2802      	cmp	r0, #2
 8000508:	d9f7      	bls.n	80004fa <HAL_RCC_OscConfig+0x112>
 800050a:	e79f      	b.n	800044c <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800050c:	6823      	ldr	r3, [r4, #0]
 800050e:	071e      	lsls	r6, r3, #28
 8000510:	d403      	bmi.n	800051a <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000512:	6823      	ldr	r3, [r4, #0]
 8000514:	075d      	lsls	r5, r3, #29
 8000516:	d545      	bpl.n	80005a4 <HAL_RCC_OscConfig+0x1bc>
 8000518:	e01f      	b.n	800055a <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800051a:	6962      	ldr	r2, [r4, #20]
 800051c:	4b62      	ldr	r3, [pc, #392]	; (80006a8 <HAL_RCC_OscConfig+0x2c0>)
 800051e:	b172      	cbz	r2, 800053e <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000520:	2201      	movs	r2, #1
 8000522:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000524:	f000 fd38 	bl	8000f98 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000528:	4d5c      	ldr	r5, [pc, #368]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800052a:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800052c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800052e:	0798      	lsls	r0, r3, #30
 8000530:	d4ef      	bmi.n	8000512 <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000532:	f000 fd31 	bl	8000f98 <HAL_GetTick>
 8000536:	1b80      	subs	r0, r0, r6
 8000538:	2802      	cmp	r0, #2
 800053a:	d9f7      	bls.n	800052c <HAL_RCC_OscConfig+0x144>
 800053c:	e786      	b.n	800044c <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800053e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000540:	f000 fd2a 	bl	8000f98 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000544:	4d55      	ldr	r5, [pc, #340]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000546:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000548:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800054a:	0799      	lsls	r1, r3, #30
 800054c:	d5e1      	bpl.n	8000512 <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800054e:	f000 fd23 	bl	8000f98 <HAL_GetTick>
 8000552:	1b80      	subs	r0, r0, r6
 8000554:	2802      	cmp	r0, #2
 8000556:	d9f7      	bls.n	8000548 <HAL_RCC_OscConfig+0x160>
 8000558:	e778      	b.n	800044c <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	4b4f      	ldr	r3, [pc, #316]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000560:	4d52      	ldr	r5, [pc, #328]	; (80006ac <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000564:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000568:	641a      	str	r2, [r3, #64]	; 0x40
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000574:	682b      	ldr	r3, [r5, #0]
 8000576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800057a:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800057c:	f000 fd0c 	bl	8000f98 <HAL_GetTick>
 8000580:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000582:	682b      	ldr	r3, [r5, #0]
 8000584:	05da      	lsls	r2, r3, #23
 8000586:	d510      	bpl.n	80005aa <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000588:	4b49      	ldr	r3, [pc, #292]	; (80006b0 <HAL_RCC_OscConfig+0x2c8>)
 800058a:	7a22      	ldrb	r2, [r4, #8]
 800058c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800058e:	68a3      	ldr	r3, [r4, #8]
 8000590:	b1bb      	cbz	r3, 80005c2 <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000592:	f000 fd01 	bl	8000f98 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000596:	4d41      	ldr	r5, [pc, #260]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000598:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800059a:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800059e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80005a0:	079b      	lsls	r3, r3, #30
 80005a2:	d508      	bpl.n	80005b6 <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005a4:	69a2      	ldr	r2, [r4, #24]
 80005a6:	b9da      	cbnz	r2, 80005e0 <HAL_RCC_OscConfig+0x1f8>
 80005a8:	e059      	b.n	800065e <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80005aa:	f000 fcf5 	bl	8000f98 <HAL_GetTick>
 80005ae:	1b80      	subs	r0, r0, r6
 80005b0:	2802      	cmp	r0, #2
 80005b2:	d9e6      	bls.n	8000582 <HAL_RCC_OscConfig+0x19a>
 80005b4:	e74a      	b.n	800044c <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80005b6:	f000 fcef 	bl	8000f98 <HAL_GetTick>
 80005ba:	1b80      	subs	r0, r0, r6
 80005bc:	42b8      	cmp	r0, r7
 80005be:	d9ee      	bls.n	800059e <HAL_RCC_OscConfig+0x1b6>
 80005c0:	e744      	b.n	800044c <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80005c2:	f000 fce9 	bl	8000f98 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80005c6:	4d35      	ldr	r5, [pc, #212]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80005c8:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80005ca:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80005ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80005d0:	0798      	lsls	r0, r3, #30
 80005d2:	d5e7      	bpl.n	80005a4 <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80005d4:	f000 fce0 	bl	8000f98 <HAL_GetTick>
 80005d8:	1b80      	subs	r0, r0, r6
 80005da:	42b8      	cmp	r0, r7
 80005dc:	d9f7      	bls.n	80005ce <HAL_RCC_OscConfig+0x1e6>
 80005de:	e735      	b.n	800044c <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80005e0:	4d2e      	ldr	r5, [pc, #184]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
 80005e2:	68ab      	ldr	r3, [r5, #8]
 80005e4:	f003 030c 	and.w	r3, r3, #12
 80005e8:	2b08      	cmp	r3, #8
 80005ea:	f43f af1c 	beq.w	8000426 <HAL_RCC_OscConfig+0x3e>
 80005ee:	4e31      	ldr	r6, [pc, #196]	; (80006b4 <HAL_RCC_OscConfig+0x2cc>)
 80005f0:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80005f2:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80005f4:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80005f6:	d141      	bne.n	800067c <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005f8:	f000 fcce 	bl	8000f98 <HAL_GetTick>
 80005fc:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80005fe:	682b      	ldr	r3, [r5, #0]
 8000600:	4f26      	ldr	r7, [pc, #152]	; (800069c <HAL_RCC_OscConfig+0x2b4>)
 8000602:	0199      	lsls	r1, r3, #6
 8000604:	d42d      	bmi.n	8000662 <HAL_RCC_OscConfig+0x27a>
 8000606:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800060a:	fa92 f2a2 	rbit	r2, r2
 800060e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000612:	fab2 fe82 	clz	lr, r2
 8000616:	fa93 f3a3 	rbit	r3, r3
 800061a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800061e:	fab3 f583 	clz	r5, r3
 8000622:	fa92 f2a2 	rbit	r2, r2
 8000626:	69e0      	ldr	r0, [r4, #28]
 8000628:	6a23      	ldr	r3, [r4, #32]
 800062a:	fab2 f182 	clz	r1, r2
 800062e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000630:	4303      	orrs	r3, r0
 8000632:	fa02 f20e 	lsl.w	r2, r2, lr
 8000636:	ea43 0002 	orr.w	r0, r3, r2
 800063a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800063c:	085a      	lsrs	r2, r3, #1
 800063e:	3a01      	subs	r2, #1
 8000640:	fa02 f305 	lsl.w	r3, r2, r5
 8000644:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000646:	4303      	orrs	r3, r0
 8000648:	408a      	lsls	r2, r1
 800064a:	4313      	orrs	r3, r2
 800064c:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800064e:	2301      	movs	r3, #1
 8000650:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000652:	f000 fca1 	bl	8000f98 <HAL_GetTick>
 8000656:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	019a      	lsls	r2, r3, #6
 800065c:	d508      	bpl.n	8000670 <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800065e:	2000      	movs	r0, #0
 8000660:	e018      	b.n	8000694 <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000662:	f000 fc99 	bl	8000f98 <HAL_GetTick>
 8000666:	ebc8 0000 	rsb	r0, r8, r0
 800066a:	2802      	cmp	r0, #2
 800066c:	d9c7      	bls.n	80005fe <HAL_RCC_OscConfig+0x216>
 800066e:	e6ed      	b.n	800044c <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000670:	f000 fc92 	bl	8000f98 <HAL_GetTick>
 8000674:	1b00      	subs	r0, r0, r4
 8000676:	2802      	cmp	r0, #2
 8000678:	d9ee      	bls.n	8000658 <HAL_RCC_OscConfig+0x270>
 800067a:	e6e7      	b.n	800044c <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800067c:	f000 fc8c 	bl	8000f98 <HAL_GetTick>
 8000680:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000682:	682b      	ldr	r3, [r5, #0]
 8000684:	019b      	lsls	r3, r3, #6
 8000686:	d5ea      	bpl.n	800065e <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000688:	f000 fc86 	bl	8000f98 <HAL_GetTick>
 800068c:	1b00      	subs	r0, r0, r4
 800068e:	2802      	cmp	r0, #2
 8000690:	d9f7      	bls.n	8000682 <HAL_RCC_OscConfig+0x29a>
 8000692:	e6db      	b.n	800044c <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000694:	b002      	add	sp, #8
 8000696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40023802 	.word	0x40023802
 80006a4:	42470000 	.word	0x42470000
 80006a8:	42470e80 	.word	0x42470e80
 80006ac:	40007000 	.word	0x40007000
 80006b0:	40023870 	.word	0x40023870
 80006b4:	42470060 	.word	0x42470060

080006b8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80006b8:	491b      	ldr	r1, [pc, #108]	; (8000728 <HAL_RCC_GetSysClockFreq+0x70>)
 80006ba:	688b      	ldr	r3, [r1, #8]
 80006bc:	f003 030c 	and.w	r3, r3, #12
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d02c      	beq.n	800071e <HAL_RCC_GetSysClockFreq+0x66>
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	d12c      	bne.n	8000722 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006c8:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80006ca:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80006d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80006d4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80006d8:	684b      	ldr	r3, [r1, #4]
 80006da:	fa92 f2a2 	rbit	r2, r2
 80006de:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80006e2:	fab2 f282 	clz	r2, r2
 80006e6:	ea01 0103 	and.w	r1, r1, r3
 80006ea:	fa21 f102 	lsr.w	r1, r1, r2
 80006ee:	bf14      	ite	ne
 80006f0:	4a0e      	ldrne	r2, [pc, #56]	; (800072c <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80006f2:	4a0f      	ldreq	r2, [pc, #60]	; (8000730 <HAL_RCC_GetSysClockFreq+0x78>)
 80006f4:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80006fa:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80006fe:	6852      	ldr	r2, [r2, #4]
 8000700:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000704:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000708:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800070c:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000710:	fa22 f000 	lsr.w	r0, r2, r0
 8000714:	3001      	adds	r0, #1
 8000716:	0040      	lsls	r0, r0, #1
 8000718:	fbb3 f0f0 	udiv	r0, r3, r0
 800071c:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <HAL_RCC_GetSysClockFreq+0x74>)
 8000720:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	017d7840 	.word	0x017d7840
 8000730:	00f42400 	.word	0x00f42400

08000734 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000734:	4b55      	ldr	r3, [pc, #340]	; (800088c <HAL_RCC_ClockConfig+0x158>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	f002 020f 	and.w	r2, r2, #15
 800073c:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800073e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000742:	4605      	mov	r5, r0
 8000744:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000746:	d30a      	bcc.n	800075e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000748:	6829      	ldr	r1, [r5, #0]
 800074a:	0788      	lsls	r0, r1, #30
 800074c:	d511      	bpl.n	8000772 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800074e:	4850      	ldr	r0, [pc, #320]	; (8000890 <HAL_RCC_ClockConfig+0x15c>)
 8000750:	6883      	ldr	r3, [r0, #8]
 8000752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000756:	68ab      	ldr	r3, [r5, #8]
 8000758:	4313      	orrs	r3, r2
 800075a:	6083      	str	r3, [r0, #8]
 800075c:	e009      	b.n	8000772 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800075e:	b2ca      	uxtb	r2, r1
 8000760:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f003 030f 	and.w	r3, r3, #15
 8000768:	4299      	cmp	r1, r3
 800076a:	d0ed      	beq.n	8000748 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800076c:	2001      	movs	r0, #1
 800076e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000772:	07c9      	lsls	r1, r1, #31
 8000774:	d406      	bmi.n	8000784 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <HAL_RCC_ClockConfig+0x158>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	f002 020f 	and.w	r2, r2, #15
 800077e:	4296      	cmp	r6, r2
 8000780:	d351      	bcc.n	8000826 <HAL_RCC_ClockConfig+0xf2>
 8000782:	e057      	b.n	8000834 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000784:	686b      	ldr	r3, [r5, #4]
 8000786:	4a42      	ldr	r2, [pc, #264]	; (8000890 <HAL_RCC_ClockConfig+0x15c>)
 8000788:	2b01      	cmp	r3, #1
 800078a:	d103      	bne.n	8000794 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800078c:	6812      	ldr	r2, [r2, #0]
 800078e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000792:	e008      	b.n	80007a6 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000794:	1e99      	subs	r1, r3, #2
 8000796:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000798:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800079a:	d802      	bhi.n	80007a2 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800079c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80007a0:	e001      	b.n	80007a6 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007a2:	f012 0f02 	tst.w	r2, #2
 80007a6:	d0e1      	beq.n	800076c <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80007a8:	4c39      	ldr	r4, [pc, #228]	; (8000890 <HAL_RCC_ClockConfig+0x15c>)
 80007aa:	68a2      	ldr	r2, [r4, #8]
 80007ac:	f022 0203 	bic.w	r2, r2, #3
 80007b0:	4313      	orrs	r3, r2
 80007b2:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80007b4:	f000 fbf0 	bl	8000f98 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80007b8:	686b      	ldr	r3, [r5, #4]
 80007ba:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80007bc:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80007be:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80007c2:	d10c      	bne.n	80007de <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80007c4:	68a3      	ldr	r3, [r4, #8]
 80007c6:	f003 030c 	and.w	r3, r3, #12
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d0d3      	beq.n	8000776 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80007ce:	f000 fbe3 	bl	8000f98 <HAL_GetTick>
 80007d2:	1bc0      	subs	r0, r0, r7
 80007d4:	4540      	cmp	r0, r8
 80007d6:	d9f5      	bls.n	80007c4 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 80007d8:	2003      	movs	r0, #3
 80007da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d10a      	bne.n	80007f8 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007e2:	68a3      	ldr	r3, [r4, #8]
 80007e4:	f003 030c 	and.w	r3, r3, #12
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d0c4      	beq.n	8000776 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80007ec:	f000 fbd4 	bl	8000f98 <HAL_GetTick>
 80007f0:	1bc0      	subs	r0, r0, r7
 80007f2:	4540      	cmp	r0, r8
 80007f4:	d9f5      	bls.n	80007e2 <HAL_RCC_ClockConfig+0xae>
 80007f6:	e7ef      	b.n	80007d8 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	d10f      	bne.n	800081c <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80007fc:	68a3      	ldr	r3, [r4, #8]
 80007fe:	f003 030c 	and.w	r3, r3, #12
 8000802:	2b0c      	cmp	r3, #12
 8000804:	d0b7      	beq.n	8000776 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000806:	f000 fbc7 	bl	8000f98 <HAL_GetTick>
 800080a:	1bc0      	subs	r0, r0, r7
 800080c:	4540      	cmp	r0, r8
 800080e:	d9f5      	bls.n	80007fc <HAL_RCC_ClockConfig+0xc8>
 8000810:	e7e2      	b.n	80007d8 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000812:	f000 fbc1 	bl	8000f98 <HAL_GetTick>
 8000816:	1bc0      	subs	r0, r0, r7
 8000818:	4540      	cmp	r0, r8
 800081a:	d8dd      	bhi.n	80007d8 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800081c:	68a3      	ldr	r3, [r4, #8]
 800081e:	f013 0f0c 	tst.w	r3, #12
 8000822:	d1f6      	bne.n	8000812 <HAL_RCC_ClockConfig+0xde>
 8000824:	e7a7      	b.n	8000776 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000826:	b2f2      	uxtb	r2, r6
 8000828:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 030f 	and.w	r3, r3, #15
 8000830:	429e      	cmp	r6, r3
 8000832:	d19b      	bne.n	800076c <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000834:	6829      	ldr	r1, [r5, #0]
 8000836:	074a      	lsls	r2, r1, #29
 8000838:	d506      	bpl.n	8000848 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800083a:	4815      	ldr	r0, [pc, #84]	; (8000890 <HAL_RCC_ClockConfig+0x15c>)
 800083c:	6883      	ldr	r3, [r0, #8]
 800083e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000842:	68eb      	ldr	r3, [r5, #12]
 8000844:	4313      	orrs	r3, r2
 8000846:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000848:	070b      	lsls	r3, r1, #28
 800084a:	d507      	bpl.n	800085c <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800084c:	4a10      	ldr	r2, [pc, #64]	; (8000890 <HAL_RCC_ClockConfig+0x15c>)
 800084e:	6929      	ldr	r1, [r5, #16]
 8000850:	6893      	ldr	r3, [r2, #8]
 8000852:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000856:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800085a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800085c:	f7ff ff2c 	bl	80006b8 <HAL_RCC_GetSysClockFreq>
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_RCC_ClockConfig+0x15c>)
 8000862:	22f0      	movs	r2, #240	; 0xf0
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	fa92 f2a2 	rbit	r2, r2
 800086a:	fab2 f282 	clz	r2, r2
 800086e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000872:	40d3      	lsrs	r3, r2
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_RCC_ClockConfig+0x160>)
 8000876:	5cd3      	ldrb	r3, [r2, r3]
 8000878:	40d8      	lsrs	r0, r3
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <HAL_RCC_ClockConfig+0x164>)
 800087c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fb54 	bl	8000f2c <HAL_InitTick>
  
  return HAL_OK;
 8000884:	2000      	movs	r0, #0
}
 8000886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800088a:	bf00      	nop
 800088c:	40023c00 	.word	0x40023c00
 8000890:	40023800 	.word	0x40023800
 8000894:	080010c4 	.word	0x080010c4
 8000898:	20000000 	.word	0x20000000

0800089c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800089c:	4b01      	ldr	r3, [pc, #4]	; (80008a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000000 	.word	0x20000000

080008a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008ac:	4f6a      	ldr	r7, [pc, #424]	; (8000a58 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ae:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8000a60 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000a64 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ba:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80008c0:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80008c2:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80008c4:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80008c6:	ea34 0303 	bics.w	r3, r4, r3
 80008ca:	f040 80bd 	bne.w	8000a48 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ce:	684d      	ldr	r5, [r1, #4]
 80008d0:	f025 0a10 	bic.w	sl, r5, #16
 80008d4:	f1ba 0f02 	cmp.w	sl, #2
 80008d8:	d114      	bne.n	8000904 <HAL_GPIO_Init+0x5c>
 80008da:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80008de:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80008e2:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008e6:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80008ea:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80008ee:	230f      	movs	r3, #15
 80008f0:	fa03 f30b 	lsl.w	r3, r3, fp
 80008f4:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80008f8:	690b      	ldr	r3, [r1, #16]
 80008fa:	fa03 f30b 	lsl.w	r3, r3, fp
 80008fe:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000900:	f8c9 3020 	str.w	r3, [r9, #32]
 8000904:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000908:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800090c:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800090e:	fa09 f90b 	lsl.w	r9, r9, fp
 8000912:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000916:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800091a:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800091e:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000922:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000926:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000928:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 800092c:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800092e:	d80f      	bhi.n	8000950 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000930:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000932:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000934:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000938:	fa06 f60b 	lsl.w	r6, r6, fp
 800093c:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 800093e:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000940:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000942:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000946:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800094a:	4096      	lsls	r6, r2
 800094c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800094e:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000950:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000952:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000956:	688b      	ldr	r3, [r1, #8]
 8000958:	fa03 f30b 	lsl.w	r3, r3, fp
 800095c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000960:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000962:	00eb      	lsls	r3, r5, #3
 8000964:	d570      	bpl.n	8000a48 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	9303      	str	r3, [sp, #12]
 800096a:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800096e:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000970:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000974:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000978:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 800097c:	f022 0903 	bic.w	r9, r2, #3
 8000980:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000984:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000988:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 800098c:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800098e:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000994:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000998:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800099c:	260f      	movs	r6, #15
 800099e:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a2:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80009a4:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a8:	d01c      	beq.n	80009e4 <HAL_GPIO_Init+0x13c>
 80009aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009ae:	4298      	cmp	r0, r3
 80009b0:	d01a      	beq.n	80009e8 <HAL_GPIO_Init+0x140>
 80009b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009b6:	4298      	cmp	r0, r3
 80009b8:	d018      	beq.n	80009ec <HAL_GPIO_Init+0x144>
 80009ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009be:	4298      	cmp	r0, r3
 80009c0:	d016      	beq.n	80009f0 <HAL_GPIO_Init+0x148>
 80009c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009c6:	4298      	cmp	r0, r3
 80009c8:	d014      	beq.n	80009f4 <HAL_GPIO_Init+0x14c>
 80009ca:	4540      	cmp	r0, r8
 80009cc:	d014      	beq.n	80009f8 <HAL_GPIO_Init+0x150>
 80009ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d012      	beq.n	80009fc <HAL_GPIO_Init+0x154>
 80009d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80009da:	4298      	cmp	r0, r3
 80009dc:	bf14      	ite	ne
 80009de:	2308      	movne	r3, #8
 80009e0:	2307      	moveq	r3, #7
 80009e2:	e00c      	b.n	80009fe <HAL_GPIO_Init+0x156>
 80009e4:	2300      	movs	r3, #0
 80009e6:	e00a      	b.n	80009fe <HAL_GPIO_Init+0x156>
 80009e8:	2301      	movs	r3, #1
 80009ea:	e008      	b.n	80009fe <HAL_GPIO_Init+0x156>
 80009ec:	2302      	movs	r3, #2
 80009ee:	e006      	b.n	80009fe <HAL_GPIO_Init+0x156>
 80009f0:	2303      	movs	r3, #3
 80009f2:	e004      	b.n	80009fe <HAL_GPIO_Init+0x156>
 80009f4:	2304      	movs	r3, #4
 80009f6:	e002      	b.n	80009fe <HAL_GPIO_Init+0x156>
 80009f8:	2305      	movs	r3, #5
 80009fa:	e000      	b.n	80009fe <HAL_GPIO_Init+0x156>
 80009fc:	2306      	movs	r3, #6
 80009fe:	fa03 f30a 	lsl.w	r3, r3, sl
 8000a02:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a04:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a08:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a0a:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0c:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000a10:	bf0c      	ite	eq
 8000a12:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000a14:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8000a16:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000a1a:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a1e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000a22:	bf0c      	ite	eq
 8000a24:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000a26:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8000a28:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a2a:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2c:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000a30:	bf0c      	ite	eq
 8000a32:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000a34:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8000a36:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000a3a:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a3e:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000a40:	bf54      	ite	pl
 8000a42:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000a44:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000a46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a48:	3201      	adds	r2, #1
 8000a4a:	2a10      	cmp	r2, #16
 8000a4c:	f47f af38 	bne.w	80008c0 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000a50:	b005      	add	sp, #20
 8000a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a56:	bf00      	nop
 8000a58:	40013c00 	.word	0x40013c00
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40021400 	.word	0x40021400

08000a68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a6a:	68d3      	ldr	r3, [r2, #12]
 8000a6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a70:	041b      	lsls	r3, r3, #16
 8000a72:	0c1b      	lsrs	r3, r3, #16
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000a78:	0200      	lsls	r0, r0, #8
 8000a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000a82:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000a84:	60d3      	str	r3, [r2, #12]
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_NVIC_SetPriority+0x60>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a94:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a96:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	2c04      	cmp	r4, #4
 8000a9e:	bf28      	it	cs
 8000aa0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	2d06      	cmp	r5, #6

  return (
 8000aa4:	f04f 0501 	mov.w	r5, #1
 8000aa8:	fa05 f404 	lsl.w	r4, r5, r4
 8000aac:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab0:	bf8c      	ite	hi
 8000ab2:	3b03      	subhi	r3, #3
 8000ab4:	2300      	movls	r3, #0

  return (
 8000ab6:	400c      	ands	r4, r1
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	fa05 f303 	lsl.w	r3, r5, r3
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000ac2:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000ac4:	ea42 0204 	orr.w	r2, r2, r4
 8000ac8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	bfaf      	iteee	ge
 8000ace:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	f000 000f 	andlt.w	r0, r0, #15
 8000ad6:	4b06      	ldrlt	r3, [pc, #24]	; (8000af0 <HAL_NVIC_SetPriority+0x64>)
 8000ad8:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	bfa5      	ittet	ge
 8000adc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ae0:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000ae8:	bd30      	pop	{r4, r5, pc}
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00
 8000af0:	e000ed14 	.word	0xe000ed14

08000af4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	3801      	subs	r0, #1
 8000af6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000afa:	d20a      	bcs.n	8000b12 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b00:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	21f0      	movs	r1, #240	; 0xf0
 8000b04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b22:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b24:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b26:	bf0c      	ite	eq
 8000b28:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b2c:	f022 0204 	bicne.w	r2, r2, #4
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	4770      	bx	lr
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b38:	4770      	bx	lr

08000b3a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b3a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b3c:	f7ff fffc 	bl	8000b38 <HAL_SYSTICK_Callback>
 8000b40:	bd08      	pop	{r3, pc}
	...

08000b44 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b44:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b46:	4604      	mov	r4, r0
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	f000 809e 	beq.w	8000c8a <HAL_ADC_Init+0x146>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000b50:	b923      	cbnz	r3, 8000b5c <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b52:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b54:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b58:	f7ff fc24 	bl	80003a4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b5e:	06db      	lsls	r3, r3, #27
 8000b60:	f100 808e 	bmi.w	8000c80 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b6a:	f023 0302 	bic.w	r3, r3, #2
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000b74:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <HAL_ADC_Init+0x14c>)
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000b7c:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000b7e:	6859      	ldr	r1, [r3, #4]
 8000b80:	6862      	ldr	r2, [r4, #4]
 8000b82:	430a      	orrs	r2, r1
 8000b84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b86:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b88:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b8a:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b92:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ba2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ba4:	6859      	ldr	r1, [r3, #4]
 8000ba6:	68a2      	ldr	r2, [r4, #8]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000bb4:	6899      	ldr	r1, [r3, #8]
 8000bb6:	68e2      	ldr	r2, [r4, #12]
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bbc:	4a35      	ldr	r2, [pc, #212]	; (8000c94 <HAL_ADC_Init+0x150>)
 8000bbe:	4290      	cmp	r0, r2
 8000bc0:	d00e      	beq.n	8000be0 <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bc2:	6899      	ldr	r1, [r3, #8]
 8000bc4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000bc8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	4302      	orrs	r2, r0
 8000bce:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000bd8:	6899      	ldr	r1, [r3, #8]
 8000bda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	e006      	b.n	8000bee <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000be6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bee:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000bf0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000bf2:	69a1      	ldr	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000bf4:	f022 0202 	bic.w	r2, r2, #2
 8000bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000c00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000c02:	6a22      	ldr	r2, [r4, #32]
 8000c04:	b19a      	cbz	r2, 8000c2e <HAL_ADC_Init+0xea>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c0c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000c1a:	fa92 f2a2 	rbit	r2, r2
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c1e:	fab2 f182 	clz	r1, r2
 8000c22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c24:	6858      	ldr	r0, [r3, #4]
 8000c26:	3a01      	subs	r2, #1
 8000c28:	408a      	lsls	r2, r1
 8000c2a:	4302      	orrs	r2, r0
 8000c2c:	e002      	b.n	8000c34 <HAL_ADC_Init+0xf0>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c34:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c38:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c3e:	69e2      	ldr	r2, [r4, #28]
 8000c40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c42:	3a01      	subs	r2, #1
 8000c44:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c4a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000c4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000c5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c5c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c5e:	6961      	ldr	r1, [r4, #20]
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c66:	689a      	ldr	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c68:	2000      	movs	r0, #0
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c6a:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000c6e:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c70:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c74:	f023 0303 	bic.w	r3, r3, #3
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6423      	str	r3, [r4, #64]	; 0x40
 8000c7e:	e000      	b.n	8000c82 <HAL_ADC_Init+0x13e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c80:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c82:	2300      	movs	r3, #0
 8000c84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c88:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000c8a:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8000c8c:	bd10      	pop	{r4, pc}
 8000c8e:	bf00      	nop
 8000c90:	40012300 	.word	0x40012300
 8000c94:	0f000001 	.word	0x0f000001

08000c98 <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c98:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c9e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d04d      	beq.n	8000d42 <HAL_ADC_Start+0xaa>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cac:	6803      	ldr	r3, [r0, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	07d1      	lsls	r1, r2, #31
 8000cb2:	d503      	bpl.n	8000cbc <HAL_ADC_Start+0x24>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	07d2      	lsls	r2, r2, #31
 8000cb8:	d412      	bmi.n	8000ce0 <HAL_ADC_Start+0x48>
 8000cba:	e037      	b.n	8000d2c <HAL_ADC_Start+0x94>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cbc:	689a      	ldr	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cbe:	4922      	ldr	r1, [pc, #136]	; (8000d48 <HAL_ADC_Start+0xb0>)
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cc0:	f042 0201 	orr.w	r2, r2, #1
 8000cc4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cc6:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <HAL_ADC_Start+0xb4>)
 8000cc8:	6812      	ldr	r2, [r2, #0]
 8000cca:	fbb2 f2f1 	udiv	r2, r2, r1
 8000cce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    while(counter != 0U)
    {
      counter--;
 8000cd2:	9201      	str	r2, [sp, #4]
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
    while(counter != 0U)
 8000cd4:	9a01      	ldr	r2, [sp, #4]
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d0ec      	beq.n	8000cb4 <HAL_ADC_Start+0x1c>
    {
      counter--;
 8000cda:	9a01      	ldr	r2, [sp, #4]
 8000cdc:	3a01      	subs	r2, #1
 8000cde:	e7f8      	b.n	8000cd2 <HAL_ADC_Start+0x3a>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000ce6:	f022 0201 	bic.w	r2, r2, #1
 8000cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cee:	6402      	str	r2, [r0, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	0551      	lsls	r1, r2, #21
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cf4:	bf41      	itttt	mi
 8000cf6:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000cf8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000cfc:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000d00:	6402      	strmi	r2, [r0, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d02:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d08:	bf1c      	itt	ne
 8000d0a:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000d0c:	f022 0206 	bicne.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d10:	6442      	str	r2, [r0, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d18:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d1c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_ADC_Start+0xb8>)
 8000d20:	6852      	ldr	r2, [r2, #4]
 8000d22:	06d2      	lsls	r2, r2, #27
 8000d24:	d004      	beq.n	8000d30 <HAL_ADC_Start+0x98>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <HAL_ADC_Start+0xbc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d001      	beq.n	8000d30 <HAL_ADC_Start+0x98>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	e009      	b.n	8000d44 <HAL_ADC_Start+0xac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d30:	6898      	ldr	r0, [r3, #8]
 8000d32:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000d36:	d1f9      	bne.n	8000d2c <HAL_ADC_Start+0x94>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	e000      	b.n	8000d44 <HAL_ADC_Start+0xac>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d42:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 8000d44:	b002      	add	sp, #8
 8000d46:	4770      	bx	lr
 8000d48:	000f4240 	.word	0x000f4240
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	40012300 	.word	0x40012300
 8000d54:	40012000 	.word	0x40012000

08000d58 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d58:	6803      	ldr	r3, [r0, #0]
 8000d5a:	689a      	ldr	r2, [r3, #8]
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d5c:	b570      	push	{r4, r5, r6, lr}
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d5e:	0556      	lsls	r6, r2, #21
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d60:	4604      	mov	r4, r0
 8000d62:	460d      	mov	r5, r1
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d64:	d50b      	bpl.n	8000d7e <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000d66:	689b      	ldr	r3, [r3, #8]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000d68:	05d8      	lsls	r0, r3, #23
 8000d6a:	d508      	bpl.n	8000d7e <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d6e:	f043 0320 	orr.w	r3, r3, #32
 8000d72:	6423      	str	r3, [r4, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d74:	2300      	movs	r3, #0
 8000d76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    
    return HAL_ERROR;
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000d7e:	f000 f90b 	bl	8000f98 <HAL_GetTick>
 8000d82:	4606      	mov	r6, r0

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	0792      	lsls	r2, r2, #30
 8000d8a:	d411      	bmi.n	8000db0 <HAL_ADC_PollForConversion+0x58>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000d8c:	1c69      	adds	r1, r5, #1
 8000d8e:	d0fa      	beq.n	8000d86 <HAL_ADC_PollForConversion+0x2e>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000d90:	b945      	cbnz	r5, 8000da4 <HAL_ADC_PollForConversion+0x4c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6423      	str	r3, [r4, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000da0:	2003      	movs	r0, #3
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000da4:	f000 f8f8 	bl	8000f98 <HAL_GetTick>
 8000da8:	1b80      	subs	r0, r0, r6
 8000daa:	4285      	cmp	r5, r0
 8000dac:	d2ea      	bcs.n	8000d84 <HAL_ADC_PollForConversion+0x2c>
 8000dae:	e7f0      	b.n	8000d92 <HAL_ADC_PollForConversion+0x3a>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000db0:	f06f 0212 	mvn.w	r2, #18
 8000db4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000db6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dbc:	6422      	str	r2, [r4, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000dc4:	d001      	beq.n	8000dca <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	bd70      	pop	{r4, r5, r6, pc}
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000dca:	69a2      	ldr	r2, [r4, #24]
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	d1fa      	bne.n	8000dc6 <HAL_ADC_PollForConversion+0x6e>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000dd2:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000dd6:	d002      	beq.n	8000dde <HAL_ADC_PollForConversion+0x86>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000dd8:	689b      	ldr	r3, [r3, #8]
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000dda:	055b      	lsls	r3, r3, #21
 8000ddc:	d4f3      	bmi.n	8000dc6 <HAL_ADC_PollForConversion+0x6e>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000de4:	6423      	str	r3, [r4, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000de6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000de8:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000dec:	d1eb      	bne.n	8000dc6 <HAL_ADC_PollForConversion+0x6e>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8000df6:	bd70      	pop	{r4, r5, r6, pc}

08000df8 <HAL_ADC_GetValue>:
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000df8:	6803      	ldr	r3, [r0, #0]
 8000dfa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000dfc:	4770      	bx	lr
	...

08000e00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e06:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d069      	beq.n	8000ee2 <HAL_ADC_ConfigChannel+0xe2>
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e0e:	680d      	ldr	r5, [r1, #0]
 8000e10:	6804      	ldr	r4, [r0, #0]
 8000e12:	688f      	ldr	r7, [r1, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e14:	2301      	movs	r3, #1
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e16:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000e1c:	b2ae      	uxth	r6, r5
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e1e:	d910      	bls.n	8000e42 <HAL_ADC_ConfigChannel+0x42>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e20:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8000e24:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8000e28:	f1a2 031e 	sub.w	r3, r2, #30
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	ea2e 0202 	bic.w	r2, lr, r2
 8000e34:	60e2      	str	r2, [r4, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e36:	68e2      	ldr	r2, [r4, #12]
 8000e38:	fa07 f303 	lsl.w	r3, r7, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	60e3      	str	r3, [r4, #12]
 8000e40:	e00e      	b.n	8000e60 <HAL_ADC_ConfigChannel+0x60>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e42:	6922      	ldr	r2, [r4, #16]
 8000e44:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000e48:	f04f 0e07 	mov.w	lr, #7
 8000e4c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000e50:	ea22 020e 	bic.w	r2, r2, lr
 8000e54:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000e56:	6922      	ldr	r2, [r4, #16]
 8000e58:	fa07 f303 	lsl.w	r3, r7, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e60:	684b      	ldr	r3, [r1, #4]
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8000e68:	d80d      	bhi.n	8000e86 <HAL_ADC_ConfigChannel+0x86>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000e6a:	4413      	add	r3, r2
 8000e6c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000e6e:	1f59      	subs	r1, r3, #5
 8000e70:	231f      	movs	r3, #31
 8000e72:	408b      	lsls	r3, r1
 8000e74:	ea27 0303 	bic.w	r3, r7, r3
 8000e78:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e7a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e7c:	fa06 f101 	lsl.w	r1, r6, r1
 8000e80:	4311      	orrs	r1, r2
 8000e82:	6361      	str	r1, [r4, #52]	; 0x34
 8000e84:	e01d      	b.n	8000ec2 <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e86:	2b0c      	cmp	r3, #12
 8000e88:	d80e      	bhi.n	8000ea8 <HAL_ADC_ConfigChannel+0xa8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e8a:	4413      	add	r3, r2
 8000e8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000e8e:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000e92:	231f      	movs	r3, #31
 8000e94:	4093      	lsls	r3, r2
 8000e96:	ea21 0303 	bic.w	r3, r1, r3
 8000e9a:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e9e:	fa06 f202 	lsl.w	r2, r6, r2
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	6322      	str	r2, [r4, #48]	; 0x30
 8000ea6:	e00c      	b.n	8000ec2 <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000ea8:	4413      	add	r3, r2
 8000eaa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000eac:	3b41      	subs	r3, #65	; 0x41
 8000eae:	221f      	movs	r2, #31
 8000eb0:	409a      	lsls	r2, r3
 8000eb2:	ea27 0202 	bic.w	r2, r7, r2
 8000eb6:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000eb8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000eba:	fa06 f203 	lsl.w	r2, r6, r3
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_ADC_ConfigChannel+0x11c>)
 8000ec4:	429c      	cmp	r4, r3
 8000ec6:	d004      	beq.n	8000ed2 <HAL_ADC_ConfigChannel+0xd2>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ece:	4618      	mov	r0, r3
 8000ed0:	e022      	b.n	8000f18 <HAL_ADC_ConfigChannel+0x118>
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ed2:	2d12      	cmp	r5, #18
 8000ed4:	d107      	bne.n	8000ee6 <HAL_ADC_ConfigChannel+0xe6>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <HAL_ADC_ConfigChannel+0x120>)
 8000ed8:	6853      	ldr	r3, [r2, #4]
 8000eda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ede:	6053      	str	r3, [r2, #4]
 8000ee0:	e001      	b.n	8000ee6 <HAL_ADC_ConfigChannel+0xe6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	e018      	b.n	8000f18 <HAL_ADC_ConfigChannel+0x118>
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ee6:	f1a5 0310 	sub.w	r3, r5, #16
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d8ec      	bhi.n	8000ec8 <HAL_ADC_ConfigChannel+0xc8>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000eee:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_ADC_ConfigChannel+0x120>)
 8000ef0:	6853      	ldr	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000ef2:	2d10      	cmp	r5, #16
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ef8:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000efa:	d1e5      	bne.n	8000ec8 <HAL_ADC_ConfigChannel+0xc8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <HAL_ADC_ConfigChannel+0x124>)
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_ADC_ConfigChannel+0x128>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f06:	230a      	movs	r3, #10
 8000f08:	4353      	muls	r3, r2
      while(counter != 0U)
      {
        counter--;
 8000f0a:	9301      	str	r3, [sp, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
      while(counter != 0U)
 8000f0c:	9b01      	ldr	r3, [sp, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0da      	beq.n	8000ec8 <HAL_ADC_ConfigChannel+0xc8>
      {
        counter--;
 8000f12:	9b01      	ldr	r3, [sp, #4]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	e7f8      	b.n	8000f0a <HAL_ADC_ConfigChannel+0x10a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 8000f18:	b003      	add	sp, #12
 8000f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1c:	40012000 	.word	0x40012000
 8000f20:	40012300 	.word	0x40012300
 8000f24:	20000000 	.word	0x20000000
 8000f28:	000f4240 	.word	0x000f4240

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f38:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f3c:	f7ff fdda 	bl	8000af4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	4621      	mov	r1, r4
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff fda0 	bl	8000a8c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	bd10      	pop	{r4, pc}
 8000f50:	20000000 	.word	0x20000000

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_Init+0x30>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f5e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f66:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f6e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f7ff fd79 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ffd8 	bl	8000f2c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff f933 	bl	80001e6 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000f80:	2000      	movs	r0, #0
 8000f82:	bd08      	pop	{r3, pc}
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f88:	4a02      	ldr	r2, [pc, #8]	; (8000f94 <HAL_IncTick+0xc>)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000068 	.word	0x20000068

08000f98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f98:	4b01      	ldr	r3, [pc, #4]	; (8000fa0 <HAL_GetTick+0x8>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000068 	.word	0x20000068

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000fa4:	b513      	push	{r0, r1, r4, lr}
 8000fa6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000fa8:	f7ff fff6 	bl	8000f98 <HAL_GetTick>
 8000fac:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000fae:	f7ff fff3 	bl	8000f98 <HAL_GetTick>
 8000fb2:	9b01      	ldr	r3, [sp, #4]
 8000fb4:	1b00      	subs	r0, r0, r4
 8000fb6:	4298      	cmp	r0, r3
 8000fb8:	d3f9      	bcc.n	8000fae <HAL_Delay+0xa>
  {
  }
}
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd10      	pop	{r4, pc}
	...

08000fc0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	490f      	ldr	r1, [pc, #60]	; (8001000 <SystemInit+0x40>)
 8000fc2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000fc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <SystemInit+0x44>)
 8000fd0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fd2:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fda:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000fe2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fe6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <SystemInit+0x48>)
 8000fea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ff2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ff4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ffa:	608b      	str	r3, [r1, #8]
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00
 8001004:	40023800 	.word	0x40023800
 8001008:	24003010 	.word	0x24003010

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001010:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001012:	e003      	b.n	800101c <LoopCopyDataInit>

08001014 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001016:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001018:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800101a:	3104      	adds	r1, #4

0800101c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001020:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001022:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001024:	d3f6      	bcc.n	8001014 <CopyDataInit>
  ldr  r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001028:	e002      	b.n	8001030 <LoopFillZerobss>

0800102a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800102a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800102c:	f842 3b04 	str.w	r3, [r2], #4

08001030 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001032:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001034:	d3f9      	bcc.n	800102a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001036:	f7ff ffc3 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f000 f811 	bl	8001060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff f959 	bl	80002f4 <main>
  bx  lr    
 8001042:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001044:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001048:	080010dc 	.word	0x080010dc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001050:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001054:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001058:	2000006c 	.word	0x2000006c

0800105c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC_IRQHandler>
	...

08001060 <__libc_init_array>:
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <__libc_init_array+0x3c>)
 8001064:	4c0e      	ldr	r4, [pc, #56]	; (80010a0 <__libc_init_array+0x40>)
 8001066:	1ae4      	subs	r4, r4, r3
 8001068:	10a4      	asrs	r4, r4, #2
 800106a:	2500      	movs	r5, #0
 800106c:	461e      	mov	r6, r3
 800106e:	42a5      	cmp	r5, r4
 8001070:	d004      	beq.n	800107c <__libc_init_array+0x1c>
 8001072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001076:	4798      	blx	r3
 8001078:	3501      	adds	r5, #1
 800107a:	e7f8      	b.n	800106e <__libc_init_array+0xe>
 800107c:	f000 f816 	bl	80010ac <_init>
 8001080:	4c08      	ldr	r4, [pc, #32]	; (80010a4 <__libc_init_array+0x44>)
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <__libc_init_array+0x48>)
 8001084:	1ae4      	subs	r4, r4, r3
 8001086:	10a4      	asrs	r4, r4, #2
 8001088:	2500      	movs	r5, #0
 800108a:	461e      	mov	r6, r3
 800108c:	42a5      	cmp	r5, r4
 800108e:	d004      	beq.n	800109a <__libc_init_array+0x3a>
 8001090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001094:	4798      	blx	r3
 8001096:	3501      	adds	r5, #1
 8001098:	e7f8      	b.n	800108c <__libc_init_array+0x2c>
 800109a:	bd70      	pop	{r4, r5, r6, pc}
 800109c:	080010d4 	.word	0x080010d4
 80010a0:	080010d4 	.word	0x080010d4
 80010a4:	080010d8 	.word	0x080010d8
 80010a8:	080010d4 	.word	0x080010d4

080010ac <_init>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	bf00      	nop
 80010b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b2:	bc08      	pop	{r3}
 80010b4:	469e      	mov	lr, r3
 80010b6:	4770      	bx	lr

080010b8 <_fini>:
 80010b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ba:	bf00      	nop
 80010bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010be:	bc08      	pop	{r3}
 80010c0:	469e      	mov	lr, r3
 80010c2:	4770      	bx	lr
