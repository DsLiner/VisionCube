
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001274  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080013fc  080013fc  000113fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000060  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000064  20000064  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000065c5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000014d0  00000000  00000000  000265f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002082  00000000  00000000  00027ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000458  00000000  00000000  00029b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005e8  00000000  00000000  00029fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000310f  00000000  00000000  0002a590  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001ce6  00000000  00000000  0002d69f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0002f385  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000009d8  00000000  00000000  0002f404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080013e4 	.word	0x080013e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080013e4 	.word	0x080013e4

080001c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80001c8:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80001ca:	480b      	ldr	r0, [pc, #44]	; (80001f8 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <MX_USART2_UART_Init+0x34>)
 80001ce:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80001d2:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80001d6:	220c      	movs	r2, #12
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80001d8:	2300      	movs	r3, #0
 80001da:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80001dc:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80001de:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80001e0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80001e2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80001e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80001e6:	f000 fb6f 	bl	80008c8 <HAL_UART_Init>
 80001ea:	b118      	cbz	r0, 80001f4 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80001ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
 80001f0:	f000 b91e 	b.w	8000430 <Error_Handler>
 80001f4:	bd08      	pop	{r3, pc}
 80001f6:	bf00      	nop
 80001f8:	20000020 	.word	0x20000020
 80001fc:	40004400 	.word	0x40004400

08000200 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000200:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8000202:	6802      	ldr	r2, [r0, #0]
 8000204:	4b0f      	ldr	r3, [pc, #60]	; (8000244 <HAL_UART_MspInit+0x44>)
 8000206:	429a      	cmp	r2, r3
 8000208:	d119      	bne.n	800023e <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800020a:	2300      	movs	r3, #0
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000210:	480e      	ldr	r0, [pc, #56]	; (800024c <HAL_UART_MspInit+0x4c>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000214:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000218:	641a      	str	r2, [r3, #64]	; 0x40
 800021a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800021c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000224:	230c      	movs	r3, #12
 8000226:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000228:	2302      	movs	r3, #2
 800022a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800022c:	2301      	movs	r3, #1
 800022e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000236:	2307      	movs	r3, #7
 8000238:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800023a:	f000 febb 	bl	8000fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800023e:	b007      	add	sp, #28
 8000240:	f85d fb04 	ldr.w	pc, [sp], #4
 8000244:	40004400 	.word	0x40004400
 8000248:	40023800 	.word	0x40023800
 800024c:	40020000 	.word	0x40020000

08000250 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000250:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000252:	f001 f835 	bl	80012c0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800025a:	f000 bffe 	b.w	800125a <HAL_SYSTICK_IRQHandler>

0800025e <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800025e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000260:	2007      	movs	r0, #7
 8000262:	f000 ff91 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000266:	2200      	movs	r2, #0
 8000268:	4611      	mov	r1, r2
 800026a:	f06f 000b 	mvn.w	r0, #11
 800026e:	f000 ff9d 	bl	80011ac <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000272:	2200      	movs	r2, #0
 8000274:	4611      	mov	r1, r2
 8000276:	f06f 000a 	mvn.w	r0, #10
 800027a:	f000 ff97 	bl	80011ac <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800027e:	2200      	movs	r2, #0
 8000280:	4611      	mov	r1, r2
 8000282:	f06f 0009 	mvn.w	r0, #9
 8000286:	f000 ff91 	bl	80011ac <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	4611      	mov	r1, r2
 800028e:	f06f 0004 	mvn.w	r0, #4
 8000292:	f000 ff8b 	bl	80011ac <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000296:	2200      	movs	r2, #0
 8000298:	4611      	mov	r1, r2
 800029a:	f06f 0003 	mvn.w	r0, #3
 800029e:	f000 ff85 	bl	80011ac <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80002a2:	2200      	movs	r2, #0
 80002a4:	4611      	mov	r1, r2
 80002a6:	f06f 0001 	mvn.w	r0, #1
 80002aa:	f000 ff7f 	bl	80011ac <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002ae:	2200      	movs	r2, #0
 80002b0:	4611      	mov	r1, r2
 80002b2:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002ba:	f000 bf77 	b.w	80011ac <HAL_NVIC_SetPriority>
	...

080002c0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80002c0:	b510      	push	{r4, lr}
 80002c2:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80002c4:	2300      	movs	r3, #0
 80002c6:	4a27      	ldr	r2, [pc, #156]	; (8000364 <SystemClock_Config+0xa4>)
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80002cc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80002d0:	6411      	str	r1, [r2, #64]	; 0x40
 80002d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80002d4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80002d8:	9201      	str	r2, [sp, #4]
 80002da:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002dc:	4a22      	ldr	r2, [pc, #136]	; (8000368 <SystemClock_Config+0xa8>)
 80002de:	9302      	str	r3, [sp, #8]
 80002e0:	6811      	ldr	r1, [r2, #0]
 80002e2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80002e6:	6011      	str	r1, [r2, #0]
 80002e8:	6812      	ldr	r2, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ea:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ec:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 80002f0:	2308      	movs	r3, #8
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002f2:	9202      	str	r2, [sp, #8]
 80002f4:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 80002f6:	9310      	str	r3, [sp, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 80002fa:	23a8      	movs	r3, #168	; 0xa8

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fc:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fe:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000300:	9311      	str	r3, [sp, #68]	; 0x44

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000302:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000304:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	a808      	add	r0, sp, #32

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000308:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800030a:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030c:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000310:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f000 fbbf 	bl	8000a94 <HAL_RCC_OscConfig>
 8000316:	b100      	cbz	r0, 800031a <SystemClock_Config+0x5a>
 8000318:	e7fe      	b.n	8000318 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800031e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000324:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000326:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800032c:	a803      	add	r0, sp, #12
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000330:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000332:	f000 fd55 	bl	8000de0 <HAL_RCC_ClockConfig>
 8000336:	4604      	mov	r4, r0
 8000338:	b100      	cbz	r0, 800033c <SystemClock_Config+0x7c>
 800033a:	e7fe      	b.n	800033a <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800033c:	f000 fe04 	bl	8000f48 <HAL_RCC_GetHCLKFreq>
 8000340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000344:	fbb0 f0f3 	udiv	r0, r0, r3
 8000348:	f000 ff64 	bl	8001214 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800034c:	2004      	movs	r0, #4
 800034e:	f000 ff77 	bl	8001240 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000352:	4622      	mov	r2, r4
 8000354:	4621      	mov	r1, r4
 8000356:	f04f 30ff 	mov.w	r0, #4294967295
 800035a:	f000 ff27 	bl	80011ac <HAL_NVIC_SetPriority>
}
 800035e:	b014      	add	sp, #80	; 0x50
 8000360:	bd10      	pop	{r4, pc}
 8000362:	bf00      	nop
 8000364:	40023800 	.word	0x40023800
 8000368:	40007000 	.word	0x40007000

0800036c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	b087      	sub	sp, #28
  HAL_StatusTypeDef tx_status = HAL_ERROR;

  uint8_t rx_data[10];
  uint8_t tx_data[10];

  tx_data[0] = 0;
 8000370:	ad06      	add	r5, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000372:	f000 ff8b 	bl	800128c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000376:	f7ff ffa3 	bl	80002c0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037a:	f000 f85b 	bl	8000434 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800037e:	f7ff ff23 	bl	80001c8 <MX_USART2_UART_Init>
  HAL_StatusTypeDef tx_status = HAL_ERROR;

  uint8_t rx_data[10];
  uint8_t tx_data[10];

  tx_data[0] = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	f805 3d0c 	strb.w	r3, [r5, #-12]!
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		tx_data[0]++;
		tx_data[0] %= 16;
 8000388:	f89d 300c 	ldrb.w	r3, [sp, #12]

		tx_status = HAL_UART_Transmit(&huart2, tx_data, 1, 1000);
 800038c:	4826      	ldr	r0, [pc, #152]	; (8000428 <main+0xbc>)
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		tx_data[0]++;
		tx_data[0] %= 16;
 800038e:	3301      	adds	r3, #1
 8000390:	f003 030f 	and.w	r3, r3, #15
 8000394:	f88d 300c 	strb.w	r3, [sp, #12]

		tx_status = HAL_UART_Transmit(&huart2, tx_data, 1, 1000);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800039e:	4629      	mov	r1, r5
 80003a0:	f000 fac0 	bl	8000924 <HAL_UART_Transmit>

		if(tx_status == HAL_OK)
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d139      	bne.n	800041c <main+0xb0>
		{
			rx_status = HAL_UART_Receive(&huart2, rx_data, 1, 1000);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ae:	4669      	mov	r1, sp
 80003b0:	481d      	ldr	r0, [pc, #116]	; (8000428 <main+0xbc>)
 80003b2:	f000 fb12 	bl	80009da <HAL_UART_Receive>
			if(rx_status == HAL_OK)
 80003b6:	4602      	mov	r2, r0
 80003b8:	bb80      	cbnz	r0, 800041c <main+0xb0>
			{
				if(tx_data[0] == rx_data[0])
 80003ba:	f89d 400c 	ldrb.w	r4, [sp, #12]
 80003be:	f89d 3000 	ldrb.w	r3, [sp]
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d12a      	bne.n	800041c <main+0xb0>
				{
					uint8_t temp = tx_data[0];
					if(temp / 8 == 1)
 80003c6:	f1a4 0308 	sub.w	r3, r4, #8
 80003ca:	2b07      	cmp	r3, #7
						HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 80003cc:	bf98      	it	ls
 80003ce:	2201      	movls	r2, #1
					else
						HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
 80003d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d4:	4815      	ldr	r0, [pc, #84]	; (800042c <main+0xc0>)
 80003d6:	f000 fed3 	bl	8001180 <HAL_GPIO_WritePin>
					temp %= 8;

					if(temp / 4 == 1)
 80003da:	f004 0307 	and.w	r3, r4, #7
 80003de:	3b04      	subs	r3, #4
 80003e0:	2b03      	cmp	r3, #3
						HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 80003e2:	bf94      	ite	ls
 80003e4:	2201      	movls	r2, #1
					else
						HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
 80003e6:	2200      	movhi	r2, #0
 80003e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ec:	480f      	ldr	r0, [pc, #60]	; (800042c <main+0xc0>)
 80003ee:	f000 fec7 	bl	8001180 <HAL_GPIO_WritePin>
					temp %= 4;

					if(temp / 2 == 1)
 80003f2:	f004 0303 	and.w	r3, r4, #3
 80003f6:	3b02      	subs	r3, #2
 80003f8:	2b01      	cmp	r3, #1
						HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 80003fa:	bf94      	ite	ls
 80003fc:	2201      	movls	r2, #1
					else
						HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movhi	r2, #0
 8000400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000404:	4809      	ldr	r0, [pc, #36]	; (800042c <main+0xc0>)
 8000406:	f000 febb 	bl	8001180 <HAL_GPIO_WritePin>
					temp %= 2;

					if(temp == 1)
 800040a:	f014 0201 	ands.w	r2, r4, #1
						HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
					else
						HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 800040e:	bf08      	it	eq
 8000410:	2200      	moveq	r2, #0
 8000412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <main+0xc0>)
 8000418:	f000 feb2 	bl	8001180 <HAL_GPIO_WritePin>
				}
			}
		}

		HAL_Delay(500u);
 800041c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000420:	f000 ff5c 	bl	80012dc <HAL_Delay>
	}
 8000424:	e7b0      	b.n	8000388 <main+0x1c>
 8000426:	bf00      	nop
 8000428:	20000020 	.word	0x20000020
 800042c:	40020c00 	.word	0x40020c00

08000430 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	e7fe      	b.n	8000430 <Error_Handler>
	...

08000434 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000438:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800043a:	2400      	movs	r4, #0
 800043c:	4b78      	ldr	r3, [pc, #480]	; (8000620 <MX_GPIO_Init+0x1ec>)
 800043e:	9403      	str	r4, [sp, #12]
 8000440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000442:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 800062c <MX_GPIO_Init+0x1f8>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000446:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8000630 <MX_GPIO_Init+0x1fc>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800044a:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8000634 <MX_GPIO_Init+0x200>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800044e:	4f75      	ldr	r7, [pc, #468]	; (8000624 <MX_GPIO_Init+0x1f0>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000450:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8000638 <MX_GPIO_Init+0x204>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000454:	f042 0210 	orr.w	r2, r2, #16
 8000458:	631a      	str	r2, [r3, #48]	; 0x30
 800045a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800045c:	f002 0210 	and.w	r2, r2, #16
 8000460:	9203      	str	r2, [sp, #12]
 8000462:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000464:	9404      	str	r4, [sp, #16]
 8000466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000468:	f042 0204 	orr.w	r2, r2, #4
 800046c:	631a      	str	r2, [r3, #48]	; 0x30
 800046e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000470:	f002 0204 	and.w	r2, r2, #4
 8000474:	9204      	str	r2, [sp, #16]
 8000476:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000478:	9405      	str	r4, [sp, #20]
 800047a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800047c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000480:	631a      	str	r2, [r3, #48]	; 0x30
 8000482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000484:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000488:	9205      	str	r2, [sp, #20]
 800048a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	9406      	str	r4, [sp, #24]
 800048e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000490:	f042 0201 	orr.w	r2, r2, #1
 8000494:	631a      	str	r2, [r3, #48]	; 0x30
 8000496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000498:	f002 0201 	and.w	r2, r2, #1
 800049c:	9206      	str	r2, [sp, #24]
 800049e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	9407      	str	r4, [sp, #28]
 80004a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004a4:	f042 0202 	orr.w	r2, r2, #2
 80004a8:	631a      	str	r2, [r3, #48]	; 0x30
 80004aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ac:	f002 0202 	and.w	r2, r2, #2
 80004b0:	9207      	str	r2, [sp, #28]
 80004b2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004b4:	9408      	str	r4, [sp, #32]
 80004b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004b8:	f042 0208 	orr.w	r2, r2, #8
 80004bc:	631a      	str	r2, [r3, #48]	; 0x30
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	f003 0308 	and.w	r3, r3, #8
 80004c4:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80004c6:	4622      	mov	r2, r4
 80004c8:	4648      	mov	r0, r9
 80004ca:	2108      	movs	r1, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004cc:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80004ce:	f000 fe57 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80004d2:	4622      	mov	r2, r4
 80004d4:	4640      	mov	r0, r8
 80004d6:	2101      	movs	r1, #1
 80004d8:	f000 fe52 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80004dc:	4622      	mov	r2, r4
 80004de:	4658      	mov	r0, fp
 80004e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80004e4:	f000 fe4c 	bl	8001180 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2601      	movs	r6, #1
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80004ea:	2508      	movs	r5, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80004ec:	a909      	add	r1, sp, #36	; 0x24
 80004ee:	4648      	mov	r0, r9
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80004f0:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f000 fd5c 	bl	8000fb4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80004fc:	a909      	add	r1, sp, #36	; 0x24
 80004fe:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000500:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000508:	f000 fd54 	bl	8000fb4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800050c:	2305      	movs	r3, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800050e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000510:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000512:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000514:	4640      	mov	r0, r8
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000516:	930d      	str	r3, [sp, #52]	; 0x34
 8000518:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000520:	f000 fd48 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000524:	4b40      	ldr	r3, [pc, #256]	; (8000628 <MX_GPIO_Init+0x1f4>)
 8000526:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000528:	a909      	add	r1, sp, #36	; 0x24
 800052a:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800052c:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000530:	f000 fd40 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000534:	2210      	movs	r2, #16
 8000536:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800053a:	2206      	movs	r2, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	4638      	mov	r0, r7
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800053e:	920d      	str	r2, [sp, #52]	; 0x34
 8000540:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000542:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f000 fd34 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800054c:	21e0      	movs	r1, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800054e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000550:	9109      	str	r1, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000552:	4638      	mov	r0, r7
 8000554:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000556:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f000 fd29 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000562:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000564:	a909      	add	r1, sp, #36	; 0x24
 8000566:	4650      	mov	r0, sl
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000568:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800056e:	f000 fd21 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000572:	f44f 6180 	mov.w	r1, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000576:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000578:	9109      	str	r1, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800057a:	4650      	mov	r0, sl
 800057c:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800057e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000580:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000586:	f000 fd15 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800058a:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800058e:	a909      	add	r1, sp, #36	; 0x24
 8000590:	4658      	mov	r0, fp
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000592:	9309      	str	r3, [sp, #36]	; 0x24
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059a:	f000 fd0b 	bl	8000fb4 <HAL_GPIO_Init>
  /*Configure GPIO pins : PC7 PCPin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800059e:	9a01      	ldr	r2, [sp, #4]
 80005a0:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PC7 PCPin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 80005a2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a6:	a909      	add	r1, sp, #36	; 0x24
 80005a8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PC7 PCPin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 80005aa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ac:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b2:	f000 fcff 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80005b6:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80005ba:	a909      	add	r1, sp, #36	; 0x24
 80005bc:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80005be:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f000 fcf6 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80005c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80005cc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80005d0:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	4638      	mov	r0, r7
  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80005d4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f000 fcea 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80005e0:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80005e2:	a909      	add	r1, sp, #36	; 0x24
 80005e4:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80005e6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80005ec:	f000 fce2 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80005f0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80005f4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f6:	2312      	movs	r3, #18
 80005f8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fa:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005fc:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fe:	4650      	mov	r0, sl
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000600:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000602:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	f000 fcd5 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_GPIO_Init+0x1f4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800060c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800060e:	a909      	add	r1, sp, #36	; 0x24
 8000610:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000612:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000616:	f000 fccd 	bl	8000fb4 <HAL_GPIO_Init>

}
 800061a:	b00f      	add	sp, #60	; 0x3c
 800061c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	10120000 	.word	0x10120000
 800062c:	40021000 	.word	0x40021000
 8000630:	40020800 	.word	0x40020800
 8000634:	40020c00 	.word	0x40020c00
 8000638:	40020400 	.word	0x40020400

0800063c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800063c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000640:	6807      	ldr	r7, [r0, #0]
 8000642:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000644:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000646:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800064a:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800064c:	68a1      	ldr	r1, [r4, #8]
 800064e:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000650:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000652:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000654:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8000656:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000658:	4311      	orrs	r1, r2
 800065a:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800065c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000660:	430a      	orrs	r2, r1
 8000662:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000664:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000668:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800066a:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800066c:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800066e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000672:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000674:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000678:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	4b7c      	ldr	r3, [pc, #496]	; (8000870 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000680:	d17c      	bne.n	800077c <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000682:	429f      	cmp	r7, r3
 8000684:	d003      	beq.n	800068e <UART_SetConfig+0x52>
 8000686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800068a:	429f      	cmp	r7, r3
 800068c:	d131      	bne.n	80006f2 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800068e:	f000 fc79 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 8000692:	6863      	ldr	r3, [r4, #4]
 8000694:	2519      	movs	r5, #25
 8000696:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800069a:	4368      	muls	r0, r5
 800069c:	fbb0 f8f8 	udiv	r8, r0, r8
 80006a0:	f000 fc70 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 80006a4:	6866      	ldr	r6, [r4, #4]
 80006a6:	4368      	muls	r0, r5
 80006a8:	0076      	lsls	r6, r6, #1
 80006aa:	fbb0 f6f6 	udiv	r6, r0, r6
 80006ae:	f000 fc69 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 80006b2:	6863      	ldr	r3, [r4, #4]
 80006b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4368      	muls	r0, r5
 80006bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80006c0:	fbb0 f0f9 	udiv	r0, r0, r9
 80006c4:	fb09 6610 	mls	r6, r9, r0, r6
 80006c8:	f000 fc5c 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 80006cc:	fbb8 f8f9 	udiv	r8, r8, r9
 80006d0:	6861      	ldr	r1, [r4, #4]
 80006d2:	00f6      	lsls	r6, r6, #3
 80006d4:	3632      	adds	r6, #50	; 0x32
 80006d6:	fbb6 f6f9 	udiv	r6, r6, r9
 80006da:	0076      	lsls	r6, r6, #1
 80006dc:	4368      	muls	r0, r5
 80006de:	0049      	lsls	r1, r1, #1
 80006e0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80006e4:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80006e8:	fbb0 faf1 	udiv	sl, r0, r1
 80006ec:	f000 fc4a 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 80006f0:	e030      	b.n	8000754 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80006f2:	f000 fc2f 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 80006f6:	6863      	ldr	r3, [r4, #4]
 80006f8:	2519      	movs	r5, #25
 80006fa:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80006fe:	4368      	muls	r0, r5
 8000700:	fbb0 f8f8 	udiv	r8, r0, r8
 8000704:	f000 fc26 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 8000708:	6866      	ldr	r6, [r4, #4]
 800070a:	4368      	muls	r0, r5
 800070c:	0076      	lsls	r6, r6, #1
 800070e:	fbb0 f6f6 	udiv	r6, r0, r6
 8000712:	f000 fc1f 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 8000716:	6863      	ldr	r3, [r4, #4]
 8000718:	f04f 0964 	mov.w	r9, #100	; 0x64
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4368      	muls	r0, r5
 8000720:	fbb0 f0f3 	udiv	r0, r0, r3
 8000724:	fbb0 f0f9 	udiv	r0, r0, r9
 8000728:	fb09 6610 	mls	r6, r9, r0, r6
 800072c:	f000 fc12 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 8000730:	fbb8 f8f9 	udiv	r8, r8, r9
 8000734:	00f6      	lsls	r6, r6, #3
 8000736:	6861      	ldr	r1, [r4, #4]
 8000738:	3632      	adds	r6, #50	; 0x32
 800073a:	fbb6 f6f9 	udiv	r6, r6, r9
 800073e:	0076      	lsls	r6, r6, #1
 8000740:	4368      	muls	r0, r5
 8000742:	0049      	lsls	r1, r1, #1
 8000744:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000748:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 800074c:	fbb0 faf1 	udiv	sl, r0, r1
 8000750:	f000 fc00 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 8000754:	4345      	muls	r5, r0
 8000756:	6860      	ldr	r0, [r4, #4]
 8000758:	0040      	lsls	r0, r0, #1
 800075a:	fbb5 f0f0 	udiv	r0, r5, r0
 800075e:	fbb0 f0f9 	udiv	r0, r0, r9
 8000762:	fb09 a210 	mls	r2, r9, r0, sl
 8000766:	00d2      	lsls	r2, r2, #3
 8000768:	3232      	adds	r2, #50	; 0x32
 800076a:	fbb2 f3f9 	udiv	r3, r2, r9
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	4443      	add	r3, r8
 8000774:	441e      	add	r6, r3
 8000776:	60be      	str	r6, [r7, #8]
 8000778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800077c:	429f      	cmp	r7, r3
 800077e:	d002      	beq.n	8000786 <UART_SetConfig+0x14a>
 8000780:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <UART_SetConfig+0x238>)
 8000782:	429f      	cmp	r7, r3
 8000784:	d130      	bne.n	80007e8 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000786:	f000 fbfd 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 800078a:	6863      	ldr	r3, [r4, #4]
 800078c:	2519      	movs	r5, #25
 800078e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8000792:	4368      	muls	r0, r5
 8000794:	fbb0 f8f8 	udiv	r8, r0, r8
 8000798:	f000 fbf4 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 800079c:	6866      	ldr	r6, [r4, #4]
 800079e:	4368      	muls	r0, r5
 80007a0:	00b6      	lsls	r6, r6, #2
 80007a2:	fbb0 f6f6 	udiv	r6, r0, r6
 80007a6:	f000 fbed 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 80007aa:	6863      	ldr	r3, [r4, #4]
 80007ac:	f04f 0964 	mov.w	r9, #100	; 0x64
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4368      	muls	r0, r5
 80007b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80007b8:	fbb0 f0f9 	udiv	r0, r0, r9
 80007bc:	fb09 6610 	mls	r6, r9, r0, r6
 80007c0:	f000 fbe0 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 80007c4:	fbb8 f8f9 	udiv	r8, r8, r9
 80007c8:	6861      	ldr	r1, [r4, #4]
 80007ca:	0136      	lsls	r6, r6, #4
 80007cc:	4368      	muls	r0, r5
 80007ce:	0089      	lsls	r1, r1, #2
 80007d0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80007d4:	3632      	adds	r6, #50	; 0x32
 80007d6:	fbb0 faf1 	udiv	sl, r0, r1
 80007da:	fbb6 f6f9 	udiv	r6, r6, r9
 80007de:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 80007e2:	f000 fbcf 	bl	8000f84 <HAL_RCC_GetPCLK2Freq>
 80007e6:	e02f      	b.n	8000848 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80007e8:	f000 fbb4 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 80007ec:	6863      	ldr	r3, [r4, #4]
 80007ee:	2519      	movs	r5, #25
 80007f0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80007f4:	4368      	muls	r0, r5
 80007f6:	fbb0 f8f8 	udiv	r8, r0, r8
 80007fa:	f000 fbab 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 80007fe:	6866      	ldr	r6, [r4, #4]
 8000800:	4368      	muls	r0, r5
 8000802:	00b6      	lsls	r6, r6, #2
 8000804:	fbb0 f6f6 	udiv	r6, r0, r6
 8000808:	f000 fba4 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 800080c:	6863      	ldr	r3, [r4, #4]
 800080e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4368      	muls	r0, r5
 8000816:	fbb0 f0f3 	udiv	r0, r0, r3
 800081a:	fbb0 f0f9 	udiv	r0, r0, r9
 800081e:	fb09 6610 	mls	r6, r9, r0, r6
 8000822:	f000 fb97 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 8000826:	fbb8 f8f9 	udiv	r8, r8, r9
 800082a:	6861      	ldr	r1, [r4, #4]
 800082c:	0136      	lsls	r6, r6, #4
 800082e:	3632      	adds	r6, #50	; 0x32
 8000830:	4368      	muls	r0, r5
 8000832:	fbb6 f6f9 	udiv	r6, r6, r9
 8000836:	0089      	lsls	r1, r1, #2
 8000838:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800083c:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8000840:	fbb0 faf1 	udiv	sl, r0, r1
 8000844:	f000 fb86 	bl	8000f54 <HAL_RCC_GetPCLK1Freq>
 8000848:	4345      	muls	r5, r0
 800084a:	6860      	ldr	r0, [r4, #4]
 800084c:	0080      	lsls	r0, r0, #2
 800084e:	fbb5 f0f0 	udiv	r0, r5, r0
 8000852:	fbb0 f0f9 	udiv	r0, r0, r9
 8000856:	fb09 a210 	mls	r2, r9, r0, sl
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	3232      	adds	r2, #50	; 0x32
 800085e:	fbb2 f3f9 	udiv	r3, r2, r9
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	4433      	add	r3, r6
 8000868:	4443      	add	r3, r8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000870:	40011000 	.word	0x40011000
 8000874:	40011400 	.word	0x40011400

08000878 <UART_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087a:	4604      	mov	r4, r0
 800087c:	460e      	mov	r6, r1
 800087e:	4617      	mov	r7, r2
 8000880:	461d      	mov	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000882:	6821      	ldr	r1, [r4, #0]
 8000884:	680b      	ldr	r3, [r1, #0]
 8000886:	ea36 0303 	bics.w	r3, r6, r3
 800088a:	d01b      	beq.n	80008c4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800088c:	1c6b      	adds	r3, r5, #1
 800088e:	d0f9      	beq.n	8000884 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000890:	b995      	cbnz	r5, 80008b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x40>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000892:	6823      	ldr	r3, [r4, #0]
 8000894:	68da      	ldr	r2, [r3, #12]
 8000896:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800089a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	f022 0201 	bic.w	r2, r2, #1
 80008a2:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80008a4:	2320      	movs	r3, #32
 80008a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80008aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80008ae:	2300      	movs	r3, #0
 80008b0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80008b4:	2003      	movs	r0, #3
 80008b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80008b8:	f000 fd0a 	bl	80012d0 <HAL_GetTick>
 80008bc:	1bc0      	subs	r0, r0, r7
 80008be:	4285      	cmp	r5, r0
 80008c0:	d2df      	bcs.n	8000882 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80008c2:	e7e6      	b.n	8000892 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 80008c4:	2000      	movs	r0, #0
}
 80008c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008c8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80008c8:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80008ca:	4604      	mov	r4, r0
 80008cc:	b340      	cbz	r0, 8000920 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80008ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80008d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008d6:	b91b      	cbnz	r3, 80008e0 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80008d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80008dc:	f7ff fc90 	bl	8000200 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80008e0:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80008e2:	2324      	movs	r3, #36	; 0x24
 80008e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80008e8:	68d3      	ldr	r3, [r2, #12]
 80008ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008ee:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80008f0:	4620      	mov	r0, r4
 80008f2:	f7ff fea3 	bl	800063c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	691a      	ldr	r2, [r3, #16]
 80008fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80008fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000900:	695a      	ldr	r2, [r3, #20]
 8000902:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000906:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800090e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000910:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8000912:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000914:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000916:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800091a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 800091e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8000920:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8000922:	bd10      	pop	{r4, pc}

08000924 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000928:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800092a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800092e:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000930:	4604      	mov	r4, r0
 8000932:	460d      	mov	r5, r1
 8000934:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8000936:	d14d      	bne.n	80009d4 <HAL_UART_Transmit+0xb0>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8000938:	2900      	cmp	r1, #0
 800093a:	d048      	beq.n	80009ce <HAL_UART_Transmit+0xaa>
 800093c:	2a00      	cmp	r2, #0
 800093e:	d046      	beq.n	80009ce <HAL_UART_Transmit+0xaa>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8000940:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000944:	2b01      	cmp	r3, #1
 8000946:	d045      	beq.n	80009d4 <HAL_UART_Transmit+0xb0>
 8000948:	2301      	movs	r3, #1
 800094a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800094e:	2300      	movs	r3, #0
 8000950:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000952:	2321      	movs	r3, #33	; 0x21
 8000954:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000958:	f000 fcba 	bl	80012d0 <HAL_GetTick>

    huart->TxXferSize = Size;
 800095c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000960:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8000962:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000966:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000968:	b313      	cbz	r3, 80009b0 <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 800096a:	3b01      	subs	r3, #1
 800096c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800096e:	68a3      	ldr	r3, [r4, #8]
 8000970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000974:	4632      	mov	r2, r6
 8000976:	463b      	mov	r3, r7
 8000978:	f04f 0180 	mov.w	r1, #128	; 0x80
 800097c:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800097e:	d10e      	bne.n	800099e <HAL_UART_Transmit+0x7a>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000980:	f7ff ff7a 	bl	8000878 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000984:	b110      	cbz	r0, 800098c <HAL_UART_Transmit+0x68>
        { 
          return HAL_TIMEOUT;
 8000986:	2003      	movs	r0, #3
 8000988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 800098c:	882b      	ldrh	r3, [r5, #0]
 800098e:	6822      	ldr	r2, [r4, #0]
 8000990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000994:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000996:	6923      	ldr	r3, [r4, #16]
 8000998:	b943      	cbnz	r3, 80009ac <HAL_UART_Transmit+0x88>
        {
          pData +=2U;
 800099a:	3502      	adds	r5, #2
 800099c:	e7e3      	b.n	8000966 <HAL_UART_Transmit+0x42>
          pData +=1U;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800099e:	f7ff ff6b 	bl	8000878 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d1ef      	bne.n	8000986 <HAL_UART_Transmit+0x62>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	782a      	ldrb	r2, [r5, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	3501      	adds	r5, #1
 80009ae:	e7da      	b.n	8000966 <HAL_UART_Transmit+0x42>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4632      	mov	r2, r6
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4620      	mov	r0, r4
 80009b8:	f7ff ff5e 	bl	8000878 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80009bc:	2800      	cmp	r0, #0
 80009be:	d1e2      	bne.n	8000986 <HAL_UART_Transmit+0x62>
    { 
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80009c0:	2320      	movs	r3, #32
 80009c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80009c6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 80009ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 80009ce:	2001      	movs	r0, #1
 80009d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80009d4:	2002      	movs	r0, #2
  }
}
 80009d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080009da <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 80009da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009de:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 80009e0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80009e4:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{ 
 80009e6:	4604      	mov	r4, r0
 80009e8:	460d      	mov	r5, r1
 80009ea:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 80009ec:	d14e      	bne.n	8000a8c <HAL_UART_Receive+0xb2>
  { 
    if((pData == NULL ) || (Size == 0U)) 
 80009ee:	2900      	cmp	r1, #0
 80009f0:	d049      	beq.n	8000a86 <HAL_UART_Receive+0xac>
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	d047      	beq.n	8000a86 <HAL_UART_Receive+0xac>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80009f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d046      	beq.n	8000a8c <HAL_UART_Receive+0xb2>
 80009fe:	2301      	movs	r3, #1
 8000a00:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000a08:	2322      	movs	r3, #34	; 0x22
 8000a0a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000a0e:	f000 fc5f 	bl	80012d0 <HAL_GetTick>
        
    huart->RxXferSize = Size; 
 8000a12:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000a16:	4606      	mov	r6, r0
        
    huart->RxXferSize = Size; 
    huart->RxXferCount = Size;
 8000a18:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8000a1c:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8000a1e:	b358      	cbz	r0, 8000a78 <HAL_UART_Receive+0x9e>
    {
      huart->RxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000a20:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferCount = Size;
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
    {
      huart->RxXferCount--;
 8000a22:	3801      	subs	r0, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
    {
      huart->RxXferCount--;
 8000a28:	85e0      	strh	r0, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4632      	mov	r2, r6
 8000a2e:	f04f 0120 	mov.w	r1, #32
 8000a32:	4620      	mov	r0, r4
    
    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
    {
      huart->RxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000a34:	d112      	bne.n	8000a5c <HAL_UART_Receive+0x82>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000a36:	f7ff ff1f 	bl	8000878 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000a3a:	b110      	cbz	r0, 8000a42 <HAL_UART_Receive+0x68>
        { 
          return HAL_TIMEOUT;
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a42:	6823      	ldr	r3, [r4, #0]
        }
        tmp = (uint16_t*) pData;
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000a44:	6922      	ldr	r2, [r4, #16]
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8000a46:	685b      	ldr	r3, [r3, #4]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
        { 
          return HAL_TIMEOUT;
        }
        tmp = (uint16_t*) pData;
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000a48:	b922      	cbnz	r2, 8000a54 <HAL_UART_Receive+0x7a>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8000a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a4e:	f825 3b02 	strh.w	r3, [r5], #2
 8000a52:	e7e3      	b.n	8000a1c <HAL_UART_Receive+0x42>
          pData +=2U;
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f825 3b01 	strh.w	r3, [r5], #1
 8000a5a:	e7df      	b.n	8000a1c <HAL_UART_Receive+0x42>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8000a5c:	f7ff ff0c 	bl	8000878 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d1eb      	bne.n	8000a3c <HAL_UART_Receive+0x62>
 8000a64:	6823      	ldr	r3, [r4, #0]
        { 
          return HAL_TIMEOUT;
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000a66:	6921      	ldr	r1, [r4, #16]
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	1c6a      	adds	r2, r5, #1
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
        { 
          return HAL_TIMEOUT;
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000a6c:	b109      	cbz	r1, 8000a72 <HAL_UART_Receive+0x98>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8000a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a72:	702b      	strb	r3, [r5, #0]
 8000a74:	4615      	mov	r5, r2
 8000a76:	e7d1      	b.n	8000a1c <HAL_UART_Receive+0x42>
        
      }
    }
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000a7e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 8000a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
  { 
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 8000a86:	2001      	movs	r0, #1
 8000a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;   
 8000a8c:	2002      	movs	r0, #2
  }
}
 8000a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000a94 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a94:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000a9a:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a9c:	07d8      	lsls	r0, r3, #31
 8000a9e:	d403      	bmi.n	8000aa8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aa0:	6823      	ldr	r3, [r4, #0]
 8000aa2:	0799      	lsls	r1, r3, #30
 8000aa4:	d437      	bmi.n	8000b16 <HAL_RCC_OscConfig+0x82>
 8000aa6:	e087      	b.n	8000bb8 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000aa8:	4ba7      	ldr	r3, [pc, #668]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	f002 020c 	and.w	r2, r2, #12
 8000ab0:	2a04      	cmp	r2, #4
 8000ab2:	d007      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ab4:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ab6:	f002 020c 	and.w	r2, r2, #12
 8000aba:	2a08      	cmp	r2, #8
 8000abc:	d10b      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	025a      	lsls	r2, r3, #9
 8000ac2:	d508      	bpl.n	8000ad6 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac4:	4ba0      	ldr	r3, [pc, #640]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	039b      	lsls	r3, r3, #14
 8000aca:	d5e9      	bpl.n	8000aa0 <HAL_RCC_OscConfig+0xc>
 8000acc:	6863      	ldr	r3, [r4, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d1e6      	bne.n	8000aa0 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	e134      	b.n	8000d40 <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad6:	4b9d      	ldr	r3, [pc, #628]	; (8000d4c <HAL_RCC_OscConfig+0x2b8>)
 8000ad8:	7922      	ldrb	r2, [r4, #4]
 8000ada:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000adc:	6863      	ldr	r3, [r4, #4]
 8000ade:	b16b      	cbz	r3, 8000afc <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ae0:	f000 fbf6 	bl	80012d0 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae4:	4d98      	ldr	r5, [pc, #608]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ae6:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae8:	682b      	ldr	r3, [r5, #0]
 8000aea:	039f      	lsls	r7, r3, #14
 8000aec:	d4d8      	bmi.n	8000aa0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aee:	f000 fbef 	bl	80012d0 <HAL_GetTick>
 8000af2:	1b80      	subs	r0, r0, r6
 8000af4:	2864      	cmp	r0, #100	; 0x64
 8000af6:	d9f7      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 8000af8:	2003      	movs	r0, #3
 8000afa:	e121      	b.n	8000d40 <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000afc:	f000 fbe8 	bl	80012d0 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b00:	4d91      	ldr	r5, [pc, #580]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b02:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b04:	682b      	ldr	r3, [r5, #0]
 8000b06:	0398      	lsls	r0, r3, #14
 8000b08:	d5ca      	bpl.n	8000aa0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0a:	f000 fbe1 	bl	80012d0 <HAL_GetTick>
 8000b0e:	1b80      	subs	r0, r0, r6
 8000b10:	2864      	cmp	r0, #100	; 0x64
 8000b12:	d9f7      	bls.n	8000b04 <HAL_RCC_OscConfig+0x70>
 8000b14:	e7f0      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b16:	4b8c      	ldr	r3, [pc, #560]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	f012 0f0c 	tst.w	r2, #12
 8000b1e:	d007      	beq.n	8000b30 <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b20:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b22:	f002 020c 	and.w	r2, r2, #12
 8000b26:	2a08      	cmp	r2, #8
 8000b28:	d117      	bne.n	8000b5a <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	0259      	lsls	r1, r3, #9
 8000b2e:	d414      	bmi.n	8000b5a <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b30:	4b85      	ldr	r3, [pc, #532]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	0792      	lsls	r2, r2, #30
 8000b36:	d502      	bpl.n	8000b3e <HAL_RCC_OscConfig+0xaa>
 8000b38:	68e2      	ldr	r2, [r4, #12]
 8000b3a:	2a01      	cmp	r2, #1
 8000b3c:	d1c9      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3e:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b40:	21f8      	movs	r1, #248	; 0xf8
 8000b42:	fa91 f1a1 	rbit	r1, r1
 8000b46:	6920      	ldr	r0, [r4, #16]
 8000b48:	fab1 f181 	clz	r1, r1
 8000b4c:	fa00 f101 	lsl.w	r1, r0, r1
 8000b50:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b54:	430a      	orrs	r2, r1
 8000b56:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b58:	e02e      	b.n	8000bb8 <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b5a:	68e2      	ldr	r2, [r4, #12]
 8000b5c:	4b7c      	ldr	r3, [pc, #496]	; (8000d50 <HAL_RCC_OscConfig+0x2bc>)
 8000b5e:	b1ea      	cbz	r2, 8000b9c <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b60:	2201      	movs	r2, #1
 8000b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b64:	f000 fbb4 	bl	80012d0 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b68:	4d77      	ldr	r5, [pc, #476]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b6a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b6c:	682b      	ldr	r3, [r5, #0]
 8000b6e:	4876      	ldr	r0, [pc, #472]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
 8000b70:	079b      	lsls	r3, r3, #30
 8000b72:	d405      	bmi.n	8000b80 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b74:	f000 fbac 	bl	80012d0 <HAL_GetTick>
 8000b78:	1b80      	subs	r0, r0, r6
 8000b7a:	2802      	cmp	r0, #2
 8000b7c:	d9f6      	bls.n	8000b6c <HAL_RCC_OscConfig+0xd8>
 8000b7e:	e7bb      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b80:	6803      	ldr	r3, [r0, #0]
 8000b82:	22f8      	movs	r2, #248	; 0xf8
 8000b84:	fa92 f2a2 	rbit	r2, r2
 8000b88:	6921      	ldr	r1, [r4, #16]
 8000b8a:	fab2 f282 	clz	r2, r2
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b96:	4313      	orrs	r3, r2
 8000b98:	6003      	str	r3, [r0, #0]
 8000b9a:	e00d      	b.n	8000bb8 <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b9e:	f000 fb97 	bl	80012d0 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba2:	4d69      	ldr	r5, [pc, #420]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ba4:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba6:	682b      	ldr	r3, [r5, #0]
 8000ba8:	079f      	lsls	r7, r3, #30
 8000baa:	d505      	bpl.n	8000bb8 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bac:	f000 fb90 	bl	80012d0 <HAL_GetTick>
 8000bb0:	1b80      	subs	r0, r0, r6
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9f7      	bls.n	8000ba6 <HAL_RCC_OscConfig+0x112>
 8000bb6:	e79f      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bb8:	6823      	ldr	r3, [r4, #0]
 8000bba:	071e      	lsls	r6, r3, #28
 8000bbc:	d403      	bmi.n	8000bc6 <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	075d      	lsls	r5, r3, #29
 8000bc2:	d545      	bpl.n	8000c50 <HAL_RCC_OscConfig+0x1bc>
 8000bc4:	e01f      	b.n	8000c06 <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000bc6:	6962      	ldr	r2, [r4, #20]
 8000bc8:	4b62      	ldr	r3, [pc, #392]	; (8000d54 <HAL_RCC_OscConfig+0x2c0>)
 8000bca:	b172      	cbz	r2, 8000bea <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bd0:	f000 fb7e 	bl	80012d0 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bd4:	4d5c      	ldr	r5, [pc, #368]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bd6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bd8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bda:	0798      	lsls	r0, r3, #30
 8000bdc:	d4ef      	bmi.n	8000bbe <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bde:	f000 fb77 	bl	80012d0 <HAL_GetTick>
 8000be2:	1b80      	subs	r0, r0, r6
 8000be4:	2802      	cmp	r0, #2
 8000be6:	d9f7      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x144>
 8000be8:	e786      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bea:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bec:	f000 fb70 	bl	80012d0 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bf0:	4d55      	ldr	r5, [pc, #340]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bf2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bf4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000bf6:	0799      	lsls	r1, r3, #30
 8000bf8:	d5e1      	bpl.n	8000bbe <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bfa:	f000 fb69 	bl	80012d0 <HAL_GetTick>
 8000bfe:	1b80      	subs	r0, r0, r6
 8000c00:	2802      	cmp	r0, #2
 8000c02:	d9f7      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x160>
 8000c04:	e778      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	4b4f      	ldr	r3, [pc, #316]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000c0c:	4d52      	ldr	r5, [pc, #328]	; (8000d58 <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000c20:	682b      	ldr	r3, [r5, #0]
 8000c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c26:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000c28:	f000 fb52 	bl	80012d0 <HAL_GetTick>
 8000c2c:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000c2e:	682b      	ldr	r3, [r5, #0]
 8000c30:	05da      	lsls	r2, r3, #23
 8000c32:	d510      	bpl.n	8000c56 <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c34:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <HAL_RCC_OscConfig+0x2c8>)
 8000c36:	7a22      	ldrb	r2, [r4, #8]
 8000c38:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c3a:	68a3      	ldr	r3, [r4, #8]
 8000c3c:	b1bb      	cbz	r3, 8000c6e <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c3e:	f000 fb47 	bl	80012d0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c42:	4d41      	ldr	r5, [pc, #260]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c44:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c46:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c4c:	079b      	lsls	r3, r3, #30
 8000c4e:	d508      	bpl.n	8000c62 <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c50:	69a2      	ldr	r2, [r4, #24]
 8000c52:	b9da      	cbnz	r2, 8000c8c <HAL_RCC_OscConfig+0x1f8>
 8000c54:	e059      	b.n	8000d0a <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000c56:	f000 fb3b 	bl	80012d0 <HAL_GetTick>
 8000c5a:	1b80      	subs	r0, r0, r6
 8000c5c:	2802      	cmp	r0, #2
 8000c5e:	d9e6      	bls.n	8000c2e <HAL_RCC_OscConfig+0x19a>
 8000c60:	e74a      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c62:	f000 fb35 	bl	80012d0 <HAL_GetTick>
 8000c66:	1b80      	subs	r0, r0, r6
 8000c68:	42b8      	cmp	r0, r7
 8000c6a:	d9ee      	bls.n	8000c4a <HAL_RCC_OscConfig+0x1b6>
 8000c6c:	e744      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c6e:	f000 fb2f 	bl	80012d0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c72:	4d35      	ldr	r5, [pc, #212]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c74:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c76:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c7c:	0798      	lsls	r0, r3, #30
 8000c7e:	d5e7      	bpl.n	8000c50 <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c80:	f000 fb26 	bl	80012d0 <HAL_GetTick>
 8000c84:	1b80      	subs	r0, r0, r6
 8000c86:	42b8      	cmp	r0, r7
 8000c88:	d9f7      	bls.n	8000c7a <HAL_RCC_OscConfig+0x1e6>
 8000c8a:	e735      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c8c:	4d2e      	ldr	r5, [pc, #184]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
 8000c8e:	68ab      	ldr	r3, [r5, #8]
 8000c90:	f003 030c 	and.w	r3, r3, #12
 8000c94:	2b08      	cmp	r3, #8
 8000c96:	f43f af1c 	beq.w	8000ad2 <HAL_RCC_OscConfig+0x3e>
 8000c9a:	4e31      	ldr	r6, [pc, #196]	; (8000d60 <HAL_RCC_OscConfig+0x2cc>)
 8000c9c:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c9e:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ca0:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ca2:	d141      	bne.n	8000d28 <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca4:	f000 fb14 	bl	80012d0 <HAL_GetTick>
 8000ca8:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000caa:	682b      	ldr	r3, [r5, #0]
 8000cac:	4f26      	ldr	r7, [pc, #152]	; (8000d48 <HAL_RCC_OscConfig+0x2b4>)
 8000cae:	0199      	lsls	r1, r3, #6
 8000cb0:	d42d      	bmi.n	8000d0e <HAL_RCC_OscConfig+0x27a>
 8000cb2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000cb6:	fa92 f2a2 	rbit	r2, r2
 8000cba:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000cbe:	fab2 fe82 	clz	lr, r2
 8000cc2:	fa93 f3a3 	rbit	r3, r3
 8000cc6:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000cca:	fab3 f583 	clz	r5, r3
 8000cce:	fa92 f2a2 	rbit	r2, r2
 8000cd2:	69e0      	ldr	r0, [r4, #28]
 8000cd4:	6a23      	ldr	r3, [r4, #32]
 8000cd6:	fab2 f182 	clz	r1, r2
 8000cda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cdc:	4303      	orrs	r3, r0
 8000cde:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ce2:	ea43 0002 	orr.w	r0, r3, r2
 8000ce6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ce8:	085a      	lsrs	r2, r3, #1
 8000cea:	3a01      	subs	r2, #1
 8000cec:	fa02 f305 	lsl.w	r3, r2, r5
 8000cf0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	408a      	lsls	r2, r1
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cfe:	f000 fae7 	bl	80012d0 <HAL_GetTick>
 8000d02:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	019a      	lsls	r2, r3, #6
 8000d08:	d508      	bpl.n	8000d1c <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	e018      	b.n	8000d40 <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d0e:	f000 fadf 	bl	80012d0 <HAL_GetTick>
 8000d12:	ebc8 0000 	rsb	r0, r8, r0
 8000d16:	2802      	cmp	r0, #2
 8000d18:	d9c7      	bls.n	8000caa <HAL_RCC_OscConfig+0x216>
 8000d1a:	e6ed      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d1c:	f000 fad8 	bl	80012d0 <HAL_GetTick>
 8000d20:	1b00      	subs	r0, r0, r4
 8000d22:	2802      	cmp	r0, #2
 8000d24:	d9ee      	bls.n	8000d04 <HAL_RCC_OscConfig+0x270>
 8000d26:	e6e7      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d28:	f000 fad2 	bl	80012d0 <HAL_GetTick>
 8000d2c:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d2e:	682b      	ldr	r3, [r5, #0]
 8000d30:	019b      	lsls	r3, r3, #6
 8000d32:	d5ea      	bpl.n	8000d0a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d34:	f000 facc 	bl	80012d0 <HAL_GetTick>
 8000d38:	1b00      	subs	r0, r0, r4
 8000d3a:	2802      	cmp	r0, #2
 8000d3c:	d9f7      	bls.n	8000d2e <HAL_RCC_OscConfig+0x29a>
 8000d3e:	e6db      	b.n	8000af8 <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000d40:	b002      	add	sp, #8
 8000d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40023802 	.word	0x40023802
 8000d50:	42470000 	.word	0x42470000
 8000d54:	42470e80 	.word	0x42470e80
 8000d58:	40007000 	.word	0x40007000
 8000d5c:	40023870 	.word	0x40023870
 8000d60:	42470060 	.word	0x42470060

08000d64 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d64:	491b      	ldr	r1, [pc, #108]	; (8000dd4 <HAL_RCC_GetSysClockFreq+0x70>)
 8000d66:	688b      	ldr	r3, [r1, #8]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d02c      	beq.n	8000dca <HAL_RCC_GetSysClockFreq+0x66>
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d12c      	bne.n	8000dce <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d74:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d76:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d7c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000d80:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000d84:	684b      	ldr	r3, [r1, #4]
 8000d86:	fa92 f2a2 	rbit	r2, r2
 8000d8a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000d8e:	fab2 f282 	clz	r2, r2
 8000d92:	ea01 0103 	and.w	r1, r1, r3
 8000d96:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9a:	bf14      	ite	ne
 8000d9c:	4a0e      	ldrne	r2, [pc, #56]	; (8000dd8 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000d9e:	4a0f      	ldreq	r2, [pc, #60]	; (8000ddc <HAL_RCC_GetSysClockFreq+0x78>)
 8000da0:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000da6:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000daa:	6852      	ldr	r2, [r2, #4]
 8000dac:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000db0:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000db4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000db8:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000dbc:	fa22 f000 	lsr.w	r0, r2, r0
 8000dc0:	3001      	adds	r0, #1
 8000dc2:	0040      	lsls	r0, r0, #1
 8000dc4:	fbb3 f0f0 	udiv	r0, r3, r0
 8000dc8:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000dcc:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	007a1200 	.word	0x007a1200
 8000ddc:	00f42400 	.word	0x00f42400

08000de0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000de0:	4b55      	ldr	r3, [pc, #340]	; (8000f38 <HAL_RCC_ClockConfig+0x158>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f002 020f 	and.w	r2, r2, #15
 8000de8:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dee:	4605      	mov	r5, r0
 8000df0:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000df2:	d30a      	bcc.n	8000e0a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000df4:	6829      	ldr	r1, [r5, #0]
 8000df6:	0788      	lsls	r0, r1, #30
 8000df8:	d511      	bpl.n	8000e1e <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dfa:	4850      	ldr	r0, [pc, #320]	; (8000f3c <HAL_RCC_ClockConfig+0x15c>)
 8000dfc:	6883      	ldr	r3, [r0, #8]
 8000dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e02:	68ab      	ldr	r3, [r5, #8]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	6083      	str	r3, [r0, #8]
 8000e08:	e009      	b.n	8000e1e <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e0a:	b2ca      	uxtb	r2, r1
 8000e0c:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d0ed      	beq.n	8000df4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000e18:	2001      	movs	r0, #1
 8000e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e1e:	07c9      	lsls	r1, r1, #31
 8000e20:	d406      	bmi.n	8000e30 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e22:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <HAL_RCC_ClockConfig+0x158>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	f002 020f 	and.w	r2, r2, #15
 8000e2a:	4296      	cmp	r6, r2
 8000e2c:	d351      	bcc.n	8000ed2 <HAL_RCC_ClockConfig+0xf2>
 8000e2e:	e057      	b.n	8000ee0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e30:	686b      	ldr	r3, [r5, #4]
 8000e32:	4a42      	ldr	r2, [pc, #264]	; (8000f3c <HAL_RCC_ClockConfig+0x15c>)
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d103      	bne.n	8000e40 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000e40:	1e99      	subs	r1, r3, #2
 8000e42:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e44:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000e46:	d802      	bhi.n	8000e4e <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e48:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000e4c:	e001      	b.n	8000e52 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4e:	f012 0f02 	tst.w	r2, #2
 8000e52:	d0e1      	beq.n	8000e18 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e54:	4c39      	ldr	r4, [pc, #228]	; (8000f3c <HAL_RCC_ClockConfig+0x15c>)
 8000e56:	68a2      	ldr	r2, [r4, #8]
 8000e58:	f022 0203 	bic.w	r2, r2, #3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000e60:	f000 fa36 	bl	80012d0 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e64:	686b      	ldr	r3, [r5, #4]
 8000e66:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000e68:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e6a:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e6e:	d10c      	bne.n	8000e8a <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e70:	68a3      	ldr	r3, [r4, #8]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d0d3      	beq.n	8000e22 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7a:	f000 fa29 	bl	80012d0 <HAL_GetTick>
 8000e7e:	1bc0      	subs	r0, r0, r7
 8000e80:	4540      	cmp	r0, r8
 8000e82:	d9f5      	bls.n	8000e70 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000e84:	2003      	movs	r0, #3
 8000e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d10a      	bne.n	8000ea4 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e8e:	68a3      	ldr	r3, [r4, #8]
 8000e90:	f003 030c 	and.w	r3, r3, #12
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d0c4      	beq.n	8000e22 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e98:	f000 fa1a 	bl	80012d0 <HAL_GetTick>
 8000e9c:	1bc0      	subs	r0, r0, r7
 8000e9e:	4540      	cmp	r0, r8
 8000ea0:	d9f5      	bls.n	8000e8e <HAL_RCC_ClockConfig+0xae>
 8000ea2:	e7ef      	b.n	8000e84 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d10f      	bne.n	8000ec8 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000ea8:	68a3      	ldr	r3, [r4, #8]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b0c      	cmp	r3, #12
 8000eb0:	d0b7      	beq.n	8000e22 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eb2:	f000 fa0d 	bl	80012d0 <HAL_GetTick>
 8000eb6:	1bc0      	subs	r0, r0, r7
 8000eb8:	4540      	cmp	r0, r8
 8000eba:	d9f5      	bls.n	8000ea8 <HAL_RCC_ClockConfig+0xc8>
 8000ebc:	e7e2      	b.n	8000e84 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ebe:	f000 fa07 	bl	80012d0 <HAL_GetTick>
 8000ec2:	1bc0      	subs	r0, r0, r7
 8000ec4:	4540      	cmp	r0, r8
 8000ec6:	d8dd      	bhi.n	8000e84 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ec8:	68a3      	ldr	r3, [r4, #8]
 8000eca:	f013 0f0c 	tst.w	r3, #12
 8000ece:	d1f6      	bne.n	8000ebe <HAL_RCC_ClockConfig+0xde>
 8000ed0:	e7a7      	b.n	8000e22 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ed2:	b2f2      	uxtb	r2, r6
 8000ed4:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 030f 	and.w	r3, r3, #15
 8000edc:	429e      	cmp	r6, r3
 8000ede:	d19b      	bne.n	8000e18 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee0:	6829      	ldr	r1, [r5, #0]
 8000ee2:	074a      	lsls	r2, r1, #29
 8000ee4:	d506      	bpl.n	8000ef4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ee6:	4815      	ldr	r0, [pc, #84]	; (8000f3c <HAL_RCC_ClockConfig+0x15c>)
 8000ee8:	6883      	ldr	r3, [r0, #8]
 8000eea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000eee:	68eb      	ldr	r3, [r5, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef4:	070b      	lsls	r3, r1, #28
 8000ef6:	d507      	bpl.n	8000f08 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ef8:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <HAL_RCC_ClockConfig+0x15c>)
 8000efa:	6929      	ldr	r1, [r5, #16]
 8000efc:	6893      	ldr	r3, [r2, #8]
 8000efe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f06:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000f08:	f7ff ff2c 	bl	8000d64 <HAL_RCC_GetSysClockFreq>
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_RCC_ClockConfig+0x15c>)
 8000f0e:	22f0      	movs	r2, #240	; 0xf0
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	fa92 f2a2 	rbit	r2, r2
 8000f16:	fab2 f282 	clz	r2, r2
 8000f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f1e:	40d3      	lsrs	r3, r2
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_RCC_ClockConfig+0x160>)
 8000f22:	5cd3      	ldrb	r3, [r2, r3]
 8000f24:	40d8      	lsrs	r0, r3
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <HAL_RCC_ClockConfig+0x164>)
 8000f28:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f99a 	bl	8001264 <HAL_InitTick>
  
  return HAL_OK;
 8000f30:	2000      	movs	r0, #0
}
 8000f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	080013fc 	.word	0x080013fc
 8000f44:	20000000 	.word	0x20000000

08000f48 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000f48:	4b01      	ldr	r3, [pc, #4]	; (8000f50 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000

08000f54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f56:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	fa92 f2a2 	rbit	r2, r2
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f68:	40d3      	lsrs	r3, r2
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000f70:	6810      	ldr	r0, [r2, #0]
}
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	080013fc 	.word	0x080013fc
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f86:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	fa92 f2a2 	rbit	r2, r2
 8000f90:	fab2 f282 	clz	r2, r2
 8000f94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000f98:	40d3      	lsrs	r3, r2
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8000f9c:	5cd3      	ldrb	r3, [r2, r3]
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000fa0:	6810      	ldr	r0, [r2, #0]
} 
 8000fa2:	40d8      	lsrs	r0, r3
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	080013fc 	.word	0x080013fc
 8000fb0:	20000000 	.word	0x20000000

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb8:	4f6d      	ldr	r7, [pc, #436]	; (8001170 <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fba:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbc:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8001178 <HAL_GPIO_Init+0x1c4>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800117c <HAL_GPIO_Init+0x1c8>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000fcc:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000fce:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000fd0:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000fd2:	ea34 0303 	bics.w	r3, r4, r3
 8000fd6:	f040 80c3 	bne.w	8001160 <HAL_GPIO_Init+0x1ac>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fda:	684d      	ldr	r5, [r1, #4]
 8000fdc:	f025 0a10 	bic.w	sl, r5, #16
 8000fe0:	f1ba 0f02 	cmp.w	sl, #2
 8000fe4:	d114      	bne.n	8001010 <HAL_GPIO_Init+0x5c>
 8000fe6:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8000fea:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000fee:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff2:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000ff6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	fa03 f30b 	lsl.w	r3, r3, fp
 8001000:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001004:	690b      	ldr	r3, [r1, #16]
 8001006:	fa03 f30b 	lsl.w	r3, r3, fp
 800100a:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 800100c:	f8c9 3020 	str.w	r3, [r9, #32]
 8001010:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001014:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101a:	fa09 f90b 	lsl.w	r9, r9, fp
 800101e:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001022:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001026:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102a:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800102e:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001032:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001034:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8001038:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103a:	d80f      	bhi.n	800105c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103c:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103e:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001040:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001044:	fa06 f60b 	lsl.w	r6, r6, fp
 8001048:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 800104a:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800104e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001052:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001056:	4096      	lsls	r6, r2
 8001058:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800105a:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800105c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105e:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001062:	688b      	ldr	r3, [r1, #8]
 8001064:	fa03 f30b 	lsl.w	r3, r3, fp
 8001068:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 800106c:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800106e:	00eb      	lsls	r3, r5, #3
 8001070:	d576      	bpl.n	8001160 <HAL_GPIO_Init+0x1ac>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	9303      	str	r3, [sp, #12]
 8001076:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107a:	4b3e      	ldr	r3, [pc, #248]	; (8001174 <HAL_GPIO_Init+0x1c0>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001080:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8001084:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8001088:	f022 0903 	bic.w	r9, r2, #3
 800108c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8001090:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001094:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8001098:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800109a:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a0:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80010a4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80010a8:	260f      	movs	r6, #15
 80010aa:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80010b0:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b4:	d020      	beq.n	80010f8 <HAL_GPIO_Init+0x144>
 80010b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010ba:	4298      	cmp	r0, r3
 80010bc:	d01e      	beq.n	80010fc <HAL_GPIO_Init+0x148>
 80010be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010c2:	4298      	cmp	r0, r3
 80010c4:	d01c      	beq.n	8001100 <HAL_GPIO_Init+0x14c>
 80010c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010ca:	4298      	cmp	r0, r3
 80010cc:	d01a      	beq.n	8001104 <HAL_GPIO_Init+0x150>
 80010ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010d2:	4298      	cmp	r0, r3
 80010d4:	d018      	beq.n	8001108 <HAL_GPIO_Init+0x154>
 80010d6:	4540      	cmp	r0, r8
 80010d8:	d018      	beq.n	800110c <HAL_GPIO_Init+0x158>
 80010da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010de:	4298      	cmp	r0, r3
 80010e0:	d016      	beq.n	8001110 <HAL_GPIO_Init+0x15c>
 80010e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010e6:	4298      	cmp	r0, r3
 80010e8:	d014      	beq.n	8001114 <HAL_GPIO_Init+0x160>
 80010ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010ee:	4298      	cmp	r0, r3
 80010f0:	bf14      	ite	ne
 80010f2:	2309      	movne	r3, #9
 80010f4:	2308      	moveq	r3, #8
 80010f6:	e00e      	b.n	8001116 <HAL_GPIO_Init+0x162>
 80010f8:	2300      	movs	r3, #0
 80010fa:	e00c      	b.n	8001116 <HAL_GPIO_Init+0x162>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e00a      	b.n	8001116 <HAL_GPIO_Init+0x162>
 8001100:	2302      	movs	r3, #2
 8001102:	e008      	b.n	8001116 <HAL_GPIO_Init+0x162>
 8001104:	2303      	movs	r3, #3
 8001106:	e006      	b.n	8001116 <HAL_GPIO_Init+0x162>
 8001108:	2304      	movs	r3, #4
 800110a:	e004      	b.n	8001116 <HAL_GPIO_Init+0x162>
 800110c:	2305      	movs	r3, #5
 800110e:	e002      	b.n	8001116 <HAL_GPIO_Init+0x162>
 8001110:	2306      	movs	r3, #6
 8001112:	e000      	b.n	8001116 <HAL_GPIO_Init+0x162>
 8001114:	2307      	movs	r3, #7
 8001116:	fa03 f30a 	lsl.w	r3, r3, sl
 800111a:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111c:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001120:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8001122:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001124:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001128:	bf0c      	ite	eq
 800112a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800112c:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 800112e:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001132:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001136:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800113a:	bf0c      	ite	eq
 800113c:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800113e:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8001140:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001142:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001144:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001148:	bf0c      	ite	eq
 800114a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800114c:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 800114e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001152:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001156:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001158:	bf54      	ite	pl
 800115a:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800115c:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 800115e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001160:	3201      	adds	r2, #1
 8001162:	2a10      	cmp	r2, #16
 8001164:	f47f af32 	bne.w	8000fcc <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001168:	b005      	add	sp, #20
 800116a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800116e:	bf00      	nop
 8001170:	40013c00 	.word	0x40013c00
 8001174:	40020000 	.word	0x40020000
 8001178:	40023800 	.word	0x40023800
 800117c:	40021400 	.word	0x40021400

08001180 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	b902      	cbnz	r2, 8001184 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001182:	0409      	lsls	r1, r1, #16
 8001184:	6181      	str	r1, [r0, #24]
 8001186:	4770      	bx	lr

08001188 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800118a:	68d3      	ldr	r3, [r2, #12]
 800118c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001190:	041b      	lsls	r3, r3, #16
 8001192:	0c1b      	lsrs	r3, r3, #16
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001198:	0200      	lsls	r0, r0, #8
 800119a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80011a2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80011a4:	60d3      	str	r3, [r2, #12]
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_NVIC_SetPriority+0x60>)
 80011ae:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b4:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	2c04      	cmp	r4, #4
 80011be:	bf28      	it	cs
 80011c0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	2d06      	cmp	r5, #6

  return (
 80011c4:	f04f 0501 	mov.w	r5, #1
 80011c8:	fa05 f404 	lsl.w	r4, r5, r4
 80011cc:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d0:	bf8c      	ite	hi
 80011d2:	3b03      	subhi	r3, #3
 80011d4:	2300      	movls	r3, #0

  return (
 80011d6:	400c      	ands	r4, r1
 80011d8:	409c      	lsls	r4, r3
 80011da:	fa05 f303 	lsl.w	r3, r5, r3
 80011de:	3b01      	subs	r3, #1
 80011e0:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80011e2:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80011e4:	ea42 0204 	orr.w	r2, r2, r4
 80011e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	bfaf      	iteee	ge
 80011ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	f000 000f 	andlt.w	r0, r0, #15
 80011f6:	4b06      	ldrlt	r3, [pc, #24]	; (8001210 <HAL_NVIC_SetPriority+0x64>)
 80011f8:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	bfa5      	ittet	ge
 80011fc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001200:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001208:	bd30      	pop	{r4, r5, pc}
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	e000ed14 	.word	0xe000ed14

08001214 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	3801      	subs	r0, #1
 8001216:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800121a:	d20a      	bcs.n	8001232 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001220:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	21f0      	movs	r1, #240	; 0xf0
 8001224:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001242:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001244:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001246:	bf0c      	ite	eq
 8001248:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800124c:	f022 0204 	bicne.w	r2, r2, #4
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	4770      	bx	lr
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001258:	4770      	bx	lr

0800125a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800125a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800125c:	f7ff fffc 	bl	8001258 <HAL_SYSTICK_Callback>
 8001260:	bd08      	pop	{r3, pc}
	...

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001270:	fbb0 f0f3 	udiv	r0, r0, r3
 8001274:	f7ff ffce 	bl	8001214 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001278:	2200      	movs	r2, #0
 800127a:	4621      	mov	r1, r4
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff94 	bl	80011ac <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001284:	2000      	movs	r0, #0
 8001286:	bd10      	pop	{r4, pc}
 8001288:	20000000 	.word	0x20000000

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x30>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001296:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800129e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f7ff ff6d 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ffd8 	bl	8001264 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7fe ffd3 	bl	800025e <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80012b8:	2000      	movs	r0, #0
 80012ba:	bd08      	pop	{r3, pc}
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80012c0:	4a02      	ldr	r2, [pc, #8]	; (80012cc <HAL_IncTick+0xc>)
 80012c2:	6813      	ldr	r3, [r2, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000060 	.word	0x20000060

080012d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012d0:	4b01      	ldr	r3, [pc, #4]	; (80012d8 <HAL_GetTick+0x8>)
 80012d2:	6818      	ldr	r0, [r3, #0]
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000060 	.word	0x20000060

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80012dc:	b513      	push	{r0, r1, r4, lr}
 80012de:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 80012e0:	f7ff fff6 	bl	80012d0 <HAL_GetTick>
 80012e4:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80012e6:	f7ff fff3 	bl	80012d0 <HAL_GetTick>
 80012ea:	9b01      	ldr	r3, [sp, #4]
 80012ec:	1b00      	subs	r0, r0, r4
 80012ee:	4298      	cmp	r0, r3
 80012f0:	d3f9      	bcc.n	80012e6 <HAL_Delay+0xa>
  {
  }
}
 80012f2:	b002      	add	sp, #8
 80012f4:	bd10      	pop	{r4, pc}
	...

080012f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	490f      	ldr	r1, [pc, #60]	; (8001338 <SystemInit+0x40>)
 80012fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80012fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <SystemInit+0x44>)
 8001308:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800130a:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800130c:	f042 0201 	orr.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001312:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800131a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800131e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <SystemInit+0x48>)
 8001322:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800132a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800132c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800132e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001332:	608b      	str	r3, [r1, #8]
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	40023800 	.word	0x40023800
 8001340:	24003010 	.word	0x24003010

08001344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800137c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001348:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800134a:	e003      	b.n	8001354 <LoopCopyDataInit>

0800134c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800134e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001350:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001352:	3104      	adds	r1, #4

08001354 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001358:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800135a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800135c:	d3f6      	bcc.n	800134c <CopyDataInit>
  ldr  r2, =_sbss
 800135e:	4a0b      	ldr	r2, [pc, #44]	; (800138c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001360:	e002      	b.n	8001368 <LoopFillZerobss>

08001362 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001362:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001364:	f842 3b04 	str.w	r3, [r2], #4

08001368 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800136a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800136c:	d3f9      	bcc.n	8001362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800136e:	f7ff ffc3 	bl	80012f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f000 f811 	bl	8001398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7fe fff9 	bl	800036c <main>
  bx  lr    
 800137a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800137c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001380:	08001414 	.word	0x08001414
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001388:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800138c:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001390:	20000064 	.word	0x20000064

08001394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC_IRQHandler>
	...

08001398 <__libc_init_array>:
 8001398:	b570      	push	{r4, r5, r6, lr}
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <__libc_init_array+0x3c>)
 800139c:	4c0e      	ldr	r4, [pc, #56]	; (80013d8 <__libc_init_array+0x40>)
 800139e:	1ae4      	subs	r4, r4, r3
 80013a0:	10a4      	asrs	r4, r4, #2
 80013a2:	2500      	movs	r5, #0
 80013a4:	461e      	mov	r6, r3
 80013a6:	42a5      	cmp	r5, r4
 80013a8:	d004      	beq.n	80013b4 <__libc_init_array+0x1c>
 80013aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013ae:	4798      	blx	r3
 80013b0:	3501      	adds	r5, #1
 80013b2:	e7f8      	b.n	80013a6 <__libc_init_array+0xe>
 80013b4:	f000 f816 	bl	80013e4 <_init>
 80013b8:	4c08      	ldr	r4, [pc, #32]	; (80013dc <__libc_init_array+0x44>)
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <__libc_init_array+0x48>)
 80013bc:	1ae4      	subs	r4, r4, r3
 80013be:	10a4      	asrs	r4, r4, #2
 80013c0:	2500      	movs	r5, #0
 80013c2:	461e      	mov	r6, r3
 80013c4:	42a5      	cmp	r5, r4
 80013c6:	d004      	beq.n	80013d2 <__libc_init_array+0x3a>
 80013c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013cc:	4798      	blx	r3
 80013ce:	3501      	adds	r5, #1
 80013d0:	e7f8      	b.n	80013c4 <__libc_init_array+0x2c>
 80013d2:	bd70      	pop	{r4, r5, r6, pc}
 80013d4:	0800140c 	.word	0x0800140c
 80013d8:	0800140c 	.word	0x0800140c
 80013dc:	08001410 	.word	0x08001410
 80013e0:	0800140c 	.word	0x0800140c

080013e4 <_init>:
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	bf00      	nop
 80013e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ea:	bc08      	pop	{r3}
 80013ec:	469e      	mov	lr, r3
 80013ee:	4770      	bx	lr

080013f0 <_fini>:
 80013f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f2:	bf00      	nop
 80013f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013f6:	bc08      	pop	{r3}
 80013f8:	469e      	mov	lr, r3
 80013fa:	4770      	bx	lr
