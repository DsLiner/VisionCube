
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800187c  0800187c  0001187c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080018a8  080018a8  000118a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080018ac  080018ac  000118ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080018b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000180  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000184  20000184  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007b60  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000019f3  00000000  00000000  00027b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002831  00000000  00000000  00029587  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000508  00000000  00000000  0002bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006e0  00000000  00000000  0002c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003af0  00000000  00000000  0002c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002087  00000000  00000000  00030490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00032517  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000b94  00000000  00000000  00032598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001864 	.word	0x08001864

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001864 	.word	0x08001864

080001c8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80001c8:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80001ca:	480b      	ldr	r0, [pc, #44]	; (80001f8 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <MX_USART2_UART_Init+0x34>)
 80001ce:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80001d2:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80001d6:	220c      	movs	r2, #12
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80001d8:	2300      	movs	r3, #0
 80001da:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80001dc:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80001de:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80001e0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80001e2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80001e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80001e6:	f000 fbf5 	bl	80009d4 <HAL_UART_Init>
 80001ea:	b118      	cbz	r0, 80001f4 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80001ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
 80001f0:	f000 b972 	b.w	80004d8 <Error_Handler>
 80001f4:	bd08      	pop	{r3, pc}
 80001f6:	bf00      	nop
 80001f8:	200000e0 	.word	0x200000e0
 80001fc:	40004400 	.word	0x40004400

08000200 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000200:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8000202:	6802      	ldr	r2, [r0, #0]
 8000204:	4b29      	ldr	r3, [pc, #164]	; (80002ac <HAL_UART_MspInit+0xac>)
 8000206:	429a      	cmp	r2, r3
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000208:	b086      	sub	sp, #24
 800020a:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 800020c:	d14c      	bne.n	80002a8 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800020e:	2500      	movs	r5, #0
 8000210:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000214:	9500      	str	r5, [sp, #0]
 8000216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000218:	4825      	ldr	r0, [pc, #148]	; (80002b0 <HAL_UART_MspInit+0xb0>)

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800021a:	4c26      	ldr	r4, [pc, #152]	; (80002b4 <HAL_UART_MspInit+0xb4>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800021c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000220:	641a      	str	r2, [r3, #64]	; 0x40
 8000222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800022c:	230c      	movs	r3, #12
 800022e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000230:	2302      	movs	r3, #2
 8000232:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000234:	2301      	movs	r3, #1
 8000236:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000238:	2303      	movs	r3, #3
 800023a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800023c:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800023e:	2307      	movs	r3, #7
 8000240:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000242:	f000 ff67 	bl	8001114 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000246:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <HAL_UART_MspInit+0xb8>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000248:	60a5      	str	r5, [r4, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800024a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 800024e:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000252:	4620      	mov	r0, r4
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000254:	f44f 6380 	mov.w	r3, #1024	; 0x400
    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000258:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800025a:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800025c:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800025e:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000260:	61e5      	str	r5, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000262:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000264:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000266:	f001 f84f 	bl	8001308 <HAL_DMA_Init>
 800026a:	b108      	cbz	r0, 8000270 <HAL_UART_MspInit+0x70>
    {
      Error_Handler();
 800026c:	f000 f934 	bl	80004d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000270:	6374      	str	r4, [r6, #52]	; 0x34

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000272:	4b12      	ldr	r3, [pc, #72]	; (80002bc <HAL_UART_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000274:	63a6      	str	r6, [r4, #56]	; 0x38

    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000276:	4c12      	ldr	r4, [pc, #72]	; (80002c0 <HAL_UART_MspInit+0xc0>)
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000278:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 800027c:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8000280:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000284:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000288:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800028a:	4620      	mov	r0, r4
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800028c:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800028e:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000290:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000292:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000294:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000296:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000298:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800029a:	f001 f835 	bl	8001308 <HAL_DMA_Init>
 800029e:	b108      	cbz	r0, 80002a4 <HAL_UART_MspInit+0xa4>
    {
      Error_Handler();
 80002a0:	f000 f91a 	bl	80004d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80002a4:	6334      	str	r4, [r6, #48]	; 0x30
 80002a6:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80002a8:	b006      	add	sp, #24
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
 80002ac:	40004400 	.word	0x40004400
 80002b0:	40020000 	.word	0x40020000
 80002b4:	20000020 	.word	0x20000020
 80002b8:	40026088 	.word	0x40026088
 80002bc:	400260a0 	.word	0x400260a0
 80002c0:	20000080 	.word	0x20000080

080002c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80002c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002c6:	f001 fa3b 	bl	8001740 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80002ce:	f001 ba04 	b.w	80016da <HAL_SYSTICK_IRQHandler>
	...

080002d4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80002d4:	4801      	ldr	r0, [pc, #4]	; (80002dc <DMA1_Stream5_IRQHandler+0x8>)
 80002d6:	f001 b8cd 	b.w	8001474 <HAL_DMA_IRQHandler>
 80002da:	bf00      	nop
 80002dc:	20000020 	.word	0x20000020

080002e0 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80002e0:	4801      	ldr	r0, [pc, #4]	; (80002e8 <DMA1_Stream6_IRQHandler+0x8>)
 80002e2:	f001 b8c7 	b.w	8001474 <HAL_DMA_IRQHandler>
 80002e6:	bf00      	nop
 80002e8:	20000080 	.word	0x20000080

080002ec <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80002ee:	2007      	movs	r0, #7
 80002f0:	f001 f97e 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	4611      	mov	r1, r2
 80002f8:	f06f 000b 	mvn.w	r0, #11
 80002fc:	f001 f98a 	bl	8001614 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	4611      	mov	r1, r2
 8000304:	f06f 000a 	mvn.w	r0, #10
 8000308:	f001 f984 	bl	8001614 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	4611      	mov	r1, r2
 8000310:	f06f 0009 	mvn.w	r0, #9
 8000314:	f001 f97e 	bl	8001614 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	4611      	mov	r1, r2
 800031c:	f06f 0004 	mvn.w	r0, #4
 8000320:	f001 f978 	bl	8001614 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000324:	2200      	movs	r2, #0
 8000326:	4611      	mov	r1, r2
 8000328:	f06f 0003 	mvn.w	r0, #3
 800032c:	f001 f972 	bl	8001614 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	4611      	mov	r1, r2
 8000334:	f06f 0001 	mvn.w	r0, #1
 8000338:	f001 f96c 	bl	8001614 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	4611      	mov	r1, r2
 8000340:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000348:	f001 b964 	b.w	8001614 <HAL_NVIC_SetPriority>

0800034c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800034c:	b510      	push	{r4, lr}
 800034e:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000350:	2300      	movs	r3, #0
 8000352:	4a27      	ldr	r2, [pc, #156]	; (80003f0 <SystemClock_Config+0xa4>)
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000358:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800035c:	6411      	str	r1, [r2, #64]	; 0x40
 800035e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000360:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000364:	9201      	str	r2, [sp, #4]
 8000366:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000368:	4a22      	ldr	r2, [pc, #136]	; (80003f4 <SystemClock_Config+0xa8>)
 800036a:	9302      	str	r3, [sp, #8]
 800036c:	6811      	ldr	r1, [r2, #0]
 800036e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000372:	6011      	str	r1, [r2, #0]
 8000374:	6812      	ldr	r2, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000376:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000378:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800037c:	2308      	movs	r3, #8
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800037e:	9202      	str	r2, [sp, #8]
 8000380:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000382:	9310      	str	r3, [sp, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000386:	23a8      	movs	r3, #168	; 0xa8

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000388:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 800038c:	9311      	str	r3, [sp, #68]	; 0x44

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800038e:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000390:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	a808      	add	r0, sp, #32

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000394:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000396:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000398:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800039a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800039c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039e:	f000 fc29 	bl	8000bf4 <HAL_RCC_OscConfig>
 80003a2:	b100      	cbz	r0, 80003a6 <SystemClock_Config+0x5a>
 80003a4:	e7fe      	b.n	80003a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	230f      	movs	r3, #15
 80003a8:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80003aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80003b0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003b2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80003b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003b8:	a803      	add	r0, sp, #12
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ba:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80003bc:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003be:	f000 fdbf 	bl	8000f40 <HAL_RCC_ClockConfig>
 80003c2:	4604      	mov	r4, r0
 80003c4:	b100      	cbz	r0, 80003c8 <SystemClock_Config+0x7c>
 80003c6:	e7fe      	b.n	80003c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80003c8:	f000 fe6e 	bl	80010a8 <HAL_RCC_GetHCLKFreq>
 80003cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80003d4:	f001 f95e 	bl	8001694 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80003d8:	2004      	movs	r0, #4
 80003da:	f001 f971 	bl	80016c0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80003de:	4622      	mov	r2, r4
 80003e0:	4621      	mov	r1, r4
 80003e2:	f04f 30ff 	mov.w	r0, #4294967295
 80003e6:	f001 f915 	bl	8001614 <HAL_NVIC_SetPriority>
}
 80003ea:	b014      	add	sp, #80	; 0x50
 80003ec:	bd10      	pop	{r4, pc}
 80003ee:	bf00      	nop
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40007000 	.word	0x40007000

080003f8 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80003f8:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN 1 */

  HAL_StatusTypeDef rx_status = HAL_ERROR;
  HAL_StatusTypeDef tx_status = HAL_ERROR;
  uint8_t i = 0;
  uint8_t rx_data[10] = {10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
 80003fa:	4b34      	ldr	r3, [pc, #208]	; (80004cc <main+0xd4>)
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80003fc:	b086      	sub	sp, #24
  /* USER CODE BEGIN 1 */

  HAL_StatusTypeDef rx_status = HAL_ERROR;
  HAL_StatusTypeDef tx_status = HAL_ERROR;
  uint8_t i = 0;
  uint8_t rx_data[10] = {10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
 80003fe:	6859      	ldr	r1, [r3, #4]
 8000400:	6818      	ldr	r0, [r3, #0]
 8000402:	466a      	mov	r2, sp
 8000404:	c203      	stmia	r2!, {r0, r1}
 8000406:	8919      	ldrh	r1, [r3, #8]
  uint8_t tx_data[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
 8000408:	f853 0f0a 	ldr.w	r0, [r3, #10]!
  /* USER CODE BEGIN 1 */

  HAL_StatusTypeDef rx_status = HAL_ERROR;
  HAL_StatusTypeDef tx_status = HAL_ERROR;
  uint8_t i = 0;
  uint8_t rx_data[10] = {10, 10, 10, 10, 10, 10, 10, 10, 10, 10 };
 800040c:	8011      	strh	r1, [r2, #0]
  uint8_t tx_data[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
 800040e:	6859      	ldr	r1, [r3, #4]
 8000410:	891b      	ldrh	r3, [r3, #8]
 8000412:	aa03      	add	r2, sp, #12
 8000414:	c203      	stmia	r2!, {r0, r1}
 8000416:	8013      	strh	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000418:	f001 f978 	bl	800170c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800041c:	f7ff ff96 	bl	800034c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000420:	f000 f85c 	bl	80004dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000424:	f000 f95e 	bl	80006e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000428:	f7ff fece 	bl	80001c8 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  rx_status = HAL_UART_Receive_DMA(&huart2, rx_data, 10);
 800042c:	220a      	movs	r2, #10
 800042e:	4669      	mov	r1, sp
 8000430:	4827      	ldr	r0, [pc, #156]	; (80004d0 <main+0xd8>)
 8000432:	f000 fb37 	bl	8000aa4 <HAL_UART_Receive_DMA>
  if(rx_status == HAL_OK)
 8000436:	b938      	cbnz	r0, 8000448 <main+0x50>
  {
	  tx_status = HAL_UART_Transmit_DMA(&huart2, tx_data, 10);
 8000438:	220a      	movs	r2, #10
 800043a:	a903      	add	r1, sp, #12
 800043c:	4824      	ldr	r0, [pc, #144]	; (80004d0 <main+0xd8>)
 800043e:	f000 faf7 	bl	8000a30 <HAL_UART_Transmit_DMA>
	  if(tx_status == HAL_OK)
 8000442:	b908      	cbnz	r0, 8000448 <main+0x50>
	  {
		  MX_USART2_UART_Init();
 8000444:	f7ff fec0 	bl	80001c8 <MX_USART2_UART_Init>
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000448:	2400      	movs	r4, #0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		i %= 10;
 800044a:	260a      	movs	r6, #10
 800044c:	fbb4 f3f6 	udiv	r3, r4, r6
 8000450:	fb06 4413 	mls	r4, r6, r3, r4
 8000454:	b2e4      	uxtb	r4, r4
		if(tx_data[i] == rx_data[i])
 8000456:	ab06      	add	r3, sp, #24
 8000458:	4423      	add	r3, r4
 800045a:	f813 5c0c 	ldrb.w	r5, [r3, #-12]
 800045e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000462:	42ab      	cmp	r3, r5
 8000464:	d12d      	bne.n	80004c2 <main+0xca>
		{
			uint8_t temp = rx_data[i];
			if(temp / 8 == 1)
 8000466:	f1a5 0308 	sub.w	r3, r5, #8
 800046a:	2b07      	cmp	r3, #7
				HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 800046c:	bf94      	ite	ls
 800046e:	2201      	movls	r2, #1
			else
				HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movhi	r2, #0
 8000472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000476:	4817      	ldr	r0, [pc, #92]	; (80004d4 <main+0xdc>)
 8000478:	f000 ff2c 	bl	80012d4 <HAL_GPIO_WritePin>
			temp %= 8;

			if(temp / 4 == 1)
 800047c:	f005 0307 	and.w	r3, r5, #7
 8000480:	3b04      	subs	r3, #4
 8000482:	2b03      	cmp	r3, #3
				HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 8000484:	bf94      	ite	ls
 8000486:	2201      	movls	r2, #1
			else
				HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movhi	r2, #0
 800048a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800048e:	4811      	ldr	r0, [pc, #68]	; (80004d4 <main+0xdc>)
 8000490:	f000 ff20 	bl	80012d4 <HAL_GPIO_WritePin>
			temp %= 4;

			if(temp / 2 == 1)
 8000494:	f005 0303 	and.w	r3, r5, #3
 8000498:	3b02      	subs	r3, #2
 800049a:	2b01      	cmp	r3, #1
				HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 800049c:	bf94      	ite	ls
 800049e:	2201      	movls	r2, #1
			else
				HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movhi	r2, #0
 80004a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004a6:	480b      	ldr	r0, [pc, #44]	; (80004d4 <main+0xdc>)
 80004a8:	f000 ff14 	bl	80012d4 <HAL_GPIO_WritePin>
			temp %= 2;

			if(temp == 1)
 80004ac:	f015 0201 	ands.w	r2, r5, #1
				HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
			else
				HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 80004b0:	bf08      	it	eq
 80004b2:	2200      	moveq	r2, #0
 80004b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b8:	4806      	ldr	r0, [pc, #24]	; (80004d4 <main+0xdc>)
 80004ba:	f000 ff0b 	bl	80012d4 <HAL_GPIO_WritePin>

			i++;
 80004be:	3401      	adds	r4, #1
 80004c0:	b2e4      	uxtb	r4, r4
		}

		HAL_Delay(500u);
 80004c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c6:	f001 f949 	bl	800175c <HAL_Delay>
	}
 80004ca:	e7bf      	b.n	800044c <main+0x54>
 80004cc:	0800187c 	.word	0x0800187c
 80004d0:	200000e0 	.word	0x200000e0
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	e7fe      	b.n	80004d8 <Error_Handler>
	...

080004dc <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80004dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004e0:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e2:	2400      	movs	r4, #0
 80004e4:	4b78      	ldr	r3, [pc, #480]	; (80006c8 <MX_GPIO_Init+0x1ec>)
 80004e6:	9403      	str	r4, [sp, #12]
 80004e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80004ea:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 80006d4 <MX_GPIO_Init+0x1f8>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80004ee:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80006d8 <MX_GPIO_Init+0x1fc>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80004f2:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 80006dc <MX_GPIO_Init+0x200>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f6:	4f75      	ldr	r7, [pc, #468]	; (80006cc <MX_GPIO_Init+0x1f0>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 80006e0 <MX_GPIO_Init+0x204>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004fc:	f042 0210 	orr.w	r2, r2, #16
 8000500:	631a      	str	r2, [r3, #48]	; 0x30
 8000502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000504:	f002 0210 	and.w	r2, r2, #16
 8000508:	9203      	str	r2, [sp, #12]
 800050a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050c:	9404      	str	r4, [sp, #16]
 800050e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000510:	f042 0204 	orr.w	r2, r2, #4
 8000514:	631a      	str	r2, [r3, #48]	; 0x30
 8000516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000518:	f002 0204 	and.w	r2, r2, #4
 800051c:	9204      	str	r2, [sp, #16]
 800051e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000520:	9405      	str	r4, [sp, #20]
 8000522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000524:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000528:	631a      	str	r2, [r3, #48]	; 0x30
 800052a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000530:	9205      	str	r2, [sp, #20]
 8000532:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000534:	9406      	str	r4, [sp, #24]
 8000536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000538:	f042 0201 	orr.w	r2, r2, #1
 800053c:	631a      	str	r2, [r3, #48]	; 0x30
 800053e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000540:	f002 0201 	and.w	r2, r2, #1
 8000544:	9206      	str	r2, [sp, #24]
 8000546:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000548:	9407      	str	r4, [sp, #28]
 800054a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800054c:	f042 0202 	orr.w	r2, r2, #2
 8000550:	631a      	str	r2, [r3, #48]	; 0x30
 8000552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000554:	f002 0202 	and.w	r2, r2, #2
 8000558:	9207      	str	r2, [sp, #28]
 800055a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055c:	9408      	str	r4, [sp, #32]
 800055e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000560:	f042 0208 	orr.w	r2, r2, #8
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	f003 0308 	and.w	r3, r3, #8
 800056c:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800056e:	4622      	mov	r2, r4
 8000570:	4648      	mov	r0, r9
 8000572:	2108      	movs	r1, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000574:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000576:	f000 fead 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800057a:	4622      	mov	r2, r4
 800057c:	4640      	mov	r0, r8
 800057e:	2101      	movs	r1, #1
 8000580:	f000 fea8 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000584:	4622      	mov	r2, r4
 8000586:	4658      	mov	r0, fp
 8000588:	f24f 0110 	movw	r1, #61456	; 0xf010
 800058c:	f000 fea2 	bl	80012d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2601      	movs	r6, #1
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000592:	2508      	movs	r5, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000594:	a909      	add	r1, sp, #36	; 0x24
 8000596:	4648      	mov	r0, r9
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000598:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f000 fdb8 	bl	8001114 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005a4:	a909      	add	r1, sp, #36	; 0x24
 80005a6:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005a8:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f000 fdb0 	bl	8001114 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005b4:	2305      	movs	r3, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005b6:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005b8:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005bc:	4640      	mov	r0, r8
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005be:	930d      	str	r3, [sp, #52]	; 0x34
 80005c0:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f000 fda4 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005cc:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <MX_GPIO_Init+0x1f4>)
 80005ce:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d0:	a909      	add	r1, sp, #36	; 0x24
 80005d2:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d4:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005d8:	f000 fd9c 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005dc:	2210      	movs	r2, #16
 80005de:	9209      	str	r2, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e0:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80005e2:	2206      	movs	r2, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	4638      	mov	r0, r7
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80005e6:	920d      	str	r2, [sp, #52]	; 0x34
 80005e8:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f0:	f000 fd90 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005f4:	21e0      	movs	r1, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005f6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005f8:	9109      	str	r1, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	4638      	mov	r0, r7
 80005fc:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005fe:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	f000 fd85 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800060a:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800060c:	a909      	add	r1, sp, #36	; 0x24
 800060e:	4650      	mov	r0, sl
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000610:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000616:	f000 fd7d 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800061a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800061e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000620:	9109      	str	r1, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000622:	4650      	mov	r0, sl
 8000624:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000626:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000628:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800062e:	f000 fd71 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000632:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000636:	a909      	add	r1, sp, #36	; 0x24
 8000638:	4658      	mov	r0, fp
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800063a:	9309      	str	r3, [sp, #36]	; 0x24
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000642:	f000 fd67 	bl	8001114 <HAL_GPIO_Init>
  /*Configure GPIO pins : PC7 PCPin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000646:	9a01      	ldr	r2, [sp, #4]
 8000648:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PC7 PCPin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 800064a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	a909      	add	r1, sp, #36	; 0x24
 8000650:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PC7 PCPin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 8000652:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065a:	f000 fd5b 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800065e:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000662:	a909      	add	r1, sp, #36	; 0x24
 8000664:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000666:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000668:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800066c:	f000 fd52 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000670:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000674:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000678:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	4638      	mov	r0, r7
  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800067c:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f000 fd46 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000688:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800068a:	a909      	add	r1, sp, #36	; 0x24
 800068c:	4658      	mov	r0, fp
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800068e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000694:	f000 fd3e 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000698:	f44f 7310 	mov.w	r3, #576	; 0x240
 800069c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069e:	2312      	movs	r3, #18
 80006a0:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a4:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	4650      	mov	r0, sl
  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006a8:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006aa:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ae:	f000 fd31 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_GPIO_Init+0x1f4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80006b4:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006b6:	a909      	add	r1, sp, #36	; 0x24
 80006b8:	4648      	mov	r0, r9
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ba:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006be:	f000 fd29 	bl	8001114 <HAL_GPIO_Init>

}
 80006c2:	b00f      	add	sp, #60	; 0x3c
 80006c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	10120000 	.word	0x10120000
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020c00 	.word	0x40020c00
 80006e0:	40020400 	.word	0x40020400

080006e4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void) 
{
 80006e4:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <MX_DMA_Init+0x8c>)
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	6b11      	ldr	r1, [r2, #48]	; 0x30
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80006ee:	4821      	ldr	r0, [pc, #132]	; (8000774 <MX_DMA_Init+0x90>)
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f0:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80006f4:	6311      	str	r1, [r2, #48]	; 0x30
 80006f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80006f8:	f401 1100 	and.w	r1, r1, #2097152	; 0x200000
 80006fc:	9100      	str	r1, [sp, #0]
 80006fe:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000704:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8000708:	6311      	str	r1, [r2, #48]	; 0x30
 800070a:	6b12      	ldr	r2, [r2, #48]	; 0x30
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800070c:	6143      	str	r3, [r0, #20]
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000712:	9201      	str	r2, [sp, #4]
 8000714:	9a01      	ldr	r2, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000716:	4a18      	ldr	r2, [pc, #96]	; (8000778 <MX_DMA_Init+0x94>)
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000718:	6183      	str	r3, [r0, #24]
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 800071a:	e880 000c 	stmia.w	r0, {r2, r3}
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000726:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800072c:	6102      	str	r2, [r0, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800072e:	2204      	movs	r2, #4
 8000730:	6242      	str	r2, [r0, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000732:	2203      	movs	r2, #3
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000734:	61c3      	str	r3, [r0, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000736:	6203      	str	r3, [r0, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000738:	6282      	str	r2, [r0, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800073a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800073c:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800073e:	f000 fde3 	bl	8001308 <HAL_DMA_Init>
 8000742:	b108      	cbz	r0, 8000748 <MX_DMA_Init+0x64>
  {
    Error_Handler();
 8000744:	f7ff fec8 	bl	80004d8 <Error_Handler>
        
  

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	4611      	mov	r1, r2
 800074c:	2010      	movs	r0, #16
 800074e:	f000 ff61 	bl	8001614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000752:	2010      	movs	r0, #16
 8000754:	f000 ff92 	bl	800167c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	4611      	mov	r1, r2
 800075c:	2011      	movs	r0, #17
 800075e:	f000 ff59 	bl	8001614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000762:	2011      	movs	r0, #17
 8000764:	f000 ff8a 	bl	800167c <HAL_NVIC_EnableIRQ>

}
 8000768:	b003      	add	sp, #12
 800076a:	f85d fb04 	ldr.w	pc, [sp], #4
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	20000120 	.word	0x20000120
 8000778:	40026410 	.word	0x40026410

0800077c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800077c:	6803      	ldr	r3, [r0, #0]
 800077e:	68da      	ldr	r2, [r3, #12]
 8000780:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000784:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000786:	695a      	ldr	r2, [r3, #20]
 8000788:	f022 0201 	bic.w	r2, r2, #1
 800078c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800078e:	2320      	movs	r3, #32
 8000790:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000794:	4770      	bx	lr
	...

08000798 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800079c:	6807      	ldr	r7, [r0, #0]
 800079e:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80007a0:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80007a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80007a6:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80007a8:	68a1      	ldr	r1, [r4, #8]
 80007aa:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80007ac:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80007ae:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80007b0:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80007b2:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80007b4:	4311      	orrs	r1, r2
 80007b6:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80007b8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80007bc:	430a      	orrs	r2, r1
 80007be:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80007c0:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80007c4:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80007c6:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80007c8:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80007ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80007ce:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80007d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80007d4:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	4b7c      	ldr	r3, [pc, #496]	; (80009cc <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80007dc:	d17c      	bne.n	80008d8 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80007de:	429f      	cmp	r7, r3
 80007e0:	d003      	beq.n	80007ea <UART_SetConfig+0x52>
 80007e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007e6:	429f      	cmp	r7, r3
 80007e8:	d131      	bne.n	800084e <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80007ea:	f000 fc7b 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 80007ee:	6863      	ldr	r3, [r4, #4]
 80007f0:	2519      	movs	r5, #25
 80007f2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80007f6:	4368      	muls	r0, r5
 80007f8:	fbb0 f8f8 	udiv	r8, r0, r8
 80007fc:	f000 fc72 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 8000800:	6866      	ldr	r6, [r4, #4]
 8000802:	4368      	muls	r0, r5
 8000804:	0076      	lsls	r6, r6, #1
 8000806:	fbb0 f6f6 	udiv	r6, r0, r6
 800080a:	f000 fc6b 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 800080e:	6863      	ldr	r3, [r4, #4]
 8000810:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4368      	muls	r0, r5
 8000818:	fbb0 f0f3 	udiv	r0, r0, r3
 800081c:	fbb0 f0f9 	udiv	r0, r0, r9
 8000820:	fb09 6610 	mls	r6, r9, r0, r6
 8000824:	f000 fc5e 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 8000828:	fbb8 f8f9 	udiv	r8, r8, r9
 800082c:	6861      	ldr	r1, [r4, #4]
 800082e:	00f6      	lsls	r6, r6, #3
 8000830:	3632      	adds	r6, #50	; 0x32
 8000832:	fbb6 f6f9 	udiv	r6, r6, r9
 8000836:	0076      	lsls	r6, r6, #1
 8000838:	4368      	muls	r0, r5
 800083a:	0049      	lsls	r1, r1, #1
 800083c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000840:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8000844:	fbb0 faf1 	udiv	sl, r0, r1
 8000848:	f000 fc4c 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 800084c:	e030      	b.n	80008b0 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800084e:	f000 fc31 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 8000852:	6863      	ldr	r3, [r4, #4]
 8000854:	2519      	movs	r5, #25
 8000856:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800085a:	4368      	muls	r0, r5
 800085c:	fbb0 f8f8 	udiv	r8, r0, r8
 8000860:	f000 fc28 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 8000864:	6866      	ldr	r6, [r4, #4]
 8000866:	4368      	muls	r0, r5
 8000868:	0076      	lsls	r6, r6, #1
 800086a:	fbb0 f6f6 	udiv	r6, r0, r6
 800086e:	f000 fc21 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 8000872:	6863      	ldr	r3, [r4, #4]
 8000874:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4368      	muls	r0, r5
 800087c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000880:	fbb0 f0f9 	udiv	r0, r0, r9
 8000884:	fb09 6610 	mls	r6, r9, r0, r6
 8000888:	f000 fc14 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 800088c:	fbb8 f8f9 	udiv	r8, r8, r9
 8000890:	00f6      	lsls	r6, r6, #3
 8000892:	6861      	ldr	r1, [r4, #4]
 8000894:	3632      	adds	r6, #50	; 0x32
 8000896:	fbb6 f6f9 	udiv	r6, r6, r9
 800089a:	0076      	lsls	r6, r6, #1
 800089c:	4368      	muls	r0, r5
 800089e:	0049      	lsls	r1, r1, #1
 80008a0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80008a4:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80008a8:	fbb0 faf1 	udiv	sl, r0, r1
 80008ac:	f000 fc02 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 80008b0:	4345      	muls	r5, r0
 80008b2:	6860      	ldr	r0, [r4, #4]
 80008b4:	0040      	lsls	r0, r0, #1
 80008b6:	fbb5 f0f0 	udiv	r0, r5, r0
 80008ba:	fbb0 f0f9 	udiv	r0, r0, r9
 80008be:	fb09 a210 	mls	r2, r9, r0, sl
 80008c2:	00d2      	lsls	r2, r2, #3
 80008c4:	3232      	adds	r2, #50	; 0x32
 80008c6:	fbb2 f3f9 	udiv	r3, r2, r9
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	4443      	add	r3, r8
 80008d0:	441e      	add	r6, r3
 80008d2:	60be      	str	r6, [r7, #8]
 80008d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80008d8:	429f      	cmp	r7, r3
 80008da:	d002      	beq.n	80008e2 <UART_SetConfig+0x14a>
 80008dc:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <UART_SetConfig+0x238>)
 80008de:	429f      	cmp	r7, r3
 80008e0:	d130      	bne.n	8000944 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80008e2:	f000 fbff 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 80008e6:	6863      	ldr	r3, [r4, #4]
 80008e8:	2519      	movs	r5, #25
 80008ea:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80008ee:	4368      	muls	r0, r5
 80008f0:	fbb0 f8f8 	udiv	r8, r0, r8
 80008f4:	f000 fbf6 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 80008f8:	6866      	ldr	r6, [r4, #4]
 80008fa:	4368      	muls	r0, r5
 80008fc:	00b6      	lsls	r6, r6, #2
 80008fe:	fbb0 f6f6 	udiv	r6, r0, r6
 8000902:	f000 fbef 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 8000906:	6863      	ldr	r3, [r4, #4]
 8000908:	f04f 0964 	mov.w	r9, #100	; 0x64
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4368      	muls	r0, r5
 8000910:	fbb0 f0f3 	udiv	r0, r0, r3
 8000914:	fbb0 f0f9 	udiv	r0, r0, r9
 8000918:	fb09 6610 	mls	r6, r9, r0, r6
 800091c:	f000 fbe2 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 8000920:	fbb8 f8f9 	udiv	r8, r8, r9
 8000924:	6861      	ldr	r1, [r4, #4]
 8000926:	0136      	lsls	r6, r6, #4
 8000928:	4368      	muls	r0, r5
 800092a:	0089      	lsls	r1, r1, #2
 800092c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000930:	3632      	adds	r6, #50	; 0x32
 8000932:	fbb0 faf1 	udiv	sl, r0, r1
 8000936:	fbb6 f6f9 	udiv	r6, r6, r9
 800093a:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 800093e:	f000 fbd1 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 8000942:	e02f      	b.n	80009a4 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000944:	f000 fbb6 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 8000948:	6863      	ldr	r3, [r4, #4]
 800094a:	2519      	movs	r5, #25
 800094c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8000950:	4368      	muls	r0, r5
 8000952:	fbb0 f8f8 	udiv	r8, r0, r8
 8000956:	f000 fbad 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 800095a:	6866      	ldr	r6, [r4, #4]
 800095c:	4368      	muls	r0, r5
 800095e:	00b6      	lsls	r6, r6, #2
 8000960:	fbb0 f6f6 	udiv	r6, r0, r6
 8000964:	f000 fba6 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 8000968:	6863      	ldr	r3, [r4, #4]
 800096a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4368      	muls	r0, r5
 8000972:	fbb0 f0f3 	udiv	r0, r0, r3
 8000976:	fbb0 f0f9 	udiv	r0, r0, r9
 800097a:	fb09 6610 	mls	r6, r9, r0, r6
 800097e:	f000 fb99 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 8000982:	fbb8 f8f9 	udiv	r8, r8, r9
 8000986:	6861      	ldr	r1, [r4, #4]
 8000988:	0136      	lsls	r6, r6, #4
 800098a:	3632      	adds	r6, #50	; 0x32
 800098c:	4368      	muls	r0, r5
 800098e:	fbb6 f6f9 	udiv	r6, r6, r9
 8000992:	0089      	lsls	r1, r1, #2
 8000994:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000998:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 800099c:	fbb0 faf1 	udiv	sl, r0, r1
 80009a0:	f000 fb88 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 80009a4:	4345      	muls	r5, r0
 80009a6:	6860      	ldr	r0, [r4, #4]
 80009a8:	0080      	lsls	r0, r0, #2
 80009aa:	fbb5 f0f0 	udiv	r0, r5, r0
 80009ae:	fbb0 f0f9 	udiv	r0, r0, r9
 80009b2:	fb09 a210 	mls	r2, r9, r0, sl
 80009b6:	0112      	lsls	r2, r2, #4
 80009b8:	3232      	adds	r2, #50	; 0x32
 80009ba:	fbb2 f3f9 	udiv	r3, r2, r9
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	4433      	add	r3, r6
 80009c4:	4443      	add	r3, r8
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40011400 	.word	0x40011400

080009d4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80009d4:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80009d6:	4604      	mov	r4, r0
 80009d8:	b340      	cbz	r0, 8000a2c <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80009da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80009de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009e2:	b91b      	cbnz	r3, 80009ec <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80009e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80009e8:	f7ff fc0a 	bl	8000200 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80009ec:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80009ee:	2324      	movs	r3, #36	; 0x24
 80009f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80009f4:	68d3      	ldr	r3, [r2, #12]
 80009f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009fa:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80009fc:	4620      	mov	r0, r4
 80009fe:	f7ff fecb 	bl	8000798 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a02:	6823      	ldr	r3, [r4, #0]
 8000a04:	691a      	ldr	r2, [r3, #16]
 8000a06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000a0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000a12:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a1a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a1c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8000a1e:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a20:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000a22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000a26:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8000a2a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8000a2c:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8000a2e:	bd10      	pop	{r4, pc}

08000a30 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000a30:	b538      	push	{r3, r4, r5, lr}
 8000a32:	4604      	mov	r4, r0
 8000a34:	4613      	mov	r3, r2
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8000a36:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000a3a:	2a20      	cmp	r2, #32
 8000a3c:	d12a      	bne.n	8000a94 <HAL_UART_Transmit_DMA+0x64>
  {
    if((pData == NULL ) || (Size == 0U))
 8000a3e:	b339      	cbz	r1, 8000a90 <HAL_UART_Transmit_DMA+0x60>
 8000a40:	b333      	cbz	r3, 8000a90 <HAL_UART_Transmit_DMA+0x60>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000a42:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8000a46:	2a01      	cmp	r2, #1
 8000a48:	d024      	beq.n	8000a94 <HAL_UART_Transmit_DMA+0x64>
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8000a50:	6b20      	ldr	r0, [r4, #48]	; 0x30

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
 8000a52:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a54:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000a56:	2221      	movs	r2, #33	; 0x21

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a58:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000a5a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_UART_Transmit_DMA+0x68>)
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8000a60:	84e3      	strh	r3, [r4, #38]	; 0x26
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pTxBuffPtr = pData;
 8000a62:	6221      	str	r1, [r4, #32]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8000a64:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8000a66:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <HAL_UART_Transmit_DMA+0x6c>)
 8000a68:	6402      	str	r2, [r0, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_UART_Transmit_DMA+0x70>)
 8000a6c:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8000a6e:	6822      	ldr	r2, [r4, #0]

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8000a70:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8000a72:	3204      	adds	r2, #4
 8000a74:	f000 fcbe 	bl	80013f4 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000a7e:	601a      	str	r2, [r3, #0]
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000a80:	695a      	ldr	r2, [r3, #20]
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000a82:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000a86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a8a:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	bd38      	pop	{r3, r4, r5, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return HAL_ERROR;
 8000a90:	2001      	movs	r0, #1
 8000a92:	bd38      	pop	{r3, r4, r5, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000a94:	2002      	movs	r0, #2
  }
}
 8000a96:	bd38      	pop	{r3, r4, r5, pc}
 8000a98:	08000b27 	.word	0x08000b27
 8000a9c:	08000b55 	.word	0x08000b55
 8000aa0:	08000ba7 	.word	0x08000ba7

08000aa4 <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8000aa4:	4613      	mov	r3, r2
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8000aa6:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8000aaa:	2a20      	cmp	r2, #32
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4604      	mov	r4, r0
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8000ab0:	d130      	bne.n	8000b14 <HAL_UART_Receive_DMA+0x70>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d02c      	beq.n	8000b10 <HAL_UART_Receive_DMA+0x6c>
 8000ab6:	b35b      	cbz	r3, 8000b10 <HAL_UART_Receive_DMA+0x6c>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8000ab8:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8000abc:	2a01      	cmp	r2, #1
 8000abe:	d029      	beq.n	8000b14 <HAL_UART_Receive_DMA+0x70>
 8000ac0:	2201      	movs	r2, #1
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ac2:	2500      	movs	r5, #0
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8000ac4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000ac8:	2222      	movs	r2, #34	; 0x22
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000aca:	63c5      	str	r5, [r0, #60]	; 0x3c
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 8000acc:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8000ace:	8583      	strh	r3, [r0, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000ad0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000ad4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_UART_Receive_DMA+0x74>)
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size); 
 8000ad8:	6826      	ldr	r6, [r4, #0]
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000ada:	63c2      	str	r2, [r0, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_UART_Receive_DMA+0x78>)
 8000ade:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_UART_Receive_DMA+0x7c>)
 8000ae2:	64c2      	str	r2, [r0, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8000ae4:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size); 
 8000ae6:	460a      	mov	r2, r1
 8000ae8:	1d31      	adds	r1, r6, #4
 8000aea:	f000 fc83 	bl	80013f4 <HAL_DMA_Start_IT>

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000af6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000af8:	695a      	ldr	r2, [r3, #20]
 8000afa:	f042 0201 	orr.w	r2, r2, #1
 8000afe:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b06:	615a      	str	r2, [r3, #20]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    return HAL_OK;
 8000b08:	4628      	mov	r0, r5
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000b0a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    
    return HAL_OK;
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 8000b10:	2001      	movs	r0, #1
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 8000b14:	2002      	movs	r0, #2
  }
}
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	08000b61 	.word	0x08000b61
 8000b1c:	08000b9b 	.word	0x08000b9b
 8000b20:	08000ba7 	.word	0x08000ba7

08000b24 <HAL_UART_TxCpltCallback>:
 8000b24:	4770      	bx	lr

08000b26 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8000b26:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8000b28:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b2a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8000b32:	d10a      	bne.n	8000b4a <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 8000b34:	84d3      	strh	r3, [r2, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000b36:	6813      	ldr	r3, [r2, #0]
 8000b38:	695a      	ldr	r2, [r3, #20]
 8000b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b3e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	bd08      	pop	{r3, pc}

  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	f7ff ffea 	bl	8000b24 <HAL_UART_TxCpltCallback>
 8000b50:	bd08      	pop	{r3, pc}

08000b52 <HAL_UART_TxHalfCpltCallback>:
 8000b52:	4770      	bx	lr

08000b54 <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8000b54:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8000b56:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000b58:	f7ff fffb 	bl	8000b52 <HAL_UART_TxHalfCpltCallback>
 8000b5c:	bd08      	pop	{r3, pc}

08000b5e <HAL_UART_RxCpltCallback>:
 8000b5e:	4770      	bx	lr

08000b60 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8000b60:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8000b62:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b64:	6b82      	ldr	r2, [r0, #56]	; 0x38
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8000b6c:	d110      	bne.n	8000b90 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 8000b6e:	85d3      	strh	r3, [r2, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000b70:	6813      	ldr	r3, [r2, #0]
 8000b72:	68d9      	ldr	r1, [r3, #12]
 8000b74:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000b78:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000b7a:	6959      	ldr	r1, [r3, #20]
 8000b7c:	f021 0101 	bic.w	r1, r1, #1
 8000b80:	6159      	str	r1, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000b82:	6959      	ldr	r1, [r3, #20]
 8000b84:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000b88:	6159      	str	r1, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8000b8a:	2320      	movs	r3, #32
 8000b8c:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8000b90:	4610      	mov	r0, r2
 8000b92:	f7ff ffe4 	bl	8000b5e <HAL_UART_RxCpltCallback>
 8000b96:	bd08      	pop	{r3, pc}

08000b98 <HAL_UART_RxHalfCpltCallback>:
 8000b98:	4770      	bx	lr

08000b9a <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8000b9a:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart); 
 8000b9c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000b9e:	f7ff fffb 	bl	8000b98 <HAL_UART_RxHalfCpltCallback>
 8000ba2:	bd08      	pop	{r3, pc}

08000ba4 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ba4:	4770      	bx	lr

08000ba6 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ba6:	6b81      	ldr	r1, [r0, #56]	; 0x38
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8000ba8:	b508      	push	{r3, lr}
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8000baa:	680b      	ldr	r3, [r1, #0]
 8000bac:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8000bae:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8000bb2:	2821      	cmp	r0, #33	; 0x21
 8000bb4:	d10a      	bne.n	8000bcc <UART_DMAError+0x26>
 8000bb6:	0612      	lsls	r2, r2, #24
 8000bb8:	d508      	bpl.n	8000bcc <UART_DMAError+0x26>
  {
    huart->TxXferCount = 0U;
 8000bba:	2200      	movs	r2, #0
 8000bbc:	84ca      	strh	r2, [r1, #38]	; 0x26
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000bc4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8000bcc:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8000bce:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8000bd2:	2a22      	cmp	r2, #34	; 0x22
 8000bd4:	d106      	bne.n	8000be4 <UART_DMAError+0x3e>
 8000bd6:	065b      	lsls	r3, r3, #25
 8000bd8:	d504      	bpl.n	8000be4 <UART_DMAError+0x3e>
  {
    huart->RxXferCount = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8000bde:	4608      	mov	r0, r1
 8000be0:	f7ff fdcc 	bl	800077c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8000be4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8000bec:	4608      	mov	r0, r1
 8000bee:	f7ff ffd9 	bl	8000ba4 <HAL_UART_ErrorCallback>
 8000bf2:	bd08      	pop	{r3, pc}

08000bf4 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf4:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000bfa:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfc:	07d8      	lsls	r0, r3, #31
 8000bfe:	d403      	bmi.n	8000c08 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	0799      	lsls	r1, r3, #30
 8000c04:	d437      	bmi.n	8000c76 <HAL_RCC_OscConfig+0x82>
 8000c06:	e087      	b.n	8000d18 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c08:	4ba7      	ldr	r3, [pc, #668]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	f002 020c 	and.w	r2, r2, #12
 8000c10:	2a04      	cmp	r2, #4
 8000c12:	d007      	beq.n	8000c24 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c14:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c16:	f002 020c 	and.w	r2, r2, #12
 8000c1a:	2a08      	cmp	r2, #8
 8000c1c:	d10b      	bne.n	8000c36 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	025a      	lsls	r2, r3, #9
 8000c22:	d508      	bpl.n	8000c36 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c24:	4ba0      	ldr	r3, [pc, #640]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	039b      	lsls	r3, r3, #14
 8000c2a:	d5e9      	bpl.n	8000c00 <HAL_RCC_OscConfig+0xc>
 8000c2c:	6863      	ldr	r3, [r4, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1e6      	bne.n	8000c00 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000c32:	2001      	movs	r0, #1
 8000c34:	e134      	b.n	8000ea0 <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c36:	4b9d      	ldr	r3, [pc, #628]	; (8000eac <HAL_RCC_OscConfig+0x2b8>)
 8000c38:	7922      	ldrb	r2, [r4, #4]
 8000c3a:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c3c:	6863      	ldr	r3, [r4, #4]
 8000c3e:	b16b      	cbz	r3, 8000c5c <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c40:	f000 fd86 	bl	8001750 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c44:	4d98      	ldr	r5, [pc, #608]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c46:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c48:	682b      	ldr	r3, [r5, #0]
 8000c4a:	039f      	lsls	r7, r3, #14
 8000c4c:	d4d8      	bmi.n	8000c00 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c4e:	f000 fd7f 	bl	8001750 <HAL_GetTick>
 8000c52:	1b80      	subs	r0, r0, r6
 8000c54:	2864      	cmp	r0, #100	; 0x64
 8000c56:	d9f7      	bls.n	8000c48 <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 8000c58:	2003      	movs	r0, #3
 8000c5a:	e121      	b.n	8000ea0 <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c5c:	f000 fd78 	bl	8001750 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c60:	4d91      	ldr	r5, [pc, #580]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c62:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	0398      	lsls	r0, r3, #14
 8000c68:	d5ca      	bpl.n	8000c00 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c6a:	f000 fd71 	bl	8001750 <HAL_GetTick>
 8000c6e:	1b80      	subs	r0, r0, r6
 8000c70:	2864      	cmp	r0, #100	; 0x64
 8000c72:	d9f7      	bls.n	8000c64 <HAL_RCC_OscConfig+0x70>
 8000c74:	e7f0      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c76:	4b8c      	ldr	r3, [pc, #560]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	f012 0f0c 	tst.w	r2, #12
 8000c7e:	d007      	beq.n	8000c90 <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c80:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c82:	f002 020c 	and.w	r2, r2, #12
 8000c86:	2a08      	cmp	r2, #8
 8000c88:	d117      	bne.n	8000cba <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	0259      	lsls	r1, r3, #9
 8000c8e:	d414      	bmi.n	8000cba <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c90:	4b85      	ldr	r3, [pc, #532]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	0792      	lsls	r2, r2, #30
 8000c96:	d502      	bpl.n	8000c9e <HAL_RCC_OscConfig+0xaa>
 8000c98:	68e2      	ldr	r2, [r4, #12]
 8000c9a:	2a01      	cmp	r2, #1
 8000c9c:	d1c9      	bne.n	8000c32 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9e:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca0:	21f8      	movs	r1, #248	; 0xf8
 8000ca2:	fa91 f1a1 	rbit	r1, r1
 8000ca6:	6920      	ldr	r0, [r4, #16]
 8000ca8:	fab1 f181 	clz	r1, r1
 8000cac:	fa00 f101 	lsl.w	r1, r0, r1
 8000cb0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb8:	e02e      	b.n	8000d18 <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cba:	68e2      	ldr	r2, [r4, #12]
 8000cbc:	4b7c      	ldr	r3, [pc, #496]	; (8000eb0 <HAL_RCC_OscConfig+0x2bc>)
 8000cbe:	b1ea      	cbz	r2, 8000cfc <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc4:	f000 fd44 	bl	8001750 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc8:	4d77      	ldr	r5, [pc, #476]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cca:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	4876      	ldr	r0, [pc, #472]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
 8000cd0:	079b      	lsls	r3, r3, #30
 8000cd2:	d405      	bmi.n	8000ce0 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd4:	f000 fd3c 	bl	8001750 <HAL_GetTick>
 8000cd8:	1b80      	subs	r0, r0, r6
 8000cda:	2802      	cmp	r0, #2
 8000cdc:	d9f6      	bls.n	8000ccc <HAL_RCC_OscConfig+0xd8>
 8000cde:	e7bb      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce0:	6803      	ldr	r3, [r0, #0]
 8000ce2:	22f8      	movs	r2, #248	; 0xf8
 8000ce4:	fa92 f2a2 	rbit	r2, r2
 8000ce8:	6921      	ldr	r1, [r4, #16]
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	6003      	str	r3, [r0, #0]
 8000cfa:	e00d      	b.n	8000d18 <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cfe:	f000 fd27 	bl	8001750 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d02:	4d69      	ldr	r5, [pc, #420]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d04:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d06:	682b      	ldr	r3, [r5, #0]
 8000d08:	079f      	lsls	r7, r3, #30
 8000d0a:	d505      	bpl.n	8000d18 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0c:	f000 fd20 	bl	8001750 <HAL_GetTick>
 8000d10:	1b80      	subs	r0, r0, r6
 8000d12:	2802      	cmp	r0, #2
 8000d14:	d9f7      	bls.n	8000d06 <HAL_RCC_OscConfig+0x112>
 8000d16:	e79f      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	071e      	lsls	r6, r3, #28
 8000d1c:	d403      	bmi.n	8000d26 <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	075d      	lsls	r5, r3, #29
 8000d22:	d545      	bpl.n	8000db0 <HAL_RCC_OscConfig+0x1bc>
 8000d24:	e01f      	b.n	8000d66 <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d26:	6962      	ldr	r2, [r4, #20]
 8000d28:	4b62      	ldr	r3, [pc, #392]	; (8000eb4 <HAL_RCC_OscConfig+0x2c0>)
 8000d2a:	b172      	cbz	r2, 8000d4a <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d30:	f000 fd0e 	bl	8001750 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d34:	4d5c      	ldr	r5, [pc, #368]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d36:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d38:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d3a:	0798      	lsls	r0, r3, #30
 8000d3c:	d4ef      	bmi.n	8000d1e <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d3e:	f000 fd07 	bl	8001750 <HAL_GetTick>
 8000d42:	1b80      	subs	r0, r0, r6
 8000d44:	2802      	cmp	r0, #2
 8000d46:	d9f7      	bls.n	8000d38 <HAL_RCC_OscConfig+0x144>
 8000d48:	e786      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d4a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d4c:	f000 fd00 	bl	8001750 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d50:	4d55      	ldr	r5, [pc, #340]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d52:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d54:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d56:	0799      	lsls	r1, r3, #30
 8000d58:	d5e1      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5a:	f000 fcf9 	bl	8001750 <HAL_GetTick>
 8000d5e:	1b80      	subs	r0, r0, r6
 8000d60:	2802      	cmp	r0, #2
 8000d62:	d9f7      	bls.n	8000d54 <HAL_RCC_OscConfig+0x160>
 8000d64:	e778      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000d6c:	4d52      	ldr	r5, [pc, #328]	; (8000eb8 <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000d80:	682b      	ldr	r3, [r5, #0]
 8000d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d86:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000d88:	f000 fce2 	bl	8001750 <HAL_GetTick>
 8000d8c:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000d8e:	682b      	ldr	r3, [r5, #0]
 8000d90:	05da      	lsls	r2, r3, #23
 8000d92:	d510      	bpl.n	8000db6 <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d94:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <HAL_RCC_OscConfig+0x2c8>)
 8000d96:	7a22      	ldrb	r2, [r4, #8]
 8000d98:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d9a:	68a3      	ldr	r3, [r4, #8]
 8000d9c:	b1bb      	cbz	r3, 8000dce <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d9e:	f000 fcd7 	bl	8001750 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000da2:	4d41      	ldr	r5, [pc, #260]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000da4:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000da6:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000daa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dac:	079b      	lsls	r3, r3, #30
 8000dae:	d508      	bpl.n	8000dc2 <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000db0:	69a2      	ldr	r2, [r4, #24]
 8000db2:	b9da      	cbnz	r2, 8000dec <HAL_RCC_OscConfig+0x1f8>
 8000db4:	e059      	b.n	8000e6a <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000db6:	f000 fccb 	bl	8001750 <HAL_GetTick>
 8000dba:	1b80      	subs	r0, r0, r6
 8000dbc:	2802      	cmp	r0, #2
 8000dbe:	d9e6      	bls.n	8000d8e <HAL_RCC_OscConfig+0x19a>
 8000dc0:	e74a      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc2:	f000 fcc5 	bl	8001750 <HAL_GetTick>
 8000dc6:	1b80      	subs	r0, r0, r6
 8000dc8:	42b8      	cmp	r0, r7
 8000dca:	d9ee      	bls.n	8000daa <HAL_RCC_OscConfig+0x1b6>
 8000dcc:	e744      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dce:	f000 fcbf 	bl	8001750 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dd2:	4d35      	ldr	r5, [pc, #212]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dd4:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dd6:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dda:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ddc:	0798      	lsls	r0, r3, #30
 8000dde:	d5e7      	bpl.n	8000db0 <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de0:	f000 fcb6 	bl	8001750 <HAL_GetTick>
 8000de4:	1b80      	subs	r0, r0, r6
 8000de6:	42b8      	cmp	r0, r7
 8000de8:	d9f7      	bls.n	8000dda <HAL_RCC_OscConfig+0x1e6>
 8000dea:	e735      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000dec:	4d2e      	ldr	r5, [pc, #184]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
 8000dee:	68ab      	ldr	r3, [r5, #8]
 8000df0:	f003 030c 	and.w	r3, r3, #12
 8000df4:	2b08      	cmp	r3, #8
 8000df6:	f43f af1c 	beq.w	8000c32 <HAL_RCC_OscConfig+0x3e>
 8000dfa:	4e31      	ldr	r6, [pc, #196]	; (8000ec0 <HAL_RCC_OscConfig+0x2cc>)
 8000dfc:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dfe:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e00:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e02:	d141      	bne.n	8000e88 <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e04:	f000 fca4 	bl	8001750 <HAL_GetTick>
 8000e08:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e0a:	682b      	ldr	r3, [r5, #0]
 8000e0c:	4f26      	ldr	r7, [pc, #152]	; (8000ea8 <HAL_RCC_OscConfig+0x2b4>)
 8000e0e:	0199      	lsls	r1, r3, #6
 8000e10:	d42d      	bmi.n	8000e6e <HAL_RCC_OscConfig+0x27a>
 8000e12:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000e16:	fa92 f2a2 	rbit	r2, r2
 8000e1a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e1e:	fab2 fe82 	clz	lr, r2
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000e2a:	fab3 f583 	clz	r5, r3
 8000e2e:	fa92 f2a2 	rbit	r2, r2
 8000e32:	69e0      	ldr	r0, [r4, #28]
 8000e34:	6a23      	ldr	r3, [r4, #32]
 8000e36:	fab2 f182 	clz	r1, r2
 8000e3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e3c:	4303      	orrs	r3, r0
 8000e3e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000e42:	ea43 0002 	orr.w	r0, r3, r2
 8000e46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e48:	085a      	lsrs	r2, r3, #1
 8000e4a:	3a01      	subs	r2, #1
 8000e4c:	fa02 f305 	lsl.w	r3, r2, r5
 8000e50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e52:	4303      	orrs	r3, r0
 8000e54:	408a      	lsls	r2, r1
 8000e56:	4313      	orrs	r3, r2
 8000e58:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e5e:	f000 fc77 	bl	8001750 <HAL_GetTick>
 8000e62:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	019a      	lsls	r2, r3, #6
 8000e68:	d508      	bpl.n	8000e7c <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	e018      	b.n	8000ea0 <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e6e:	f000 fc6f 	bl	8001750 <HAL_GetTick>
 8000e72:	ebc8 0000 	rsb	r0, r8, r0
 8000e76:	2802      	cmp	r0, #2
 8000e78:	d9c7      	bls.n	8000e0a <HAL_RCC_OscConfig+0x216>
 8000e7a:	e6ed      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e7c:	f000 fc68 	bl	8001750 <HAL_GetTick>
 8000e80:	1b00      	subs	r0, r0, r4
 8000e82:	2802      	cmp	r0, #2
 8000e84:	d9ee      	bls.n	8000e64 <HAL_RCC_OscConfig+0x270>
 8000e86:	e6e7      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e88:	f000 fc62 	bl	8001750 <HAL_GetTick>
 8000e8c:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e8e:	682b      	ldr	r3, [r5, #0]
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	d5ea      	bpl.n	8000e6a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e94:	f000 fc5c 	bl	8001750 <HAL_GetTick>
 8000e98:	1b00      	subs	r0, r0, r4
 8000e9a:	2802      	cmp	r0, #2
 8000e9c:	d9f7      	bls.n	8000e8e <HAL_RCC_OscConfig+0x29a>
 8000e9e:	e6db      	b.n	8000c58 <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000ea0:	b002      	add	sp, #8
 8000ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40023802 	.word	0x40023802
 8000eb0:	42470000 	.word	0x42470000
 8000eb4:	42470e80 	.word	0x42470e80
 8000eb8:	40007000 	.word	0x40007000
 8000ebc:	40023870 	.word	0x40023870
 8000ec0:	42470060 	.word	0x42470060

08000ec4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ec4:	491b      	ldr	r1, [pc, #108]	; (8000f34 <HAL_RCC_GetSysClockFreq+0x70>)
 8000ec6:	688b      	ldr	r3, [r1, #8]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d02c      	beq.n	8000f2a <HAL_RCC_GetSysClockFreq+0x66>
 8000ed0:	2b08      	cmp	r3, #8
 8000ed2:	d12c      	bne.n	8000f2e <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ed4:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ed6:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ed8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000edc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000ee0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000ee4:	684b      	ldr	r3, [r1, #4]
 8000ee6:	fa92 f2a2 	rbit	r2, r2
 8000eea:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000eee:	fab2 f282 	clz	r2, r2
 8000ef2:	ea01 0103 	and.w	r1, r1, r3
 8000ef6:	fa21 f102 	lsr.w	r1, r1, r2
 8000efa:	bf14      	ite	ne
 8000efc:	4a0e      	ldrne	r2, [pc, #56]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000efe:	4a0f      	ldreq	r2, [pc, #60]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x78>)
 8000f00:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000f06:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000f0a:	6852      	ldr	r2, [r2, #4]
 8000f0c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000f10:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000f14:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000f18:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000f1c:	fa22 f000 	lsr.w	r0, r2, r0
 8000f20:	3001      	adds	r0, #1
 8000f22:	0040      	lsls	r0, r0, #1
 8000f24:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f28:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x74>)
 8000f2c:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	007a1200 	.word	0x007a1200
 8000f3c:	00f42400 	.word	0x00f42400

08000f40 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f40:	4b55      	ldr	r3, [pc, #340]	; (8001098 <HAL_RCC_ClockConfig+0x158>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	f002 020f 	and.w	r2, r2, #15
 8000f48:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4e:	4605      	mov	r5, r0
 8000f50:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f52:	d30a      	bcc.n	8000f6a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f54:	6829      	ldr	r1, [r5, #0]
 8000f56:	0788      	lsls	r0, r1, #30
 8000f58:	d511      	bpl.n	8000f7e <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f5a:	4850      	ldr	r0, [pc, #320]	; (800109c <HAL_RCC_ClockConfig+0x15c>)
 8000f5c:	6883      	ldr	r3, [r0, #8]
 8000f5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f62:	68ab      	ldr	r3, [r5, #8]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	6083      	str	r3, [r0, #8]
 8000f68:	e009      	b.n	8000f7e <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f6a:	b2ca      	uxtb	r2, r1
 8000f6c:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	4299      	cmp	r1, r3
 8000f76:	d0ed      	beq.n	8000f54 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000f78:	2001      	movs	r0, #1
 8000f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f7e:	07c9      	lsls	r1, r1, #31
 8000f80:	d406      	bmi.n	8000f90 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f82:	4b45      	ldr	r3, [pc, #276]	; (8001098 <HAL_RCC_ClockConfig+0x158>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	f002 020f 	and.w	r2, r2, #15
 8000f8a:	4296      	cmp	r6, r2
 8000f8c:	d351      	bcc.n	8001032 <HAL_RCC_ClockConfig+0xf2>
 8000f8e:	e057      	b.n	8001040 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f90:	686b      	ldr	r3, [r5, #4]
 8000f92:	4a42      	ldr	r2, [pc, #264]	; (800109c <HAL_RCC_ClockConfig+0x15c>)
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d103      	bne.n	8000fa0 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f98:	6812      	ldr	r2, [r2, #0]
 8000f9a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000fa0:	1e99      	subs	r1, r3, #2
 8000fa2:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa4:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000fa6:	d802      	bhi.n	8000fae <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000fac:	e001      	b.n	8000fb2 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fae:	f012 0f02 	tst.w	r2, #2
 8000fb2:	d0e1      	beq.n	8000f78 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fb4:	4c39      	ldr	r4, [pc, #228]	; (800109c <HAL_RCC_ClockConfig+0x15c>)
 8000fb6:	68a2      	ldr	r2, [r4, #8]
 8000fb8:	f022 0203 	bic.w	r2, r2, #3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fc0:	f000 fbc6 	bl	8001750 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fc4:	686b      	ldr	r3, [r5, #4]
 8000fc6:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fc8:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fca:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fce:	d10c      	bne.n	8000fea <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fd0:	68a3      	ldr	r3, [r4, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d0d3      	beq.n	8000f82 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fda:	f000 fbb9 	bl	8001750 <HAL_GetTick>
 8000fde:	1bc0      	subs	r0, r0, r7
 8000fe0:	4540      	cmp	r0, r8
 8000fe2:	d9f5      	bls.n	8000fd0 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d10a      	bne.n	8001004 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fee:	68a3      	ldr	r3, [r4, #8]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d0c4      	beq.n	8000f82 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff8:	f000 fbaa 	bl	8001750 <HAL_GetTick>
 8000ffc:	1bc0      	subs	r0, r0, r7
 8000ffe:	4540      	cmp	r0, r8
 8001000:	d9f5      	bls.n	8000fee <HAL_RCC_ClockConfig+0xae>
 8001002:	e7ef      	b.n	8000fe4 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001004:	2b03      	cmp	r3, #3
 8001006:	d10f      	bne.n	8001028 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001008:	68a3      	ldr	r3, [r4, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b0c      	cmp	r3, #12
 8001010:	d0b7      	beq.n	8000f82 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001012:	f000 fb9d 	bl	8001750 <HAL_GetTick>
 8001016:	1bc0      	subs	r0, r0, r7
 8001018:	4540      	cmp	r0, r8
 800101a:	d9f5      	bls.n	8001008 <HAL_RCC_ClockConfig+0xc8>
 800101c:	e7e2      	b.n	8000fe4 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101e:	f000 fb97 	bl	8001750 <HAL_GetTick>
 8001022:	1bc0      	subs	r0, r0, r7
 8001024:	4540      	cmp	r0, r8
 8001026:	d8dd      	bhi.n	8000fe4 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001028:	68a3      	ldr	r3, [r4, #8]
 800102a:	f013 0f0c 	tst.w	r3, #12
 800102e:	d1f6      	bne.n	800101e <HAL_RCC_ClockConfig+0xde>
 8001030:	e7a7      	b.n	8000f82 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001032:	b2f2      	uxtb	r2, r6
 8001034:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	429e      	cmp	r6, r3
 800103e:	d19b      	bne.n	8000f78 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001040:	6829      	ldr	r1, [r5, #0]
 8001042:	074a      	lsls	r2, r1, #29
 8001044:	d506      	bpl.n	8001054 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001046:	4815      	ldr	r0, [pc, #84]	; (800109c <HAL_RCC_ClockConfig+0x15c>)
 8001048:	6883      	ldr	r3, [r0, #8]
 800104a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800104e:	68eb      	ldr	r3, [r5, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001054:	070b      	lsls	r3, r1, #28
 8001056:	d507      	bpl.n	8001068 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001058:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_RCC_ClockConfig+0x15c>)
 800105a:	6929      	ldr	r1, [r5, #16]
 800105c:	6893      	ldr	r3, [r2, #8]
 800105e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001062:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001066:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001068:	f7ff ff2c 	bl	8000ec4 <HAL_RCC_GetSysClockFreq>
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_RCC_ClockConfig+0x15c>)
 800106e:	22f0      	movs	r2, #240	; 0xf0
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	fa92 f2a2 	rbit	r2, r2
 8001076:	fab2 f282 	clz	r2, r2
 800107a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800107e:	40d3      	lsrs	r3, r2
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_RCC_ClockConfig+0x160>)
 8001082:	5cd3      	ldrb	r3, [r2, r3]
 8001084:	40d8      	lsrs	r0, r3
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <HAL_RCC_ClockConfig+0x164>)
 8001088:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 fb2a 	bl	80016e4 <HAL_InitTick>
  
  return HAL_OK;
 8001090:	2000      	movs	r0, #0
}
 8001092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00
 800109c:	40023800 	.word	0x40023800
 80010a0:	08001890 	.word	0x08001890
 80010a4:	20000000 	.word	0x20000000

080010a8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80010a8:	4b01      	ldr	r3, [pc, #4]	; (80010b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000000 	.word	0x20000000

080010b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010b6:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	fa92 f2a2 	rbit	r2, r2
 80010c0:	fab2 f282 	clz	r2, r2
 80010c4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80010c8:	40d3      	lsrs	r3, r2
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80010cc:	5cd3      	ldrb	r3, [r2, r3]
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80010d0:	6810      	ldr	r0, [r2, #0]
}
 80010d2:	40d8      	lsrs	r0, r3
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	08001890 	.word	0x08001890
 80010e0:	20000000 	.word	0x20000000

080010e4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010e6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	fa92 f2a2 	rbit	r2, r2
 80010f0:	fab2 f282 	clz	r2, r2
 80010f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80010f8:	40d3      	lsrs	r3, r2
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_RCC_GetPCLK2Freq+0x28>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001100:	6810      	ldr	r0, [r2, #0]
} 
 8001102:	40d8      	lsrs	r0, r3
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	08001890 	.word	0x08001890
 8001110:	20000000 	.word	0x20000000

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001118:	4f6a      	ldr	r7, [pc, #424]	; (80012c4 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80012cc <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001120:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80012d0 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 800112c:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800112e:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001130:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001132:	ea34 0303 	bics.w	r3, r4, r3
 8001136:	f040 80bd 	bne.w	80012b4 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113a:	684d      	ldr	r5, [r1, #4]
 800113c:	f025 0a10 	bic.w	sl, r5, #16
 8001140:	f1ba 0f02 	cmp.w	sl, #2
 8001144:	d114      	bne.n	8001170 <HAL_GPIO_Init+0x5c>
 8001146:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 800114a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800114e:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001152:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001156:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800115a:	230f      	movs	r3, #15
 800115c:	fa03 f30b 	lsl.w	r3, r3, fp
 8001160:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001164:	690b      	ldr	r3, [r1, #16]
 8001166:	fa03 f30b 	lsl.w	r3, r3, fp
 800116a:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 800116c:	f8c9 3020 	str.w	r3, [r9, #32]
 8001170:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001174:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001178:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	fa09 f90b 	lsl.w	r9, r9, fp
 800117e:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001182:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118a:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118e:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001192:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001194:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8001198:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800119a:	d80f      	bhi.n	80011bc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119c:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119e:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a0:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a4:	fa06 f60b 	lsl.w	r6, r6, fp
 80011a8:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 80011aa:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ac:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011ae:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b2:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011b6:	4096      	lsls	r6, r2
 80011b8:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80011ba:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011bc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c2:	688b      	ldr	r3, [r1, #8]
 80011c4:	fa03 f30b 	lsl.w	r3, r3, fp
 80011c8:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 80011cc:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ce:	00eb      	lsls	r3, r5, #3
 80011d0:	d570      	bpl.n	80012b4 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	9303      	str	r3, [sp, #12]
 80011d6:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011dc:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80011e0:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 80011e4:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 80011e8:	f022 0903 	bic.w	r9, r2, #3
 80011ec:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 80011f0:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80011f4:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 80011f8:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80011fa:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001200:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001204:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001208:	260f      	movs	r6, #15
 800120a:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001210:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001214:	d01c      	beq.n	8001250 <HAL_GPIO_Init+0x13c>
 8001216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800121a:	4298      	cmp	r0, r3
 800121c:	d01a      	beq.n	8001254 <HAL_GPIO_Init+0x140>
 800121e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001222:	4298      	cmp	r0, r3
 8001224:	d018      	beq.n	8001258 <HAL_GPIO_Init+0x144>
 8001226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800122a:	4298      	cmp	r0, r3
 800122c:	d016      	beq.n	800125c <HAL_GPIO_Init+0x148>
 800122e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001232:	4298      	cmp	r0, r3
 8001234:	d014      	beq.n	8001260 <HAL_GPIO_Init+0x14c>
 8001236:	4540      	cmp	r0, r8
 8001238:	d014      	beq.n	8001264 <HAL_GPIO_Init+0x150>
 800123a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800123e:	4298      	cmp	r0, r3
 8001240:	d012      	beq.n	8001268 <HAL_GPIO_Init+0x154>
 8001242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001246:	4298      	cmp	r0, r3
 8001248:	bf14      	ite	ne
 800124a:	2308      	movne	r3, #8
 800124c:	2307      	moveq	r3, #7
 800124e:	e00c      	b.n	800126a <HAL_GPIO_Init+0x156>
 8001250:	2300      	movs	r3, #0
 8001252:	e00a      	b.n	800126a <HAL_GPIO_Init+0x156>
 8001254:	2301      	movs	r3, #1
 8001256:	e008      	b.n	800126a <HAL_GPIO_Init+0x156>
 8001258:	2302      	movs	r3, #2
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x156>
 800125c:	2303      	movs	r3, #3
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x156>
 8001260:	2304      	movs	r3, #4
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x156>
 8001264:	2305      	movs	r3, #5
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x156>
 8001268:	2306      	movs	r3, #6
 800126a:	fa03 f30a 	lsl.w	r3, r3, sl
 800126e:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001270:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8001276:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001278:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800127c:	bf0c      	ite	eq
 800127e:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001280:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8001282:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001286:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800128a:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800128e:	bf0c      	ite	eq
 8001290:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001292:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8001294:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001298:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800129c:	bf0c      	ite	eq
 800129e:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80012a0:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 80012a2:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80012a6:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012aa:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80012ac:	bf54      	ite	pl
 80012ae:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80012b0:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 80012b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b4:	3201      	adds	r2, #1
 80012b6:	2a10      	cmp	r2, #16
 80012b8:	f47f af38 	bne.w	800112c <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80012bc:	b005      	add	sp, #20
 80012be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012c2:	bf00      	nop
 80012c4:	40013c00 	.word	0x40013c00
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40021400 	.word	0x40021400

080012d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d4:	b902      	cbnz	r2, 80012d8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012d6:	0409      	lsls	r1, r1, #16
 80012d8:	6181      	str	r1, [r0, #24]
 80012da:	4770      	bx	lr

080012dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012dc:	6803      	ldr	r3, [r0, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012e4:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012e8:	2118      	movs	r1, #24
 80012ea:	3a10      	subs	r2, #16
 80012ec:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012f0:	4904      	ldr	r1, [pc, #16]	; (8001304 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80012f2:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012f4:	bf88      	it	hi
 80012f6:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012f8:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012fa:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012fc:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80012fe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	080018a0 	.word	0x080018a0

08001308 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800130c:	f000 fa20 	bl	8001750 <HAL_GetTick>
 8001310:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001312:	2c00      	cmp	r4, #0
 8001314:	d064      	beq.n	80013e0 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001316:	2300      	movs	r3, #0
 8001318:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800131c:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800131e:	2302      	movs	r3, #2
 8001320:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001324:	6813      	ldr	r3, [r2, #0]
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800132c:	6821      	ldr	r1, [r4, #0]
 800132e:	680b      	ldr	r3, [r1, #0]
 8001330:	07d8      	lsls	r0, r3, #31
 8001332:	d508      	bpl.n	8001346 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001334:	f000 fa0c 	bl	8001750 <HAL_GetTick>
 8001338:	1b40      	subs	r0, r0, r5
 800133a:	2805      	cmp	r0, #5
 800133c:	d9f6      	bls.n	800132c <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800133e:	2320      	movs	r3, #32
 8001340:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001342:	2003      	movs	r0, #3
 8001344:	e051      	b.n	80013ea <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001346:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001348:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134a:	6865      	ldr	r5, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134c:	69a0      	ldr	r0, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800134e:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001350:	68a3      	ldr	r3, [r4, #8]
 8001352:	431d      	orrs	r5, r3
 8001354:	68e3      	ldr	r3, [r4, #12]
 8001356:	431d      	orrs	r5, r3
 8001358:	6923      	ldr	r3, [r4, #16]
 800135a:	431d      	orrs	r5, r3
 800135c:	6963      	ldr	r3, [r4, #20]
 800135e:	432b      	orrs	r3, r5
 8001360:	69e5      	ldr	r5, [r4, #28]
 8001362:	4303      	orrs	r3, r0
 8001364:	432b      	orrs	r3, r5
 8001366:	6a25      	ldr	r5, [r4, #32]
 8001368:	432b      	orrs	r3, r5
 800136a:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800136c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800136e:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001370:	bf01      	itttt	eq
 8001372:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8001374:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8001376:	4335      	orreq	r5, r6
 8001378:	432b      	orreq	r3, r5
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800137a:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800137c:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800137e:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001380:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001384:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001388:	d11c      	bne.n	80013c4 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800138a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800138c:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800138e:	b920      	cbnz	r0, 800139a <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 8001390:	2a01      	cmp	r2, #1
 8001392:	d00b      	beq.n	80013ac <HAL_DMA_Init+0xa4>
 8001394:	d313      	bcc.n	80013be <HAL_DMA_Init+0xb6>
 8001396:	2a02      	cmp	r2, #2
 8001398:	e010      	b.n	80013bc <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800139a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800139e:	d10a      	bne.n	80013b6 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 80013a0:	2a03      	cmp	r2, #3
 80013a2:	d80f      	bhi.n	80013c4 <HAL_DMA_Init+0xbc>
 80013a4:	e8df f002 	tbb	[pc, r2]
 80013a8:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013ae:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80013b2:	d107      	bne.n	80013c4 <HAL_DMA_Init+0xbc>
 80013b4:	e016      	b.n	80013e4 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013b6:	2a02      	cmp	r2, #2
 80013b8:	d914      	bls.n	80013e4 <HAL_DMA_Init+0xdc>
 80013ba:	2a03      	cmp	r2, #3
 80013bc:	d102      	bne.n	80013c4 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013c0:	01d2      	lsls	r2, r2, #7
 80013c2:	d40f      	bmi.n	80013e4 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013c4:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013c6:	4620      	mov	r0, r4
 80013c8:	f7ff ff88 	bl	80012dc <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013cc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013ce:	233f      	movs	r3, #63	; 0x3f
 80013d0:	4093      	lsls	r3, r2
 80013d2:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d4:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013d6:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d8:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80013de:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80013e0:	2001      	movs	r0, #1
 80013e2:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013e4:	2340      	movs	r3, #64	; 0x40
 80013e6:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013e8:	2001      	movs	r0, #1
 80013ea:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
 80013f0:	f010803f 	.word	0xf010803f

080013f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f4:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013f6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80013fa:	2c01      	cmp	r4, #1
 80013fc:	d038      	beq.n	8001470 <HAL_DMA_Start_IT+0x7c>
 80013fe:	2401      	movs	r4, #1
 8001400:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001404:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001408:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800140a:	2c01      	cmp	r4, #1
 800140c:	f04f 0500 	mov.w	r5, #0
 8001410:	f04f 0402 	mov.w	r4, #2
 8001414:	d128      	bne.n	8001468 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001416:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800141a:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141c:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800141e:	6825      	ldr	r5, [r4, #0]
 8001420:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001424:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001426:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001428:	6883      	ldr	r3, [r0, #8]
 800142a:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800142c:	bf0e      	itee	eq
 800142e:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001430:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001432:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001434:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001436:	bf08      	it	eq
 8001438:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800143a:	233f      	movs	r3, #63	; 0x3f
 800143c:	4093      	lsls	r3, r2
 800143e:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	f043 0316 	orr.w	r3, r3, #22
 8001446:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001448:	6963      	ldr	r3, [r4, #20]
 800144a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144e:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001450:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001452:	b11b      	cbz	r3, 800145c <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8001464:	2000      	movs	r0, #0
 8001466:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001468:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800146c:	4620      	mov	r0, r4
 800146e:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001470:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8001472:	bd70      	pop	{r4, r5, r6, pc}

08001474 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800147a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 800147c:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800147e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8001480:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8001482:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001484:	2308      	movs	r3, #8
 8001486:	4093      	lsls	r3, r2
 8001488:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800148a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800148c:	d00c      	beq.n	80014a8 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800148e:	6801      	ldr	r1, [r0, #0]
 8001490:	6808      	ldr	r0, [r1, #0]
 8001492:	0740      	lsls	r0, r0, #29
 8001494:	d508      	bpl.n	80014a8 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001496:	6808      	ldr	r0, [r1, #0]
 8001498:	f020 0004 	bic.w	r0, r0, #4
 800149c:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800149e:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a8:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <HAL_DMA_IRQHandler+0x174>)
 80014aa:	4093      	lsls	r3, r2
 80014ac:	421e      	tst	r6, r3
 80014ae:	d008      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014b0:	6821      	ldr	r1, [r4, #0]
 80014b2:	6949      	ldr	r1, [r1, #20]
 80014b4:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014b6:	bf41      	itttt	mi
 80014b8:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ba:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 80014bc:	f043 0302 	orrmi.w	r3, r3, #2
 80014c0:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c2:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <HAL_DMA_IRQHandler+0x178>)
 80014c4:	4093      	lsls	r3, r2
 80014c6:	421e      	tst	r6, r3
 80014c8:	d008      	beq.n	80014dc <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014ca:	6821      	ldr	r1, [r4, #0]
 80014cc:	6809      	ldr	r1, [r1, #0]
 80014ce:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014d0:	bf41      	itttt	mi
 80014d2:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014d4:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 80014d6:	f043 0304 	orrmi.w	r3, r3, #4
 80014da:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014dc:	2310      	movs	r3, #16
 80014de:	fa03 f202 	lsl.w	r2, r3, r2
 80014e2:	4216      	tst	r6, r2
 80014e4:	d017      	beq.n	8001516 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014e6:	6823      	ldr	r3, [r4, #0]
 80014e8:	6819      	ldr	r1, [r3, #0]
 80014ea:	0709      	lsls	r1, r1, #28
 80014ec:	d513      	bpl.n	8001516 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014ee:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	0350      	lsls	r0, r2, #13
 80014f4:	d504      	bpl.n	8001500 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0319      	lsls	r1, r3, #12
 80014fa:	d508      	bpl.n	800150e <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014fe:	e007      	b.n	8001510 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001504:	bf5e      	ittt	pl
 8001506:	681a      	ldrpl	r2, [r3, #0]
 8001508:	f022 0208 	bicpl.w	r2, r2, #8
 800150c:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800150e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001510:	b10b      	cbz	r3, 8001516 <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001512:	4620      	mov	r0, r4
 8001514:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001516:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001518:	2220      	movs	r2, #32
 800151a:	408a      	lsls	r2, r1
 800151c:	4216      	tst	r6, r2
 800151e:	d03b      	beq.n	8001598 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	06c6      	lsls	r6, r0, #27
 8001526:	d537      	bpl.n	8001598 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001528:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800152a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800152e:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001530:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001532:	d119      	bne.n	8001568 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001534:	f022 0216 	bic.w	r2, r2, #22
 8001538:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001540:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001542:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001544:	b90a      	cbnz	r2, 800154a <HAL_DMA_IRQHandler+0xd6>
 8001546:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001548:	b11a      	cbz	r2, 8001552 <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	f022 0208 	bic.w	r2, r2, #8
 8001550:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001552:	233f      	movs	r3, #63	; 0x3f
 8001554:	408b      	lsls	r3, r1
 8001556:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001558:	2300      	movs	r3, #0
 800155a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800155e:	2301      	movs	r3, #1
 8001560:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001564:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001566:	e037      	b.n	80015d8 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001568:	0350      	lsls	r0, r2, #13
 800156a:	d504      	bpl.n	8001576 <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	0319      	lsls	r1, r3, #12
 8001570:	d40e      	bmi.n	8001590 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001572:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001574:	e00d      	b.n	8001592 <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800157c:	d108      	bne.n	8001590 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800157e:	6819      	ldr	r1, [r3, #0]
 8001580:	f021 0110 	bic.w	r1, r1, #16
 8001584:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001586:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001588:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800158c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001592:	b10b      	cbz	r3, 8001598 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001594:	4620      	mov	r0, r4
 8001596:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001598:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800159a:	b303      	cbz	r3, 80015de <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800159c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800159e:	07da      	lsls	r2, r3, #31
 80015a0:	d519      	bpl.n	80015d6 <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015a2:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015a4:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015aa:	6813      	ldr	r3, [r2, #0]
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 80015b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80015b6:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 80015ba:	9b01      	ldr	r3, [sp, #4]
 80015bc:	3301      	adds	r3, #1
 80015be:	429f      	cmp	r7, r3
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	d302      	bcc.n	80015ca <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	07db      	lsls	r3, r3, #31
 80015c8:	d4f7      	bmi.n	80015ba <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ca:	2300      	movs	r3, #0
 80015cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80015d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80015d8:	b10b      	cbz	r3, 80015de <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015da:	4620      	mov	r0, r4
 80015dc:	4798      	blx	r3
    }
  }
}
 80015de:	b003      	add	sp, #12
 80015e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000
 80015e8:	00800001 	.word	0x00800001
 80015ec:	00800004 	.word	0x00800004

080015f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80015f2:	68d3      	ldr	r3, [r2, #12]
 80015f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	0c1b      	lsrs	r3, r3, #16
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001600:	0200      	lsls	r0, r0, #8
 8001602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001606:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800160a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800160c:	60d3      	str	r3, [r2, #12]
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_NVIC_SetPriority+0x60>)
 8001616:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	2c04      	cmp	r4, #4
 8001626:	bf28      	it	cs
 8001628:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	2d06      	cmp	r5, #6

  return (
 800162c:	f04f 0501 	mov.w	r5, #1
 8001630:	fa05 f404 	lsl.w	r4, r5, r4
 8001634:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001638:	bf8c      	ite	hi
 800163a:	3b03      	subhi	r3, #3
 800163c:	2300      	movls	r3, #0

  return (
 800163e:	400c      	ands	r4, r1
 8001640:	409c      	lsls	r4, r3
 8001642:	fa05 f303 	lsl.w	r3, r5, r3
 8001646:	3b01      	subs	r3, #1
 8001648:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800164a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800164c:	ea42 0204 	orr.w	r2, r2, r4
 8001650:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	bfaf      	iteee	ge
 8001656:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	f000 000f 	andlt.w	r0, r0, #15
 800165e:	4b06      	ldrlt	r3, [pc, #24]	; (8001678 <HAL_NVIC_SetPriority+0x64>)
 8001660:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	bfa5      	ittet	ge
 8001664:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001668:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001670:	bd30      	pop	{r4, r5, pc}
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00
 8001678:	e000ed14 	.word	0xe000ed14

0800167c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800167c:	0942      	lsrs	r2, r0, #5
 800167e:	2301      	movs	r3, #1
 8001680:	f000 001f 	and.w	r0, r0, #31
 8001684:	fa03 f000 	lsl.w	r0, r3, r0
 8001688:	4b01      	ldr	r3, [pc, #4]	; (8001690 <HAL_NVIC_EnableIRQ+0x14>)
 800168a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100

08001694 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	3801      	subs	r0, #1
 8001696:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800169a:	d20a      	bcs.n	80016b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a0:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	21f0      	movs	r1, #240	; 0xf0
 80016a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016c2:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80016c4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80016c6:	bf0c      	ite	eq
 80016c8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80016cc:	f022 0204 	bicne.w	r2, r2, #4
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	4770      	bx	lr
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80016d8:	4770      	bx	lr

080016da <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80016da:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80016dc:	f7ff fffc 	bl	80016d8 <HAL_SYSTICK_Callback>
 80016e0:	bd08      	pop	{r3, pc}
	...

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80016f4:	f7ff ffce 	bl	8001694 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	4621      	mov	r1, r4
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f7ff ff88 	bl	8001614 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001704:	2000      	movs	r0, #0
 8001706:	bd10      	pop	{r4, pc}
 8001708:	20000000 	.word	0x20000000

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_Init+0x30>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001716:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800171e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001726:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f7ff ff61 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff ffd8 	bl	80016e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001734:	f7fe fdda 	bl	80002ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001738:	2000      	movs	r0, #0
 800173a:	bd08      	pop	{r3, pc}
 800173c:	40023c00 	.word	0x40023c00

08001740 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001740:	4a02      	ldr	r2, [pc, #8]	; (800174c <HAL_IncTick+0xc>)
 8001742:	6813      	ldr	r3, [r2, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000180 	.word	0x20000180

08001750 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001750:	4b01      	ldr	r3, [pc, #4]	; (8001758 <HAL_GetTick+0x8>)
 8001752:	6818      	ldr	r0, [r3, #0]
}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000180 	.word	0x20000180

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800175c:	b513      	push	{r0, r1, r4, lr}
 800175e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8001760:	f7ff fff6 	bl	8001750 <HAL_GetTick>
 8001764:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001766:	f7ff fff3 	bl	8001750 <HAL_GetTick>
 800176a:	9b01      	ldr	r3, [sp, #4]
 800176c:	1b00      	subs	r0, r0, r4
 800176e:	4298      	cmp	r0, r3
 8001770:	d3f9      	bcc.n	8001766 <HAL_Delay+0xa>
  {
  }
}
 8001772:	b002      	add	sp, #8
 8001774:	bd10      	pop	{r4, pc}
	...

08001778 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001778:	490f      	ldr	r1, [pc, #60]	; (80017b8 <SystemInit+0x40>)
 800177a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800177e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <SystemInit+0x44>)
 8001788:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800178a:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800178c:	f042 0201 	orr.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001792:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800179a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800179e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <SystemInit+0x48>)
 80017a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017aa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017ac:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017b2:	608b      	str	r3, [r1, #8]
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00
 80017bc:	40023800 	.word	0x40023800
 80017c0:	24003010 	.word	0x24003010

080017c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ca:	e003      	b.n	80017d4 <LoopCopyDataInit>

080017cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017d2:	3104      	adds	r1, #4

080017d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017d4:	480b      	ldr	r0, [pc, #44]	; (8001804 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017dc:	d3f6      	bcc.n	80017cc <CopyDataInit>
  ldr  r2, =_sbss
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017e0:	e002      	b.n	80017e8 <LoopFillZerobss>

080017e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017e4:	f842 3b04 	str.w	r3, [r2], #4

080017e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017ec:	d3f9      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ee:	f7ff ffc3 	bl	8001778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f2:	f000 f811 	bl	8001818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f6:	f7fe fdff 	bl	80003f8 <main>
  bx  lr    
 80017fa:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017fc:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001800:	080018b0 	.word	0x080018b0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001808:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800180c:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001810:	20000184 	.word	0x20000184

08001814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC_IRQHandler>
	...

08001818 <__libc_init_array>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <__libc_init_array+0x3c>)
 800181c:	4c0e      	ldr	r4, [pc, #56]	; (8001858 <__libc_init_array+0x40>)
 800181e:	1ae4      	subs	r4, r4, r3
 8001820:	10a4      	asrs	r4, r4, #2
 8001822:	2500      	movs	r5, #0
 8001824:	461e      	mov	r6, r3
 8001826:	42a5      	cmp	r5, r4
 8001828:	d004      	beq.n	8001834 <__libc_init_array+0x1c>
 800182a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800182e:	4798      	blx	r3
 8001830:	3501      	adds	r5, #1
 8001832:	e7f8      	b.n	8001826 <__libc_init_array+0xe>
 8001834:	f000 f816 	bl	8001864 <_init>
 8001838:	4c08      	ldr	r4, [pc, #32]	; (800185c <__libc_init_array+0x44>)
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <__libc_init_array+0x48>)
 800183c:	1ae4      	subs	r4, r4, r3
 800183e:	10a4      	asrs	r4, r4, #2
 8001840:	2500      	movs	r5, #0
 8001842:	461e      	mov	r6, r3
 8001844:	42a5      	cmp	r5, r4
 8001846:	d004      	beq.n	8001852 <__libc_init_array+0x3a>
 8001848:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800184c:	4798      	blx	r3
 800184e:	3501      	adds	r5, #1
 8001850:	e7f8      	b.n	8001844 <__libc_init_array+0x2c>
 8001852:	bd70      	pop	{r4, r5, r6, pc}
 8001854:	080018a8 	.word	0x080018a8
 8001858:	080018a8 	.word	0x080018a8
 800185c:	080018ac 	.word	0x080018ac
 8001860:	080018a8 	.word	0x080018a8

08001864 <_init>:
 8001864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001866:	bf00      	nop
 8001868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186a:	bc08      	pop	{r3}
 800186c:	469e      	mov	lr, r3
 800186e:	4770      	bx	lr

08001870 <_fini>:
 8001870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001872:	bf00      	nop
 8001874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001876:	bc08      	pop	{r3}
 8001878:	469e      	mov	lr, r3
 800187a:	4770      	bx	lr
