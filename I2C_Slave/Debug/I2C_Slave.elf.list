
I2C_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000141c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080015a4  080015a4  000115a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080015c8  080015c8  000115c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080015cc  080015cc  000115cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080015d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          000000d4  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000d8  200000d8  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008f40  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000016f9  00000000  00000000  00028f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000518  00000000  00000000  0002a670  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007a8  00000000  00000000  0002ab88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000361a  00000000  00000000  0002b330  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000229b  00000000  00000000  0002e94a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00030be5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000e04  00000000  00000000  00030c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000043a9  00000000  00000000  00031a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800158c 	.word	0x0800158c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800158c 	.word	0x0800158c

080001c8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80001c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001ca:	f001 f94d 	bl	8001468 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80001d2:	f001 b916 	b.w	8001402 <HAL_SYSTICK_IRQHandler>
	...

080001d8 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80001d8:	4801      	ldr	r0, [pc, #4]	; (80001e0 <DMA1_Stream2_IRQHandler+0x8>)
 80001da:	f000 bfdf 	b.w	800119c <HAL_DMA_IRQHandler>
 80001de:	bf00      	nop
 80001e0:	20000074 	.word	0x20000074

080001e4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80001e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80001e6:	2007      	movs	r0, #7
 80001e8:	f001 f896 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80001ec:	2200      	movs	r2, #0
 80001ee:	4611      	mov	r1, r2
 80001f0:	f06f 000b 	mvn.w	r0, #11
 80001f4:	f001 f8a2 	bl	800133c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80001f8:	2200      	movs	r2, #0
 80001fa:	4611      	mov	r1, r2
 80001fc:	f06f 000a 	mvn.w	r0, #10
 8000200:	f001 f89c 	bl	800133c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000204:	2200      	movs	r2, #0
 8000206:	4611      	mov	r1, r2
 8000208:	f06f 0009 	mvn.w	r0, #9
 800020c:	f001 f896 	bl	800133c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000210:	2200      	movs	r2, #0
 8000212:	4611      	mov	r1, r2
 8000214:	f06f 0004 	mvn.w	r0, #4
 8000218:	f001 f890 	bl	800133c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800021c:	2200      	movs	r2, #0
 800021e:	4611      	mov	r1, r2
 8000220:	f06f 0003 	mvn.w	r0, #3
 8000224:	f001 f88a 	bl	800133c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000228:	2200      	movs	r2, #0
 800022a:	4611      	mov	r1, r2
 800022c:	f06f 0001 	mvn.w	r0, #1
 8000230:	f001 f884 	bl	800133c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000234:	2200      	movs	r2, #0
 8000236:	4611      	mov	r1, r2
 8000238:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800023c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000240:	f001 b87c 	b.w	800133c <HAL_NVIC_SetPriority>

08000244 <HAL_I2C_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 8000248:	6802      	ldr	r2, [r0, #0]
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <HAL_I2C_MspInit+0x9c>)
 800024c:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800024e:	b086      	sub	sp, #24
 8000250:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 8000252:	d142      	bne.n	80002da <HAL_I2C_MspInit+0x96>
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000254:	2404      	movs	r4, #4
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000256:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800025a:	eb0d 0104 	add.w	r1, sp, r4
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800025e:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000262:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000264:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000266:	481f      	ldr	r0, [pc, #124]	; (80002e4 <HAL_I2C_MspInit+0xa0>)
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000268:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800026a:	9405      	str	r4, [sp, #20]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800026c:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000270:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000272:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000274:	f000 fde2 	bl	8000e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000278:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027c:	eb0d 0104 	add.w	r1, sp, r4
 8000280:	4819      	ldr	r0, [pc, #100]	; (80002e8 <HAL_I2C_MspInit+0xa4>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000282:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000284:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000286:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800028a:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800028c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800028e:	f000 fdd5 	bl	8000e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000292:	2300      	movs	r3, #0
 8000294:	4a15      	ldr	r2, [pc, #84]	; (80002ec <HAL_I2C_MspInit+0xa8>)
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	6c11      	ldr	r1, [r2, #64]	; 0x40

    /* Peripheral DMA init*/
  
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 800029a:	4c15      	ldr	r4, [pc, #84]	; (80002f0 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800029c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002a0:	6411      	str	r1, [r2, #64]	; 0x40
 80002a2:	6c12      	ldr	r2, [r2, #64]	; 0x40

    /* Peripheral DMA init*/
  
    hdma_i2c3_rx.Instance = DMA1_Stream2;
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 80002a4:	4913      	ldr	r1, [pc, #76]	; (80002f4 <HAL_I2C_MspInit+0xb0>)
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002a6:	60a3      	str	r3, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80002a8:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80002ac:	9200      	str	r2, [sp, #0]
 80002ae:	9a00      	ldr	r2, [sp, #0]
    /* Peripheral DMA init*/
  
    hdma_i2c3_rx.Instance = DMA1_Stream2;
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80002b0:	60e3      	str	r3, [r4, #12]
    __HAL_RCC_I2C3_CLK_ENABLE();

    /* Peripheral DMA init*/
  
    hdma_i2c3_rx.Instance = DMA1_Stream2;
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 80002b2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80002b6:	e884 0006 	stmia.w	r4, {r1, r2}
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80002ba:	4620      	mov	r0, r4
  
    hdma_i2c3_rx.Instance = DMA1_Stream2;
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80002bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002c0:	6122      	str	r2, [r4, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80002c2:	6163      	str	r3, [r4, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80002c4:	61a3      	str	r3, [r4, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80002c6:	61e3      	str	r3, [r4, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80002c8:	6223      	str	r3, [r4, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80002ca:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80002cc:	f000 feb0 	bl	8001030 <HAL_DMA_Init>
 80002d0:	b108      	cbz	r0, 80002d6 <HAL_I2C_MspInit+0x92>
    {
      Error_Handler();
 80002d2:	f000 f9e5 	bl	80006a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80002d6:	63ac      	str	r4, [r5, #56]	; 0x38
 80002d8:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80002da:	b006      	add	sp, #24
 80002dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002e0:	40005c00 	.word	0x40005c00
 80002e4:	40020800 	.word	0x40020800
 80002e8:	40020000 	.word	0x40020000
 80002ec:	40023800 	.word	0x40023800
 80002f0:	20000074 	.word	0x20000074
 80002f4:	40026040 	.word	0x40026040

080002f8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80002f8:	b510      	push	{r4, lr}
 80002fa:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80002fc:	2300      	movs	r3, #0
 80002fe:	4a27      	ldr	r2, [pc, #156]	; (800039c <SystemClock_Config+0xa4>)
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000304:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000308:	6411      	str	r1, [r2, #64]	; 0x40
 800030a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800030c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000310:	9201      	str	r2, [sp, #4]
 8000312:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000314:	4a22      	ldr	r2, [pc, #136]	; (80003a0 <SystemClock_Config+0xa8>)
 8000316:	9302      	str	r3, [sp, #8]
 8000318:	6811      	ldr	r1, [r2, #0]
 800031a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800031e:	6011      	str	r1, [r2, #0]
 8000320:	6812      	ldr	r2, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000322:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000324:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000328:	2308      	movs	r3, #8
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800032a:	9202      	str	r2, [sp, #8]
 800032c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 800032e:	9310      	str	r3, [sp, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000330:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000332:	23a8      	movs	r3, #168	; 0xa8

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000334:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000338:	9311      	str	r3, [sp, #68]	; 0x44

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800033a:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800033c:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	a808      	add	r0, sp, #32

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000340:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000342:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000344:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000346:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000348:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f000 f9ab 	bl	80006a4 <HAL_RCC_OscConfig>
 800034e:	b100      	cbz	r0, 8000352 <SystemClock_Config+0x5a>
 8000350:	e7fe      	b.n	8000350 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000356:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800035c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800035e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000364:	a803      	add	r0, sp, #12
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000368:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800036a:	f000 fb41 	bl	80009f0 <HAL_RCC_ClockConfig>
 800036e:	4604      	mov	r4, r0
 8000370:	b100      	cbz	r0, 8000374 <SystemClock_Config+0x7c>
 8000372:	e7fe      	b.n	8000372 <SystemClock_Config+0x7a>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000374:	f000 fbf0 	bl	8000b58 <HAL_RCC_GetHCLKFreq>
 8000378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000380:	f001 f81c 	bl	80013bc <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000384:	2004      	movs	r0, #4
 8000386:	f001 f82f 	bl	80013e8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800038a:	4622      	mov	r2, r4
 800038c:	4621      	mov	r1, r4
 800038e:	f04f 30ff 	mov.w	r0, #4294967295
 8000392:	f000 ffd3 	bl	800133c <HAL_NVIC_SetPriority>
}
 8000396:	b014      	add	sp, #80	; 0x50
 8000398:	bd10      	pop	{r4, pc}
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800
 80003a0:	40007000 	.word	0x40007000

080003a4 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80003a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* USER CODE BEGIN 1 */

	HAL_StatusTypeDef rx_status = HAL_ERROR;
	uint8_t rx_data[10] = {10, 10, 10, 10, 10, 10, 10, 10, 10, 10};
 80003a8:	4a90      	ldr	r2, [pc, #576]	; (80005ec <main+0x248>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003aa:	4d91      	ldr	r5, [pc, #580]	; (80005f0 <main+0x24c>)
{

  /* USER CODE BEGIN 1 */

	HAL_StatusTypeDef rx_status = HAL_ERROR;
	uint8_t rx_data[10] = {10, 10, 10, 10, 10, 10, 10, 10, 10, 10};
 80003ac:	6851      	ldr	r1, [r2, #4]
 80003ae:	6810      	ldr	r0, [r2, #0]
 80003b0:	8912      	ldrh	r2, [r2, #8]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80003b2:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8000614 <main+0x270>
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80003b6:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN 1 */

	HAL_StatusTypeDef rx_status = HAL_ERROR;
	uint8_t rx_data[10] = {10, 10, 10, 10, 10, 10, 10, 10, 10, 10};
 80003b8:	ab06      	add	r3, sp, #24
 80003ba:	c303      	stmia	r3!, {r0, r1}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003bc:	2400      	movs	r4, #0
{

  /* USER CODE BEGIN 1 */

	HAL_StatusTypeDef rx_status = HAL_ERROR;
	uint8_t rx_data[10] = {10, 10, 10, 10, 10, 10, 10, 10, 10, 10};
 80003be:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c0:	f001 f838 	bl	8001434 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80003c4:	f7ff ff98 	bl	80002f8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003c8:	9400      	str	r4, [sp, #0]
 80003ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80003cc:	4889      	ldr	r0, [pc, #548]	; (80005f4 <main+0x250>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	632b      	str	r3, [r5, #48]	; 0x30
 80003d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80003d6:	f003 0310 	and.w	r3, r3, #16
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003de:	9401      	str	r4, [sp, #4]
 80003e0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	632b      	str	r3, [r5, #48]	; 0x30
 80003e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80003ea:	f003 0304 	and.w	r3, r3, #4
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003f2:	9402      	str	r4, [sp, #8]
 80003f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80003f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fa:	632b      	str	r3, [r5, #48]	; 0x30
 80003fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80003fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000402:	9302      	str	r3, [sp, #8]
 8000404:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	9403      	str	r4, [sp, #12]
 8000408:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	632b      	str	r3, [r5, #48]	; 0x30
 8000410:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	9303      	str	r3, [sp, #12]
 8000418:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041a:	9404      	str	r4, [sp, #16]
 800041c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	632b      	str	r3, [r5, #48]	; 0x30
 8000424:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	9304      	str	r3, [sp, #16]
 800042c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800042e:	9405      	str	r4, [sp, #20]
 8000430:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	632b      	str	r3, [r5, #48]	; 0x30
 8000438:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800043a:	f003 0308 	and.w	r3, r3, #8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800043e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000440:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000442:	2108      	movs	r1, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000446:	f000 fdd9 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	4611      	mov	r1, r2
 800044e:	486a      	ldr	r0, [pc, #424]	; (80005f8 <main+0x254>)
 8000450:	f000 fdd4 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000454:	4622      	mov	r2, r4
 8000456:	f24f 0110 	movw	r1, #61456	; 0xf010
 800045a:	4868      	ldr	r0, [pc, #416]	; (80005fc <main+0x258>)
 800045c:	f000 fdce 	bl	8000ffc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	2701      	movs	r7, #1
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000462:	2608      	movs	r6, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000464:	a909      	add	r1, sp, #36	; 0x24
 8000466:	4863      	ldr	r0, [pc, #396]	; (80005f4 <main+0x250>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000468:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046e:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000470:	f000 fce4 	bl	8000e3c <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000474:	a909      	add	r1, sp, #36	; 0x24
 8000476:	4860      	ldr	r0, [pc, #384]	; (80005f8 <main+0x254>)
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	940b      	str	r4, [sp, #44]	; 0x2c
  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800047a:	f04f 0805 	mov.w	r8, #5

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000480:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000484:	f000 fcda 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000488:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800048a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048c:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800048e:	485a      	ldr	r0, [pc, #360]	; (80005f8 <main+0x254>)
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000494:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000498:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800049a:	f000 fccf 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800049e:	a909      	add	r1, sp, #36	; 0x24
 80004a0:	4857      	ldr	r0, [pc, #348]	; (8000600 <main+0x25c>)
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	940b      	str	r4, [sp, #44]	; 0x2c
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80004a4:	f04f 0b06 	mov.w	fp, #6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004a8:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004aa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ae:	f000 fcc5 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004b2:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	a909      	add	r1, sp, #36	; 0x24
 80004b6:	4852      	ldr	r0, [pc, #328]	; (8000600 <main+0x25c>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004b8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004be:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80004c0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f000 fcba 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004c8:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	a909      	add	r1, sp, #36	; 0x24
 80004cc:	484c      	ldr	r0, [pc, #304]	; (8000600 <main+0x25c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004ce:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004d4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80004d8:	f04f 0a04 	mov.w	sl, #4
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f000 fcad 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80004e2:	a909      	add	r1, sp, #36	; 0x24
 80004e4:	4847      	ldr	r0, [pc, #284]	; (8000604 <main+0x260>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80004ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80004ee:	f000 fca5 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80004f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80004f6:	a909      	add	r1, sp, #36	; 0x24
 80004f8:	4842      	ldr	r0, [pc, #264]	; (8000604 <main+0x260>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80004fa:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000500:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000504:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000506:	f000 fc99 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800050a:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800050e:	a909      	add	r1, sp, #36	; 0x24
 8000510:	483a      	ldr	r0, [pc, #232]	; (80005fc <main+0x258>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000512:	9309      	str	r3, [sp, #36]	; 0x24
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	940c      	str	r4, [sp, #48]	; 0x30

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800051a:	f000 fc8f 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 I2S3_SCK_Pin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 800051e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000522:	a909      	add	r1, sp, #36	; 0x24
 8000524:	4834      	ldr	r0, [pc, #208]	; (80005f8 <main+0x254>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PC7 I2S3_SCK_Pin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 8000526:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PC7 I2S3_SCK_Pin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800052e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000532:	f000 fc83 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000536:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800053a:	a909      	add	r1, sp, #36	; 0x24
 800053c:	4830      	ldr	r0, [pc, #192]	; (8000600 <main+0x25c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800053e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000540:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	940b      	str	r4, [sp, #44]	; 0x2c
  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000544:	f04f 080a 	mov.w	r8, #10

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000548:	f000 fc78 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800054c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	a909      	add	r1, sp, #36	; 0x24
 8000552:	482b      	ldr	r0, [pc, #172]	; (8000600 <main+0x25c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000554:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800055c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f000 fc6c 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000564:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000566:	a909      	add	r1, sp, #36	; 0x24
 8000568:	4824      	ldr	r0, [pc, #144]	; (80005fc <main+0x258>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800056a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000570:	f000 fc64 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000574:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000578:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057c:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057e:	4821      	ldr	r0, [pc, #132]	; (8000604 <main+0x260>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000580:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000584:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000586:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058a:	f000 fc57 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800058e:	a909      	add	r1, sp, #36	; 0x24
 8000590:	4818      	ldr	r0, [pc, #96]	; (80005f4 <main+0x250>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000594:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000596:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800059a:	f000 fc4f 	bl	8000e3c <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	9409      	str	r4, [sp, #36]	; 0x24
 80005a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a6:	632b      	str	r3, [r5, #48]	; 0x30
 80005a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30

/* I2C3 init function */
static void MX_I2C3_Init(void)
{

  hi2c3.Instance = I2C3;
 80005aa:	4d17      	ldr	r5, [pc, #92]	; (8000608 <main+0x264>)
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80005b0:	4622      	mov	r2, r4
 80005b2:	4621      	mov	r1, r4
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b4:	9309      	str	r3, [sp, #36]	; 0x24

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80005b6:	200d      	movs	r0, #13
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b8:	9b09      	ldr	r3, [sp, #36]	; 0x24

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80005ba:	f000 febf 	bl	800133c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80005be:	200d      	movs	r0, #13
 80005c0:	f000 fef0 	bl	80013a4 <HAL_NVIC_EnableIRQ>
/* I2C3 init function */
static void MX_I2C3_Init(void)
{

  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
 80005c4:	4a11      	ldr	r2, [pc, #68]	; (800060c <main+0x268>)
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <main+0x26c>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c8:	60ac      	str	r4, [r5, #8]
/* I2C3 init function */
static void MX_I2C3_Init(void)
{

  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
 80005ca:	e885 000c 	stmia.w	r5, {r2, r3}
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0x33;
 80005ce:	2333      	movs	r3, #51	; 0x33
 80005d0:	60eb      	str	r3, [r5, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80005d2:	4628      	mov	r0, r5

  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0x33;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d8:	616c      	str	r4, [r5, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80005da:	61ac      	str	r4, [r5, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005dc:	61ec      	str	r4, [r5, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005de:	622c      	str	r4, [r5, #32]

  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0x33;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e0:	612b      	str	r3, [r5, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80005e2:	f000 fad7 	bl	8000b94 <HAL_I2C_Init>
 80005e6:	4604      	mov	r4, r0
 80005e8:	b1b0      	cbz	r0, 8000618 <main+0x274>
 80005ea:	e7fe      	b.n	80005ea <main+0x246>
 80005ec:	080015a4 	.word	0x080015a4
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40020800 	.word	0x40020800
 80005fc:	40020c00 	.word	0x40020c00
 8000600:	40020000 	.word	0x40020000
 8000604:	40020400 	.word	0x40020400
 8000608:	20000020 	.word	0x20000020
 800060c:	40005c00 	.word	0x40005c00
 8000610:	000186a0 	.word	0x000186a0
 8000614:	10120000 	.word	0x10120000
  MX_DMA_Init();
  MX_I2C3_Init();

  /* USER CODE BEGIN 2 */

  rx_status = HAL_I2C_Slave_Receive_DMA(&hi2c3, rx_data, 10);
 8000618:	4642      	mov	r2, r8
 800061a:	a906      	add	r1, sp, #24
 800061c:	4628      	mov	r0, r5
 800061e:	f000 fb27 	bl	8000c70 <HAL_I2C_Slave_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		i %= 10;
 8000622:	4646      	mov	r6, r8
 8000624:	fbb4 f3f6 	udiv	r3, r4, r6
 8000628:	fb06 4413 	mls	r4, r6, r3, r4
 800062c:	b2e4      	uxtb	r4, r4
		uint8_t temp = rx_data[i];
 800062e:	ab0e      	add	r3, sp, #56	; 0x38
 8000630:	4423      	add	r3, r4
		if(temp / 8 == 1)
			HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
		else
			HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
 8000632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		i %= 10;
		uint8_t temp = rx_data[i];
 8000636:	f813 5c20 	ldrb.w	r5, [r3, #-32]
		if(temp / 8 == 1)
			HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
		else
			HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
 800063a:	4818      	ldr	r0, [pc, #96]	; (800069c <main+0x2f8>)
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		i %= 10;
		uint8_t temp = rx_data[i];
		if(temp / 8 == 1)
 800063c:	f1a5 0308 	sub.w	r3, r5, #8
 8000640:	2b07      	cmp	r3, #7
			HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 8000642:	bf94      	ite	ls
 8000644:	2201      	movls	r2, #1
		else
			HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movhi	r2, #0
 8000648:	f000 fcd8 	bl	8000ffc <HAL_GPIO_WritePin>
		temp %= 8;

		if(temp / 4 == 1)
 800064c:	f005 0307 	and.w	r3, r5, #7
 8000650:	3b04      	subs	r3, #4
 8000652:	2b03      	cmp	r3, #3
			HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 8000654:	bf94      	ite	ls
 8000656:	2201      	movls	r2, #1
		else
			HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movhi	r2, #0
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <main+0x2f8>)
 8000660:	f000 fccc 	bl	8000ffc <HAL_GPIO_WritePin>
		temp %= 4;

		if(temp / 2 == 1)
 8000664:	f005 0303 	and.w	r3, r5, #3
 8000668:	3b02      	subs	r3, #2
 800066a:	2b01      	cmp	r3, #1
			HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 800066c:	bf94      	ite	ls
 800066e:	2201      	movls	r2, #1
		else
			HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movhi	r2, #0
 8000672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <main+0x2f8>)
 8000678:	f000 fcc0 	bl	8000ffc <HAL_GPIO_WritePin>
		temp %= 2;

		if(temp == 1)
 800067c:	f015 0201 	ands.w	r2, r5, #1
			HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
		else
			HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8000680:	bf08      	it	eq
 8000682:	2200      	moveq	r2, #0
 8000684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <main+0x2f8>)
 800068a:	f000 fcb7 	bl	8000ffc <HAL_GPIO_WritePin>

		i++;
 800068e:	3401      	adds	r4, #1

		HAL_Delay(500u);
 8000690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		if(temp == 1)
			HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
		else
			HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);

		i++;
 8000694:	b2e4      	uxtb	r4, r4

		HAL_Delay(500u);
 8000696:	f000 fef5 	bl	8001484 <HAL_Delay>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
 800069a:	e7c3      	b.n	8000624 <main+0x280>
 800069c:	40020c00 	.word	0x40020c00

080006a0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler>
	...

080006a4 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006a4:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80006aa:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006ac:	07d8      	lsls	r0, r3, #31
 80006ae:	d403      	bmi.n	80006b8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006b0:	6823      	ldr	r3, [r4, #0]
 80006b2:	0799      	lsls	r1, r3, #30
 80006b4:	d437      	bmi.n	8000726 <HAL_RCC_OscConfig+0x82>
 80006b6:	e087      	b.n	80007c8 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80006b8:	4ba7      	ldr	r3, [pc, #668]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	f002 020c 	and.w	r2, r2, #12
 80006c0:	2a04      	cmp	r2, #4
 80006c2:	d007      	beq.n	80006d4 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80006c4:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80006c6:	f002 020c 	and.w	r2, r2, #12
 80006ca:	2a08      	cmp	r2, #8
 80006cc:	d10b      	bne.n	80006e6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	025a      	lsls	r2, r3, #9
 80006d2:	d508      	bpl.n	80006e6 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006d4:	4ba0      	ldr	r3, [pc, #640]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	039b      	lsls	r3, r3, #14
 80006da:	d5e9      	bpl.n	80006b0 <HAL_RCC_OscConfig+0xc>
 80006dc:	6863      	ldr	r3, [r4, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1e6      	bne.n	80006b0 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80006e2:	2001      	movs	r0, #1
 80006e4:	e134      	b.n	8000950 <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006e6:	4b9d      	ldr	r3, [pc, #628]	; (800095c <HAL_RCC_OscConfig+0x2b8>)
 80006e8:	7922      	ldrb	r2, [r4, #4]
 80006ea:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80006ec:	6863      	ldr	r3, [r4, #4]
 80006ee:	b16b      	cbz	r3, 800070c <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80006f0:	f000 fec2 	bl	8001478 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006f4:	4d98      	ldr	r5, [pc, #608]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80006f6:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006f8:	682b      	ldr	r3, [r5, #0]
 80006fa:	039f      	lsls	r7, r3, #14
 80006fc:	d4d8      	bmi.n	80006b0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006fe:	f000 febb 	bl	8001478 <HAL_GetTick>
 8000702:	1b80      	subs	r0, r0, r6
 8000704:	2864      	cmp	r0, #100	; 0x64
 8000706:	d9f7      	bls.n	80006f8 <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 8000708:	2003      	movs	r0, #3
 800070a:	e121      	b.n	8000950 <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800070c:	f000 feb4 	bl	8001478 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000710:	4d91      	ldr	r5, [pc, #580]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000712:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000714:	682b      	ldr	r3, [r5, #0]
 8000716:	0398      	lsls	r0, r3, #14
 8000718:	d5ca      	bpl.n	80006b0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800071a:	f000 fead 	bl	8001478 <HAL_GetTick>
 800071e:	1b80      	subs	r0, r0, r6
 8000720:	2864      	cmp	r0, #100	; 0x64
 8000722:	d9f7      	bls.n	8000714 <HAL_RCC_OscConfig+0x70>
 8000724:	e7f0      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000726:	4b8c      	ldr	r3, [pc, #560]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
 8000728:	689a      	ldr	r2, [r3, #8]
 800072a:	f012 0f0c 	tst.w	r2, #12
 800072e:	d007      	beq.n	8000740 <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000730:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000732:	f002 020c 	and.w	r2, r2, #12
 8000736:	2a08      	cmp	r2, #8
 8000738:	d117      	bne.n	800076a <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	0259      	lsls	r1, r3, #9
 800073e:	d414      	bmi.n	800076a <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000740:	4b85      	ldr	r3, [pc, #532]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	0792      	lsls	r2, r2, #30
 8000746:	d502      	bpl.n	800074e <HAL_RCC_OscConfig+0xaa>
 8000748:	68e2      	ldr	r2, [r4, #12]
 800074a:	2a01      	cmp	r2, #1
 800074c:	d1c9      	bne.n	80006e2 <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800074e:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000750:	21f8      	movs	r1, #248	; 0xf8
 8000752:	fa91 f1a1 	rbit	r1, r1
 8000756:	6920      	ldr	r0, [r4, #16]
 8000758:	fab1 f181 	clz	r1, r1
 800075c:	fa00 f101 	lsl.w	r1, r0, r1
 8000760:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000764:	430a      	orrs	r2, r1
 8000766:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000768:	e02e      	b.n	80007c8 <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800076a:	68e2      	ldr	r2, [r4, #12]
 800076c:	4b7c      	ldr	r3, [pc, #496]	; (8000960 <HAL_RCC_OscConfig+0x2bc>)
 800076e:	b1ea      	cbz	r2, 80007ac <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000774:	f000 fe80 	bl	8001478 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000778:	4d77      	ldr	r5, [pc, #476]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800077a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800077c:	682b      	ldr	r3, [r5, #0]
 800077e:	4876      	ldr	r0, [pc, #472]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
 8000780:	079b      	lsls	r3, r3, #30
 8000782:	d405      	bmi.n	8000790 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000784:	f000 fe78 	bl	8001478 <HAL_GetTick>
 8000788:	1b80      	subs	r0, r0, r6
 800078a:	2802      	cmp	r0, #2
 800078c:	d9f6      	bls.n	800077c <HAL_RCC_OscConfig+0xd8>
 800078e:	e7bb      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000790:	6803      	ldr	r3, [r0, #0]
 8000792:	22f8      	movs	r2, #248	; 0xf8
 8000794:	fa92 f2a2 	rbit	r2, r2
 8000798:	6921      	ldr	r1, [r4, #16]
 800079a:	fab2 f282 	clz	r2, r2
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007a6:	4313      	orrs	r3, r2
 80007a8:	6003      	str	r3, [r0, #0]
 80007aa:	e00d      	b.n	80007c8 <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80007ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007ae:	f000 fe63 	bl	8001478 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007b2:	4d69      	ldr	r5, [pc, #420]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007b4:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007b6:	682b      	ldr	r3, [r5, #0]
 80007b8:	079f      	lsls	r7, r3, #30
 80007ba:	d505      	bpl.n	80007c8 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007bc:	f000 fe5c 	bl	8001478 <HAL_GetTick>
 80007c0:	1b80      	subs	r0, r0, r6
 80007c2:	2802      	cmp	r0, #2
 80007c4:	d9f7      	bls.n	80007b6 <HAL_RCC_OscConfig+0x112>
 80007c6:	e79f      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	071e      	lsls	r6, r3, #28
 80007cc:	d403      	bmi.n	80007d6 <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	075d      	lsls	r5, r3, #29
 80007d2:	d545      	bpl.n	8000860 <HAL_RCC_OscConfig+0x1bc>
 80007d4:	e01f      	b.n	8000816 <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80007d6:	6962      	ldr	r2, [r4, #20]
 80007d8:	4b62      	ldr	r3, [pc, #392]	; (8000964 <HAL_RCC_OscConfig+0x2c0>)
 80007da:	b172      	cbz	r2, 80007fa <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80007dc:	2201      	movs	r2, #1
 80007de:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80007e0:	f000 fe4a 	bl	8001478 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007e4:	4d5c      	ldr	r5, [pc, #368]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80007e6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007e8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80007ea:	0798      	lsls	r0, r3, #30
 80007ec:	d4ef      	bmi.n	80007ce <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ee:	f000 fe43 	bl	8001478 <HAL_GetTick>
 80007f2:	1b80      	subs	r0, r0, r6
 80007f4:	2802      	cmp	r0, #2
 80007f6:	d9f7      	bls.n	80007e8 <HAL_RCC_OscConfig+0x144>
 80007f8:	e786      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80007fa:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80007fc:	f000 fe3c 	bl	8001478 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000800:	4d55      	ldr	r5, [pc, #340]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000802:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000804:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000806:	0799      	lsls	r1, r3, #30
 8000808:	d5e1      	bpl.n	80007ce <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800080a:	f000 fe35 	bl	8001478 <HAL_GetTick>
 800080e:	1b80      	subs	r0, r0, r6
 8000810:	2802      	cmp	r0, #2
 8000812:	d9f7      	bls.n	8000804 <HAL_RCC_OscConfig+0x160>
 8000814:	e778      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	4b4f      	ldr	r3, [pc, #316]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800081c:	4d52      	ldr	r5, [pc, #328]	; (8000968 <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000820:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000830:	682b      	ldr	r3, [r5, #0]
 8000832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000836:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000838:	f000 fe1e 	bl	8001478 <HAL_GetTick>
 800083c:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800083e:	682b      	ldr	r3, [r5, #0]
 8000840:	05da      	lsls	r2, r3, #23
 8000842:	d510      	bpl.n	8000866 <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000844:	4b49      	ldr	r3, [pc, #292]	; (800096c <HAL_RCC_OscConfig+0x2c8>)
 8000846:	7a22      	ldrb	r2, [r4, #8]
 8000848:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800084a:	68a3      	ldr	r3, [r4, #8]
 800084c:	b1bb      	cbz	r3, 800087e <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800084e:	f000 fe13 	bl	8001478 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000852:	4d41      	ldr	r5, [pc, #260]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000854:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000856:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800085a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800085c:	079b      	lsls	r3, r3, #30
 800085e:	d508      	bpl.n	8000872 <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000860:	69a2      	ldr	r2, [r4, #24]
 8000862:	b9da      	cbnz	r2, 800089c <HAL_RCC_OscConfig+0x1f8>
 8000864:	e059      	b.n	800091a <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000866:	f000 fe07 	bl	8001478 <HAL_GetTick>
 800086a:	1b80      	subs	r0, r0, r6
 800086c:	2802      	cmp	r0, #2
 800086e:	d9e6      	bls.n	800083e <HAL_RCC_OscConfig+0x19a>
 8000870:	e74a      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000872:	f000 fe01 	bl	8001478 <HAL_GetTick>
 8000876:	1b80      	subs	r0, r0, r6
 8000878:	42b8      	cmp	r0, r7
 800087a:	d9ee      	bls.n	800085a <HAL_RCC_OscConfig+0x1b6>
 800087c:	e744      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800087e:	f000 fdfb 	bl	8001478 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000882:	4d35      	ldr	r5, [pc, #212]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000884:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000886:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800088a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800088c:	0798      	lsls	r0, r3, #30
 800088e:	d5e7      	bpl.n	8000860 <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000890:	f000 fdf2 	bl	8001478 <HAL_GetTick>
 8000894:	1b80      	subs	r0, r0, r6
 8000896:	42b8      	cmp	r0, r7
 8000898:	d9f7      	bls.n	800088a <HAL_RCC_OscConfig+0x1e6>
 800089a:	e735      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800089c:	4d2e      	ldr	r5, [pc, #184]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
 800089e:	68ab      	ldr	r3, [r5, #8]
 80008a0:	f003 030c 	and.w	r3, r3, #12
 80008a4:	2b08      	cmp	r3, #8
 80008a6:	f43f af1c 	beq.w	80006e2 <HAL_RCC_OscConfig+0x3e>
 80008aa:	4e31      	ldr	r6, [pc, #196]	; (8000970 <HAL_RCC_OscConfig+0x2cc>)
 80008ac:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008ae:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80008b0:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008b2:	d141      	bne.n	8000938 <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008b4:	f000 fde0 	bl	8001478 <HAL_GetTick>
 80008b8:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80008ba:	682b      	ldr	r3, [r5, #0]
 80008bc:	4f26      	ldr	r7, [pc, #152]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)
 80008be:	0199      	lsls	r1, r3, #6
 80008c0:	d42d      	bmi.n	800091e <HAL_RCC_OscConfig+0x27a>
 80008c2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80008c6:	fa92 f2a2 	rbit	r2, r2
 80008ca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80008ce:	fab2 fe82 	clz	lr, r2
 80008d2:	fa93 f3a3 	rbit	r3, r3
 80008d6:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80008da:	fab3 f583 	clz	r5, r3
 80008de:	fa92 f2a2 	rbit	r2, r2
 80008e2:	69e0      	ldr	r0, [r4, #28]
 80008e4:	6a23      	ldr	r3, [r4, #32]
 80008e6:	fab2 f182 	clz	r1, r2
 80008ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008ec:	4303      	orrs	r3, r0
 80008ee:	fa02 f20e 	lsl.w	r2, r2, lr
 80008f2:	ea43 0002 	orr.w	r0, r3, r2
 80008f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008f8:	085a      	lsrs	r2, r3, #1
 80008fa:	3a01      	subs	r2, #1
 80008fc:	fa02 f305 	lsl.w	r3, r2, r5
 8000900:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000902:	4303      	orrs	r3, r0
 8000904:	408a      	lsls	r2, r1
 8000906:	4313      	orrs	r3, r2
 8000908:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800090a:	2301      	movs	r3, #1
 800090c:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800090e:	f000 fdb3 	bl	8001478 <HAL_GetTick>
 8000912:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	019a      	lsls	r2, r3, #6
 8000918:	d508      	bpl.n	800092c <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800091a:	2000      	movs	r0, #0
 800091c:	e018      	b.n	8000950 <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800091e:	f000 fdab 	bl	8001478 <HAL_GetTick>
 8000922:	ebc8 0000 	rsb	r0, r8, r0
 8000926:	2802      	cmp	r0, #2
 8000928:	d9c7      	bls.n	80008ba <HAL_RCC_OscConfig+0x216>
 800092a:	e6ed      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800092c:	f000 fda4 	bl	8001478 <HAL_GetTick>
 8000930:	1b00      	subs	r0, r0, r4
 8000932:	2802      	cmp	r0, #2
 8000934:	d9ee      	bls.n	8000914 <HAL_RCC_OscConfig+0x270>
 8000936:	e6e7      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000938:	f000 fd9e 	bl	8001478 <HAL_GetTick>
 800093c:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800093e:	682b      	ldr	r3, [r5, #0]
 8000940:	019b      	lsls	r3, r3, #6
 8000942:	d5ea      	bpl.n	800091a <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000944:	f000 fd98 	bl	8001478 <HAL_GetTick>
 8000948:	1b00      	subs	r0, r0, r4
 800094a:	2802      	cmp	r0, #2
 800094c:	d9f7      	bls.n	800093e <HAL_RCC_OscConfig+0x29a>
 800094e:	e6db      	b.n	8000708 <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000950:	b002      	add	sp, #8
 8000952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40023802 	.word	0x40023802
 8000960:	42470000 	.word	0x42470000
 8000964:	42470e80 	.word	0x42470e80
 8000968:	40007000 	.word	0x40007000
 800096c:	40023870 	.word	0x40023870
 8000970:	42470060 	.word	0x42470060

08000974 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000974:	491b      	ldr	r1, [pc, #108]	; (80009e4 <HAL_RCC_GetSysClockFreq+0x70>)
 8000976:	688b      	ldr	r3, [r1, #8]
 8000978:	f003 030c 	and.w	r3, r3, #12
 800097c:	2b04      	cmp	r3, #4
 800097e:	d02c      	beq.n	80009da <HAL_RCC_GetSysClockFreq+0x66>
 8000980:	2b08      	cmp	r3, #8
 8000982:	d12c      	bne.n	80009de <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000984:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000986:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000988:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800098c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000990:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000994:	684b      	ldr	r3, [r1, #4]
 8000996:	fa92 f2a2 	rbit	r2, r2
 800099a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800099e:	fab2 f282 	clz	r2, r2
 80009a2:	ea01 0103 	and.w	r1, r1, r3
 80009a6:	fa21 f102 	lsr.w	r1, r1, r2
 80009aa:	bf14      	ite	ne
 80009ac:	4a0e      	ldrne	r2, [pc, #56]	; (80009e8 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80009ae:	4a0f      	ldreq	r2, [pc, #60]	; (80009ec <HAL_RCC_GetSysClockFreq+0x78>)
 80009b0:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80009b4:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80009b6:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80009ba:	6852      	ldr	r2, [r2, #4]
 80009bc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80009c0:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80009c4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80009c8:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80009cc:	fa22 f000 	lsr.w	r0, r2, r0
 80009d0:	3001      	adds	r0, #1
 80009d2:	0040      	lsls	r0, r0, #1
 80009d4:	fbb3 f0f0 	udiv	r0, r3, r0
 80009d8:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80009da:	4803      	ldr	r0, [pc, #12]	; (80009e8 <HAL_RCC_GetSysClockFreq+0x74>)
 80009dc:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	007a1200 	.word	0x007a1200
 80009ec:	00f42400 	.word	0x00f42400

080009f0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009f0:	4b55      	ldr	r3, [pc, #340]	; (8000b48 <HAL_RCC_ClockConfig+0x158>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	f002 020f 	and.w	r2, r2, #15
 80009f8:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009fe:	4605      	mov	r5, r0
 8000a00:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a02:	d30a      	bcc.n	8000a1a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a04:	6829      	ldr	r1, [r5, #0]
 8000a06:	0788      	lsls	r0, r1, #30
 8000a08:	d511      	bpl.n	8000a2e <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a0a:	4850      	ldr	r0, [pc, #320]	; (8000b4c <HAL_RCC_ClockConfig+0x15c>)
 8000a0c:	6883      	ldr	r3, [r0, #8]
 8000a0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a12:	68ab      	ldr	r3, [r5, #8]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	6083      	str	r3, [r0, #8]
 8000a18:	e009      	b.n	8000a2e <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a1a:	b2ca      	uxtb	r2, r1
 8000a1c:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f003 030f 	and.w	r3, r3, #15
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d0ed      	beq.n	8000a04 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000a28:	2001      	movs	r0, #1
 8000a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a2e:	07c9      	lsls	r1, r1, #31
 8000a30:	d406      	bmi.n	8000a40 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a32:	4b45      	ldr	r3, [pc, #276]	; (8000b48 <HAL_RCC_ClockConfig+0x158>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	f002 020f 	and.w	r2, r2, #15
 8000a3a:	4296      	cmp	r6, r2
 8000a3c:	d351      	bcc.n	8000ae2 <HAL_RCC_ClockConfig+0xf2>
 8000a3e:	e057      	b.n	8000af0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a40:	686b      	ldr	r3, [r5, #4]
 8000a42:	4a42      	ldr	r2, [pc, #264]	; (8000b4c <HAL_RCC_ClockConfig+0x15c>)
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d103      	bne.n	8000a50 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000a4e:	e008      	b.n	8000a62 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000a50:	1e99      	subs	r1, r3, #2
 8000a52:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a54:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000a56:	d802      	bhi.n	8000a5e <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a58:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000a5c:	e001      	b.n	8000a62 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a5e:	f012 0f02 	tst.w	r2, #2
 8000a62:	d0e1      	beq.n	8000a28 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a64:	4c39      	ldr	r4, [pc, #228]	; (8000b4c <HAL_RCC_ClockConfig+0x15c>)
 8000a66:	68a2      	ldr	r2, [r4, #8]
 8000a68:	f022 0203 	bic.w	r2, r2, #3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000a70:	f000 fd02 	bl	8001478 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a74:	686b      	ldr	r3, [r5, #4]
 8000a76:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000a78:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a7a:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a7e:	d10c      	bne.n	8000a9a <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a80:	68a3      	ldr	r3, [r4, #8]
 8000a82:	f003 030c 	and.w	r3, r3, #12
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d0d3      	beq.n	8000a32 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a8a:	f000 fcf5 	bl	8001478 <HAL_GetTick>
 8000a8e:	1bc0      	subs	r0, r0, r7
 8000a90:	4540      	cmp	r0, r8
 8000a92:	d9f5      	bls.n	8000a80 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000a94:	2003      	movs	r0, #3
 8000a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d10a      	bne.n	8000ab4 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a9e:	68a3      	ldr	r3, [r4, #8]
 8000aa0:	f003 030c 	and.w	r3, r3, #12
 8000aa4:	2b08      	cmp	r3, #8
 8000aa6:	d0c4      	beq.n	8000a32 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa8:	f000 fce6 	bl	8001478 <HAL_GetTick>
 8000aac:	1bc0      	subs	r0, r0, r7
 8000aae:	4540      	cmp	r0, r8
 8000ab0:	d9f5      	bls.n	8000a9e <HAL_RCC_ClockConfig+0xae>
 8000ab2:	e7ef      	b.n	8000a94 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d10f      	bne.n	8000ad8 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000ab8:	68a3      	ldr	r3, [r4, #8]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	2b0c      	cmp	r3, #12
 8000ac0:	d0b7      	beq.n	8000a32 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac2:	f000 fcd9 	bl	8001478 <HAL_GetTick>
 8000ac6:	1bc0      	subs	r0, r0, r7
 8000ac8:	4540      	cmp	r0, r8
 8000aca:	d9f5      	bls.n	8000ab8 <HAL_RCC_ClockConfig+0xc8>
 8000acc:	e7e2      	b.n	8000a94 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ace:	f000 fcd3 	bl	8001478 <HAL_GetTick>
 8000ad2:	1bc0      	subs	r0, r0, r7
 8000ad4:	4540      	cmp	r0, r8
 8000ad6:	d8dd      	bhi.n	8000a94 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ad8:	68a3      	ldr	r3, [r4, #8]
 8000ada:	f013 0f0c 	tst.w	r3, #12
 8000ade:	d1f6      	bne.n	8000ace <HAL_RCC_ClockConfig+0xde>
 8000ae0:	e7a7      	b.n	8000a32 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ae2:	b2f2      	uxtb	r2, r6
 8000ae4:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	429e      	cmp	r6, r3
 8000aee:	d19b      	bne.n	8000a28 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000af0:	6829      	ldr	r1, [r5, #0]
 8000af2:	074a      	lsls	r2, r1, #29
 8000af4:	d506      	bpl.n	8000b04 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000af6:	4815      	ldr	r0, [pc, #84]	; (8000b4c <HAL_RCC_ClockConfig+0x15c>)
 8000af8:	6883      	ldr	r3, [r0, #8]
 8000afa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000afe:	68eb      	ldr	r3, [r5, #12]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b04:	070b      	lsls	r3, r1, #28
 8000b06:	d507      	bpl.n	8000b18 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b08:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_RCC_ClockConfig+0x15c>)
 8000b0a:	6929      	ldr	r1, [r5, #16]
 8000b0c:	6893      	ldr	r3, [r2, #8]
 8000b0e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b16:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000b18:	f7ff ff2c 	bl	8000974 <HAL_RCC_GetSysClockFreq>
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_RCC_ClockConfig+0x15c>)
 8000b1e:	22f0      	movs	r2, #240	; 0xf0
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	fa92 f2a2 	rbit	r2, r2
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b2e:	40d3      	lsrs	r3, r2
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_RCC_ClockConfig+0x160>)
 8000b32:	5cd3      	ldrb	r3, [r2, r3]
 8000b34:	40d8      	lsrs	r0, r3
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <HAL_RCC_ClockConfig+0x164>)
 8000b38:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 fc66 	bl	800140c <HAL_InitTick>
  
  return HAL_OK;
 8000b40:	2000      	movs	r0, #0
}
 8000b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	080015ae 	.word	0x080015ae
 8000b54:	20000000 	.word	0x20000000

08000b58 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000b58:	4b01      	ldr	r3, [pc, #4]	; (8000b60 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000

08000b64 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b66:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	fa92 f2a2 	rbit	r2, r2
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000b78:	40d3      	lsrs	r3, r2
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000b80:	6810      	ldr	r0, [r2, #0]
}
 8000b82:	40d8      	lsrs	r0, r3
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	080015ae 	.word	0x080015ae
 8000b90:	20000000 	.word	0x20000000

08000b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b94:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000b96:	4604      	mov	r4, r0
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d063      	beq.n	8000c64 <HAL_I2C_Init+0xd0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000b9c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ba0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ba4:	b91b      	cbnz	r3, 8000bae <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ba6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000baa:	f7ff fb4b 	bl	8000244 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bae:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000bb0:	4d2d      	ldr	r5, [pc, #180]	; (8000c68 <HAL_I2C_Init+0xd4>)
    hi2c->Lock = HAL_UNLOCKED;
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bb2:	2324      	movs	r3, #36	; 0x24
 8000bb4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bb8:	6813      	ldr	r3, [r2, #0]
 8000bba:	f023 0301 	bic.w	r3, r3, #1
 8000bbe:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bc0:	f7ff ffd0 	bl	8000b64 <HAL_RCC_GetPCLK1Freq>
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000bc4:	6863      	ldr	r3, [r4, #4]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000bc6:	6822      	ldr	r2, [r4, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000bc8:	4928      	ldr	r1, [pc, #160]	; (8000c6c <HAL_I2C_Init+0xd8>)
 8000bca:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000bce:	42ab      	cmp	r3, r5
 8000bd0:	462e      	mov	r6, r5
 8000bd2:	bf88      	it	hi
 8000bd4:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000bd8:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000bda:	bf82      	ittt	hi
 8000bdc:	4369      	mulhi	r1, r5
 8000bde:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000be2:	fbb1 f1f5 	udivhi	r1, r1, r5

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000be6:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000be8:	f101 0101 	add.w	r1, r1, #1
 8000bec:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000bee:	d808      	bhi.n	8000c02 <HAL_I2C_Init+0x6e>
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bf6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	bf98      	it	ls
 8000bfe:	2004      	movls	r0, #4
 8000c00:	e016      	b.n	8000c30 <HAL_I2C_Init+0x9c>
 8000c02:	68a1      	ldr	r1, [r4, #8]
 8000c04:	b949      	cbnz	r1, 8000c1a <HAL_I2C_Init+0x86>
 8000c06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000c0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c0e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000c12:	b163      	cbz	r3, 8000c2e <HAL_I2C_Init+0x9a>
 8000c14:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000c18:	e00a      	b.n	8000c30 <HAL_I2C_Init+0x9c>
 8000c1a:	2119      	movs	r1, #25
 8000c1c:	434b      	muls	r3, r1
 8000c1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c22:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000c26:	b113      	cbz	r3, 8000c2e <HAL_I2C_Init+0x9a>
 8000c28:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000c2c:	e000      	b.n	8000c30 <HAL_I2C_Init+0x9c>
 8000c2e:	2001      	movs	r0, #1

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c30:	69e1      	ldr	r1, [r4, #28]
 8000c32:	6a23      	ldr	r3, [r4, #32]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000c34:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c36:	430b      	orrs	r3, r1
 8000c38:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000c3a:	6921      	ldr	r1, [r4, #16]
 8000c3c:	68e3      	ldr	r3, [r4, #12]
 8000c3e:	430b      	orrs	r3, r1
 8000c40:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000c42:	6961      	ldr	r1, [r4, #20]
 8000c44:	69a3      	ldr	r3, [r4, #24]
 8000c46:	430b      	orrs	r3, r1
 8000c48:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c4a:	6813      	ldr	r3, [r2, #0]
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c52:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000c54:	2320      	movs	r3, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c56:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000c58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c5c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c5e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000c62:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8000c64:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	000186a0 	.word	0x000186a0
 8000c6c:	000f4240 	.word	0x000f4240

08000c70 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8000c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c72:	4613      	mov	r3, r2
  __IO uint32_t count = 0U;
 8000c74:	2200      	movs	r2, #0
 8000c76:	9200      	str	r2, [sp, #0]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000c78:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8000c7c:	2a20      	cmp	r2, #32
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
  __IO uint32_t count = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000c82:	d001      	beq.n	8000c88 <HAL_I2C_Slave_Receive_DMA+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000c84:	2002      	movs	r0, #2
 8000c86:	e076      	b.n	8000d76 <HAL_I2C_Slave_Receive_DMA+0x106>
{
  __IO uint32_t count = 0U;

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d073      	beq.n	8000d74 <HAL_I2C_Slave_Receive_DMA+0x104>
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d071      	beq.n	8000d74 <HAL_I2C_Slave_Receive_DMA+0x104>
    {
      return  HAL_ERROR;
    }

    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8000c90:	4e3a      	ldr	r6, [pc, #232]	; (8000d7c <HAL_I2C_Slave_Receive_DMA+0x10c>)
 8000c92:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000c96:	6832      	ldr	r2, [r6, #0]
 8000c98:	fbb2 f1f1 	udiv	r1, r2, r1
 8000c9c:	2219      	movs	r2, #25
 8000c9e:	434a      	muls	r2, r1
 8000ca0:	9200      	str	r2, [sp, #0]
    do
    {
      if(count-- == 0U)
 8000ca2:	9800      	ldr	r0, [sp, #0]
 8000ca4:	1e42      	subs	r2, r0, #1
 8000ca6:	9200      	str	r2, [sp, #0]
 8000ca8:	b930      	cbnz	r0, 8000cb8 <HAL_I2C_Slave_Receive_DMA+0x48>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8000caa:	2320      	movs	r3, #32
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000cac:	6320      	str	r0, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000cae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8000cb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8000cb6:	e04a      	b.n	8000d4e <HAL_I2C_Slave_Receive_DMA+0xde>
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8000cb8:	6827      	ldr	r7, [r4, #0]
 8000cba:	69bd      	ldr	r5, [r7, #24]
 8000cbc:	f015 0502 	ands.w	r5, r5, #2
 8000cc0:	d1ef      	bne.n	8000ca2 <HAL_I2C_Slave_Receive_DMA+0x32>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cc2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8000cc6:	2a01      	cmp	r2, #1
 8000cc8:	d0dc      	beq.n	8000c84 <HAL_I2C_Slave_Receive_DMA+0x14>
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000cca:	6838      	ldr	r0, [r7, #0]
 8000ccc:	4639      	mov	r1, r7
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000cd4:	f420 6000 	bic.w	r0, r0, #2048	; 0x800

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8000cd8:	2222      	movs	r2, #34	; 0x22

    /* Process Locked */
    __HAL_LOCK(hi2c);
    
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000cda:	f841 0b10 	str.w	r0, [r1], #16

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8000cde:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_SLAVE;
 8000ce2:	2220      	movs	r2, #32
 8000ce4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    
    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8000ce8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000cea:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <HAL_I2C_Slave_Receive_DMA+0x110>)
    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cec:	6425      	str	r5, [r4, #64]	; 0x40

    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
 8000cee:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000cf0:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8000cf2:	4a24      	ldr	r2, [pc, #144]	; (8000d84 <HAL_I2C_Slave_Receive_DMA+0x114>)
    hi2c->State = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    hi2c->pBuffPtr = pData;
    hi2c->XferSize = Size;
 8000cf4:	8523      	strh	r3, [r4, #40]	; 0x28

    hi2c->State = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    hi2c->pBuffPtr = pData;
 8000cf6:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
    hi2c->XferSize = Size;
    hi2c->XferCount = Size;
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    
    /* Set the I2C DMA transfer complete callback */
    hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8000cfa:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA error callback */
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8000cfc:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <HAL_I2C_Slave_Receive_DMA+0x118>)
 8000cfe:	64c2      	str	r2, [r0, #76]	; 0x4c
    
    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8000d00:	6405      	str	r5, [r0, #64]	; 0x40
    hi2c->hdmarx->XferM1CpltCallback = NULL;
    hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
    hi2c->hdmarx->XferAbortCallback = NULL;

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)pData, Size);
 8000d02:	4672      	mov	r2, lr
    /* Set the DMA error callback */
    hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
    
    /* Set the unused DMA callbacks to NULL */
    hi2c->hdmarx->XferHalfCpltCallback = NULL;
    hi2c->hdmarx->XferM1CpltCallback = NULL;
 8000d04:	6445      	str	r5, [r0, #68]	; 0x44
    hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8000d06:	6485      	str	r5, [r0, #72]	; 0x48
    hi2c->hdmarx->XferAbortCallback = NULL;
 8000d08:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)pData, Size);
 8000d0a:	f000 fa07 	bl	800111c <HAL_DMA_Start_IT>

    /* Enable ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d16:	605a      	str	r2, [r3, #4]

    /* Enable DMA Request */
    hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d1e:	605a      	str	r2, [r3, #4]

    /* Enable Address Acknowledge */
    hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d26:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    count = I2C_TIMEOUT_ADDR_SLAVE * (SystemCoreClock /25U /1000U);
 8000d28:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000d2c:	6832      	ldr	r2, [r6, #0]
 8000d2e:	fbb2 f1f1 	udiv	r1, r2, r1
 8000d32:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d36:	434a      	muls	r2, r1
 8000d38:	9200      	str	r2, [sp, #0]
    do
    {
      if(count-- == 0U)
 8000d3a:	9a00      	ldr	r2, [sp, #0]
 8000d3c:	1e51      	subs	r1, r2, #1
 8000d3e:	9100      	str	r1, [sp, #0]
 8000d40:	b93a      	cbnz	r2, 8000d52 <HAL_I2C_Slave_Receive_DMA+0xe2>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8000d42:	2320      	movs	r3, #32
    count = I2C_TIMEOUT_ADDR_SLAVE * (SystemCoreClock /25U /1000U);
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000d44:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000d46:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    do
    {
      if(count-- == 0U)
      {
        hi2c->PreviousState = I2C_STATE_NONE;
        hi2c->State= HAL_I2C_STATE_READY;
 8000d4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_TIMEOUT; 
 8000d4e:	2003      	movs	r0, #3
 8000d50:	e011      	b.n	8000d76 <HAL_I2C_Slave_Receive_DMA+0x106>
      }
    }
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == RESET);
 8000d52:	695a      	ldr	r2, [r3, #20]
 8000d54:	0792      	lsls	r2, r2, #30
 8000d56:	d5f0      	bpl.n	8000d3a <HAL_I2C_Slave_Receive_DMA+0xca>

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	9001      	str	r0, [sp, #4]
 8000d5c:	695a      	ldr	r2, [r3, #20]
 8000d5e:	9201      	str	r2, [sp, #4]
 8000d60:	699a      	ldr	r2, [r3, #24]
 8000d62:	9201      	str	r2, [sp, #4]
 8000d64:	9a01      	ldr	r2, [sp, #4]

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8000d66:	685a      	ldr	r2, [r3, #4]

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d68:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8000d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d70:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8000d72:	e000      	b.n	8000d76 <HAL_I2C_Slave_Receive_DMA+0x106>

  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
 8000d74:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000d76:	b003      	add	sp, #12
 8000d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	ffff0000 	.word	0xffff0000
 8000d84:	08000dbd 	.word	0x08000dbd
 8000d88:	08000d93 	.word	0x08000d93

08000d8c <HAL_I2C_MasterRxCpltCallback>:
 8000d8c:	4770      	bx	lr

08000d8e <HAL_I2C_MemRxCpltCallback>:
 8000d8e:	4770      	bx	lr

08000d90 <HAL_I2C_ErrorCallback>:
 8000d90:	4770      	bx	lr

08000d92 <I2C_DMAError>:
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8000d92:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000d94:	6802      	ldr	r2, [r0, #0]
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8000d96:	b508      	push	{r3, lr}
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000d98:	6813      	ldr	r3, [r2, #0]
 8000d9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]

  hi2c->XferCount = 0U;
 8000da0:	2300      	movs	r3, #0

  hi2c->State = HAL_I2C_STATE_READY;
 8000da2:	2220      	movs	r2, #32
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;

  hi2c->XferCount = 0U;
 8000da4:	8543      	strh	r3, [r0, #42]	; 0x2a

  hi2c->State = HAL_I2C_STATE_READY;
 8000da6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000daa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

  hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8000dae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000db0:	f043 0310 	orr.w	r3, r3, #16
 8000db4:	6403      	str	r3, [r0, #64]	; 0x40

  HAL_I2C_ErrorCallback(hi2c);
 8000db6:	f7ff ffeb 	bl	8000d90 <HAL_I2C_ErrorCallback>
 8000dba:	bd08      	pop	{r3, pc}

08000dbc <I2C_DMAXferCplt>:
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8000dbc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8000dbe:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  uint32_t CurrentMode  = hi2c->Mode;
 8000dc2:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8000dc6:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode  = hi2c->Mode;

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 8000dc8:	2a21      	cmp	r2, #33	; 0x21
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8000dca:	b508      	push	{r3, lr}
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
  
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
  uint32_t CurrentMode  = hi2c->Mode;
 8000dcc:	b2c9      	uxtb	r1, r1
 8000dce:	6803      	ldr	r3, [r0, #0]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 8000dd0:	d003      	beq.n	8000dda <I2C_DMAXferCplt+0x1e>
 8000dd2:	2a22      	cmp	r2, #34	; 0x22
 8000dd4:	d10c      	bne.n	8000df0 <I2C_DMAXferCplt+0x34>
 8000dd6:	2920      	cmp	r1, #32
 8000dd8:	d10a      	bne.n	8000df0 <I2C_DMAXferCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000de0:	605a      	str	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 8000de2:	2200      	movs	r2, #0
 8000de4:	8542      	strh	r2, [r0, #42]	; 0x2a
    
    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000df6:	601a      	str	r2, [r3, #0]
    
    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dfe:	601a      	str	r2, [r3, #0]
    
    /* Disable Last DMA */
    hi2c->Instance->CR2 &= ~I2C_CR2_LAST;
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e06:	605a      	str	r2, [r3, #4]
    
    /* Disable DMA Request */
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e0e:	605a      	str	r2, [r3, #4]
    
    hi2c->XferCount = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	8543      	strh	r3, [r0, #42]	; 0x2a

    /* Check if Errors has been detected during transfer */
    if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000e14:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000e16:	b113      	cbz	r3, 8000e1e <I2C_DMAXferCplt+0x62>
    {
      HAL_I2C_ErrorCallback(hi2c);
 8000e18:	f7ff ffba 	bl	8000d90 <HAL_I2C_ErrorCallback>
 8000e1c:	bd08      	pop	{r3, pc}
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8000e1e:	2220      	movs	r2, #32
 8000e20:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000e24:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e28:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000e2c:	2a40      	cmp	r2, #64	; 0x40
 8000e2e:	d102      	bne.n	8000e36 <I2C_DMAXferCplt+0x7a>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;

        HAL_I2C_MemRxCpltCallback(hi2c);
 8000e30:	f7ff ffad 	bl	8000d8e <HAL_I2C_MemRxCpltCallback>
 8000e34:	bd08      	pop	{r3, pc}
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;

        HAL_I2C_MasterRxCpltCallback(hi2c);
 8000e36:	f7ff ffa9 	bl	8000d8c <HAL_I2C_MasterRxCpltCallback>
 8000e3a:	bd08      	pop	{r3, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e40:	4f6a      	ldr	r7, [pc, #424]	; (8000fec <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8000ff4 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e48:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000ff8 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4e:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000e54:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000e56:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000e58:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000e5a:	ea34 0303 	bics.w	r3, r4, r3
 8000e5e:	f040 80bd 	bne.w	8000fdc <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e62:	684d      	ldr	r5, [r1, #4]
 8000e64:	f025 0a10 	bic.w	sl, r5, #16
 8000e68:	f1ba 0f02 	cmp.w	sl, #2
 8000e6c:	d114      	bne.n	8000e98 <HAL_GPIO_Init+0x5c>
 8000e6e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8000e72:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000e76:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7a:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000e7e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e82:	230f      	movs	r3, #15
 8000e84:	fa03 f30b 	lsl.w	r3, r3, fp
 8000e88:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e8c:	690b      	ldr	r3, [r1, #16]
 8000e8e:	fa03 f30b 	lsl.w	r3, r3, fp
 8000e92:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000e94:	f8c9 3020 	str.w	r3, [r9, #32]
 8000e98:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9c:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea0:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea2:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ea6:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eaa:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eae:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb2:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eba:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ebc:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000ec0:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec2:	d80f      	bhi.n	8000ee4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec4:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec6:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ecc:	fa06 f60b 	lsl.w	r6, r6, fp
 8000ed0:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8000ed2:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed4:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed6:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eda:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ede:	4096      	lsls	r6, r2
 8000ee0:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000ee2:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ee4:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee6:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	688b      	ldr	r3, [r1, #8]
 8000eec:	fa03 f30b 	lsl.w	r3, r3, fp
 8000ef0:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000ef4:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef6:	00eb      	lsls	r3, r5, #3
 8000ef8:	d570      	bpl.n	8000fdc <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	9303      	str	r3, [sp, #12]
 8000efe:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f02:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f04:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000f08:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000f0c:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000f10:	f022 0903 	bic.w	r9, r2, #3
 8000f14:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000f18:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000f1c:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000f20:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f22:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f28:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f2c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000f30:	260f      	movs	r6, #15
 8000f32:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f36:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f38:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3c:	d01c      	beq.n	8000f78 <HAL_GPIO_Init+0x13c>
 8000f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f42:	4298      	cmp	r0, r3
 8000f44:	d01a      	beq.n	8000f7c <HAL_GPIO_Init+0x140>
 8000f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d018      	beq.n	8000f80 <HAL_GPIO_Init+0x144>
 8000f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f52:	4298      	cmp	r0, r3
 8000f54:	d016      	beq.n	8000f84 <HAL_GPIO_Init+0x148>
 8000f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f5a:	4298      	cmp	r0, r3
 8000f5c:	d014      	beq.n	8000f88 <HAL_GPIO_Init+0x14c>
 8000f5e:	4540      	cmp	r0, r8
 8000f60:	d014      	beq.n	8000f8c <HAL_GPIO_Init+0x150>
 8000f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f66:	4298      	cmp	r0, r3
 8000f68:	d012      	beq.n	8000f90 <HAL_GPIO_Init+0x154>
 8000f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f6e:	4298      	cmp	r0, r3
 8000f70:	bf14      	ite	ne
 8000f72:	2308      	movne	r3, #8
 8000f74:	2307      	moveq	r3, #7
 8000f76:	e00c      	b.n	8000f92 <HAL_GPIO_Init+0x156>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e00a      	b.n	8000f92 <HAL_GPIO_Init+0x156>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e008      	b.n	8000f92 <HAL_GPIO_Init+0x156>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e006      	b.n	8000f92 <HAL_GPIO_Init+0x156>
 8000f84:	2303      	movs	r3, #3
 8000f86:	e004      	b.n	8000f92 <HAL_GPIO_Init+0x156>
 8000f88:	2304      	movs	r3, #4
 8000f8a:	e002      	b.n	8000f92 <HAL_GPIO_Init+0x156>
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	e000      	b.n	8000f92 <HAL_GPIO_Init+0x156>
 8000f90:	2306      	movs	r3, #6
 8000f92:	fa03 f30a 	lsl.w	r3, r3, sl
 8000f96:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f98:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9c:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa0:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	bf0c      	ite	eq
 8000fa6:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000fa8:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8000faa:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000fae:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb2:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	bf0c      	ite	eq
 8000fb8:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000fba:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8000fbc:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc0:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	bf0c      	ite	eq
 8000fc6:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000fc8:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8000fca:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000fce:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd2:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000fd4:	bf54      	ite	pl
 8000fd6:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000fd8:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000fda:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fdc:	3201      	adds	r2, #1
 8000fde:	2a10      	cmp	r2, #16
 8000fe0:	f47f af38 	bne.w	8000e54 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000fe4:	b005      	add	sp, #20
 8000fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fea:	bf00      	nop
 8000fec:	40013c00 	.word	0x40013c00
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40021400 	.word	0x40021400

08000ffc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	b902      	cbnz	r2, 8001000 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ffe:	0409      	lsls	r1, r1, #16
 8001000:	6181      	str	r1, [r0, #24]
 8001002:	4770      	bx	lr

08001004 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001004:	6803      	ldr	r3, [r0, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800100c:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001010:	2118      	movs	r1, #24
 8001012:	3a10      	subs	r2, #16
 8001014:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800101a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800101c:	bf88      	it	hi
 800101e:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001020:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001022:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001024:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001026:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	080015be 	.word	0x080015be

08001030 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001034:	f000 fa20 	bl	8001478 <HAL_GetTick>
 8001038:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800103a:	2c00      	cmp	r4, #0
 800103c:	d064      	beq.n	8001108 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800103e:	2300      	movs	r3, #0
 8001040:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001044:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001046:	2302      	movs	r3, #2
 8001048:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800104c:	6813      	ldr	r3, [r2, #0]
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001054:	6821      	ldr	r1, [r4, #0]
 8001056:	680b      	ldr	r3, [r1, #0]
 8001058:	07d8      	lsls	r0, r3, #31
 800105a:	d508      	bpl.n	800106e <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800105c:	f000 fa0c 	bl	8001478 <HAL_GetTick>
 8001060:	1b40      	subs	r0, r0, r5
 8001062:	2805      	cmp	r0, #5
 8001064:	d9f6      	bls.n	8001054 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001066:	2320      	movs	r3, #32
 8001068:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800106a:	2003      	movs	r0, #3
 800106c:	e051      	b.n	8001112 <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800106e:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001070:	4a29      	ldr	r2, [pc, #164]	; (8001118 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001072:	6865      	ldr	r5, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001074:	69a0      	ldr	r0, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001076:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001078:	68a3      	ldr	r3, [r4, #8]
 800107a:	431d      	orrs	r5, r3
 800107c:	68e3      	ldr	r3, [r4, #12]
 800107e:	431d      	orrs	r5, r3
 8001080:	6923      	ldr	r3, [r4, #16]
 8001082:	431d      	orrs	r5, r3
 8001084:	6963      	ldr	r3, [r4, #20]
 8001086:	432b      	orrs	r3, r5
 8001088:	69e5      	ldr	r5, [r4, #28]
 800108a:	4303      	orrs	r3, r0
 800108c:	432b      	orrs	r3, r5
 800108e:	6a25      	ldr	r5, [r4, #32]
 8001090:	432b      	orrs	r3, r5
 8001092:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001094:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001096:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001098:	bf01      	itttt	eq
 800109a:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 800109c:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 800109e:	4335      	orreq	r5, r6
 80010a0:	432b      	orreq	r3, r5
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010a2:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010a4:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a6:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010a8:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010ac:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010b0:	d11c      	bne.n	80010ec <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010b4:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80010b6:	b920      	cbnz	r0, 80010c2 <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 80010b8:	2a01      	cmp	r2, #1
 80010ba:	d00b      	beq.n	80010d4 <HAL_DMA_Init+0xa4>
 80010bc:	d313      	bcc.n	80010e6 <HAL_DMA_Init+0xb6>
 80010be:	2a02      	cmp	r2, #2
 80010c0:	e010      	b.n	80010e4 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80010c2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80010c6:	d10a      	bne.n	80010de <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 80010c8:	2a03      	cmp	r2, #3
 80010ca:	d80f      	bhi.n	80010ec <HAL_DMA_Init+0xbc>
 80010cc:	e8df f002 	tbb	[pc, r2]
 80010d0:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80010d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010d6:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80010da:	d107      	bne.n	80010ec <HAL_DMA_Init+0xbc>
 80010dc:	e016      	b.n	800110c <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80010de:	2a02      	cmp	r2, #2
 80010e0:	d914      	bls.n	800110c <HAL_DMA_Init+0xdc>
 80010e2:	2a03      	cmp	r2, #3
 80010e4:	d102      	bne.n	80010ec <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80010e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80010e8:	01d2      	lsls	r2, r2, #7
 80010ea:	d40f      	bmi.n	800110c <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010ec:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010ee:	4620      	mov	r0, r4
 80010f0:	f7ff ff88 	bl	8001004 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010f6:	233f      	movs	r3, #63	; 0x3f
 80010f8:	4093      	lsls	r3, r2
 80010fa:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010fc:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010fe:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001100:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001102:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8001106:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8001108:	2001      	movs	r0, #1
 800110a:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800110c:	2340      	movs	r3, #64	; 0x40
 800110e:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001110:	2001      	movs	r0, #1
 8001112:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8001116:	bd70      	pop	{r4, r5, r6, pc}
 8001118:	f010803f 	.word	0xf010803f

0800111c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800111c:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800111e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001122:	2c01      	cmp	r4, #1
 8001124:	d038      	beq.n	8001198 <HAL_DMA_Start_IT+0x7c>
 8001126:	2401      	movs	r4, #1
 8001128:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800112c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001130:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001132:	2c01      	cmp	r4, #1
 8001134:	f04f 0500 	mov.w	r5, #0
 8001138:	f04f 0402 	mov.w	r4, #2
 800113c:	d128      	bne.n	8001190 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800113e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001142:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001144:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001146:	6825      	ldr	r5, [r4, #0]
 8001148:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800114c:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800114e:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001150:	6883      	ldr	r3, [r0, #8]
 8001152:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001154:	bf0e      	itee	eq
 8001156:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001158:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800115a:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800115c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800115e:	bf08      	it	eq
 8001160:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001162:	233f      	movs	r3, #63	; 0x3f
 8001164:	4093      	lsls	r3, r2
 8001166:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	f043 0316 	orr.w	r3, r3, #22
 800116e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001170:	6963      	ldr	r3, [r4, #20]
 8001172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001176:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001178:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800117a:	b11b      	cbz	r3, 8001184 <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800117c:	6823      	ldr	r3, [r4, #0]
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 800118c:	2000      	movs	r0, #0
 800118e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001190:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001194:	4620      	mov	r0, r4
 8001196:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001198:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 800119a:	bd70      	pop	{r4, r5, r6, pc}

0800119c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800119c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a2:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 80011a4:	4b59      	ldr	r3, [pc, #356]	; (800130c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 80011a8:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 80011aa:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ac:	2308      	movs	r3, #8
 80011ae:	4093      	lsls	r3, r2
 80011b0:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011b2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011b4:	d00c      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011b6:	6801      	ldr	r1, [r0, #0]
 80011b8:	6808      	ldr	r0, [r1, #0]
 80011ba:	0740      	lsls	r0, r0, #29
 80011bc:	d508      	bpl.n	80011d0 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011be:	6808      	ldr	r0, [r1, #0]
 80011c0:	f020 0004 	bic.w	r0, r0, #4
 80011c4:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011c6:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011d0:	4b4f      	ldr	r3, [pc, #316]	; (8001310 <HAL_DMA_IRQHandler+0x174>)
 80011d2:	4093      	lsls	r3, r2
 80011d4:	421e      	tst	r6, r3
 80011d6:	d008      	beq.n	80011ea <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011d8:	6821      	ldr	r1, [r4, #0]
 80011da:	6949      	ldr	r1, [r1, #20]
 80011dc:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011de:	bf41      	itttt	mi
 80011e0:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011e2:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 80011e4:	f043 0302 	orrmi.w	r3, r3, #2
 80011e8:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ea:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <HAL_DMA_IRQHandler+0x178>)
 80011ec:	4093      	lsls	r3, r2
 80011ee:	421e      	tst	r6, r3
 80011f0:	d008      	beq.n	8001204 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011f2:	6821      	ldr	r1, [r4, #0]
 80011f4:	6809      	ldr	r1, [r1, #0]
 80011f6:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011f8:	bf41      	itttt	mi
 80011fa:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011fc:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 80011fe:	f043 0304 	orrmi.w	r3, r3, #4
 8001202:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001204:	2310      	movs	r3, #16
 8001206:	fa03 f202 	lsl.w	r2, r3, r2
 800120a:	4216      	tst	r6, r2
 800120c:	d017      	beq.n	800123e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	6819      	ldr	r1, [r3, #0]
 8001212:	0709      	lsls	r1, r1, #28
 8001214:	d513      	bpl.n	800123e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001216:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	0350      	lsls	r0, r2, #13
 800121c:	d504      	bpl.n	8001228 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0319      	lsls	r1, r3, #12
 8001222:	d508      	bpl.n	8001236 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001224:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001226:	e007      	b.n	8001238 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800122c:	bf5e      	ittt	pl
 800122e:	681a      	ldrpl	r2, [r3, #0]
 8001230:	f022 0208 	bicpl.w	r2, r2, #8
 8001234:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001238:	b10b      	cbz	r3, 800123e <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800123a:	4620      	mov	r0, r4
 800123c:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800123e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001240:	2220      	movs	r2, #32
 8001242:	408a      	lsls	r2, r1
 8001244:	4216      	tst	r6, r2
 8001246:	d03b      	beq.n	80012c0 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	06c6      	lsls	r6, r0, #27
 800124e:	d537      	bpl.n	80012c0 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001250:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001252:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001256:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001258:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800125a:	d119      	bne.n	8001290 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800125c:	f022 0216 	bic.w	r2, r2, #22
 8001260:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001268:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800126a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800126c:	b90a      	cbnz	r2, 8001272 <HAL_DMA_IRQHandler+0xd6>
 800126e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001270:	b11a      	cbz	r2, 800127a <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	f022 0208 	bic.w	r2, r2, #8
 8001278:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800127a:	233f      	movs	r3, #63	; 0x3f
 800127c:	408b      	lsls	r3, r1
 800127e:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001280:	2300      	movs	r3, #0
 8001282:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001286:	2301      	movs	r3, #1
 8001288:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800128c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800128e:	e037      	b.n	8001300 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001290:	0350      	lsls	r0, r2, #13
 8001292:	d504      	bpl.n	800129e <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	0319      	lsls	r1, r3, #12
 8001298:	d40e      	bmi.n	80012b8 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800129a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800129c:	e00d      	b.n	80012ba <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80012a4:	d108      	bne.n	80012b8 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	f021 0110 	bic.w	r1, r1, #16
 80012ac:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012ae:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012b0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80012b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80012ba:	b10b      	cbz	r3, 80012c0 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012bc:	4620      	mov	r0, r4
 80012be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012c2:	b303      	cbz	r3, 8001306 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012c6:	07da      	lsls	r2, r3, #31
 80012c8:	d519      	bpl.n	80012fe <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012ca:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012cc:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012d2:	6813      	ldr	r3, [r2, #0]
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 80012da:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80012de:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 80012e2:	9b01      	ldr	r3, [sp, #4]
 80012e4:	3301      	adds	r3, #1
 80012e6:	429f      	cmp	r7, r3
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	d302      	bcc.n	80012f2 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012ec:	6813      	ldr	r3, [r2, #0]
 80012ee:	07db      	lsls	r3, r3, #31
 80012f0:	d4f7      	bmi.n	80012e2 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012f2:	2300      	movs	r3, #0
 80012f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012f8:	2301      	movs	r3, #1
 80012fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80012fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001300:	b10b      	cbz	r3, 8001306 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001302:	4620      	mov	r0, r4
 8001304:	4798      	blx	r3
    }
  }
}
 8001306:	b003      	add	sp, #12
 8001308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000
 8001310:	00800001 	.word	0x00800001
 8001314:	00800004 	.word	0x00800004

08001318 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800131a:	68d3      	ldr	r3, [r2, #12]
 800131c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001320:	041b      	lsls	r3, r3, #16
 8001322:	0c1b      	lsrs	r3, r3, #16
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001328:	0200      	lsls	r0, r0, #8
 800132a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001332:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001334:	60d3      	str	r3, [r2, #12]
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_NVIC_SetPriority+0x60>)
 800133e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001344:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001346:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	2c04      	cmp	r4, #4
 800134e:	bf28      	it	cs
 8001350:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	2d06      	cmp	r5, #6

  return (
 8001354:	f04f 0501 	mov.w	r5, #1
 8001358:	fa05 f404 	lsl.w	r4, r5, r4
 800135c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001360:	bf8c      	ite	hi
 8001362:	3b03      	subhi	r3, #3
 8001364:	2300      	movls	r3, #0

  return (
 8001366:	400c      	ands	r4, r1
 8001368:	409c      	lsls	r4, r3
 800136a:	fa05 f303 	lsl.w	r3, r5, r3
 800136e:	3b01      	subs	r3, #1
 8001370:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001372:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001374:	ea42 0204 	orr.w	r2, r2, r4
 8001378:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	bfaf      	iteee	ge
 800137e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	f000 000f 	andlt.w	r0, r0, #15
 8001386:	4b06      	ldrlt	r3, [pc, #24]	; (80013a0 <HAL_NVIC_SetPriority+0x64>)
 8001388:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	bfa5      	ittet	ge
 800138c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001390:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001398:	bd30      	pop	{r4, r5, pc}
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00
 80013a0:	e000ed14 	.word	0xe000ed14

080013a4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013a4:	0942      	lsrs	r2, r0, #5
 80013a6:	2301      	movs	r3, #1
 80013a8:	f000 001f 	and.w	r0, r0, #31
 80013ac:	fa03 f000 	lsl.w	r0, r3, r0
 80013b0:	4b01      	ldr	r3, [pc, #4]	; (80013b8 <HAL_NVIC_EnableIRQ+0x14>)
 80013b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100

080013bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	3801      	subs	r0, #1
 80013be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013c2:	d20a      	bcs.n	80013da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	21f0      	movs	r1, #240	; 0xf0
 80013cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013ea:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013ec:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013ee:	bf0c      	ite	eq
 80013f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013f4:	f022 0204 	bicne.w	r2, r2, #4
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	4770      	bx	lr
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001400:	4770      	bx	lr

08001402 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001402:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001404:	f7ff fffc 	bl	8001400 <HAL_SYSTICK_Callback>
 8001408:	bd08      	pop	{r3, pc}
	...

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001418:	fbb0 f0f3 	udiv	r0, r0, r3
 800141c:	f7ff ffce 	bl	80013bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001420:	2200      	movs	r2, #0
 8001422:	4621      	mov	r1, r4
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f7ff ff88 	bl	800133c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800142c:	2000      	movs	r0, #0
 800142e:	bd10      	pop	{r4, pc}
 8001430:	20000000 	.word	0x20000000

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_Init+0x30>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800143e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001446:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800144e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f7ff ff61 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff ffd8 	bl	800140c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7fe fec2 	bl	80001e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001460:	2000      	movs	r0, #0
 8001462:	bd08      	pop	{r3, pc}
 8001464:	40023c00 	.word	0x40023c00

08001468 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001468:	4a02      	ldr	r2, [pc, #8]	; (8001474 <HAL_IncTick+0xc>)
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	200000d4 	.word	0x200000d4

08001478 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001478:	4b01      	ldr	r3, [pc, #4]	; (8001480 <HAL_GetTick+0x8>)
 800147a:	6818      	ldr	r0, [r3, #0]
}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200000d4 	.word	0x200000d4

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001484:	b513      	push	{r0, r1, r4, lr}
 8001486:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8001488:	f7ff fff6 	bl	8001478 <HAL_GetTick>
 800148c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800148e:	f7ff fff3 	bl	8001478 <HAL_GetTick>
 8001492:	9b01      	ldr	r3, [sp, #4]
 8001494:	1b00      	subs	r0, r0, r4
 8001496:	4298      	cmp	r0, r3
 8001498:	d3f9      	bcc.n	800148e <HAL_Delay+0xa>
  {
  }
}
 800149a:	b002      	add	sp, #8
 800149c:	bd10      	pop	{r4, pc}
	...

080014a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a0:	490f      	ldr	r1, [pc, #60]	; (80014e0 <SystemInit+0x40>)
 80014a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80014a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <SystemInit+0x44>)
 80014b0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014b2:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014ba:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80014c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014c6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80014c8:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <SystemInit+0x48>)
 80014ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014d2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014d4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014da:	608b      	str	r3, [r1, #8]
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	40023800 	.word	0x40023800
 80014e8:	24003010 	.word	0x24003010

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014f2:	e003      	b.n	80014fc <LoopCopyDataInit>

080014f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014fa:	3104      	adds	r1, #4

080014fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001500:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001502:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001504:	d3f6      	bcc.n	80014f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001508:	e002      	b.n	8001510 <LoopFillZerobss>

0800150a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800150a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800150c:	f842 3b04 	str.w	r3, [r2], #4

08001510 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001512:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001514:	d3f9      	bcc.n	800150a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001516:	f7ff ffc3 	bl	80014a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151a:	f000 f811 	bl	8001540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7fe ff41 	bl	80003a4 <main>
  bx  lr    
 8001522:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001524:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001528:	080015d0 	.word	0x080015d0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800152c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001530:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001534:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001538:	200000d8 	.word	0x200000d8

0800153c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC_IRQHandler>
	...

08001540 <__libc_init_array>:
 8001540:	b570      	push	{r4, r5, r6, lr}
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <__libc_init_array+0x3c>)
 8001544:	4c0e      	ldr	r4, [pc, #56]	; (8001580 <__libc_init_array+0x40>)
 8001546:	1ae4      	subs	r4, r4, r3
 8001548:	10a4      	asrs	r4, r4, #2
 800154a:	2500      	movs	r5, #0
 800154c:	461e      	mov	r6, r3
 800154e:	42a5      	cmp	r5, r4
 8001550:	d004      	beq.n	800155c <__libc_init_array+0x1c>
 8001552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001556:	4798      	blx	r3
 8001558:	3501      	adds	r5, #1
 800155a:	e7f8      	b.n	800154e <__libc_init_array+0xe>
 800155c:	f000 f816 	bl	800158c <_init>
 8001560:	4c08      	ldr	r4, [pc, #32]	; (8001584 <__libc_init_array+0x44>)
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <__libc_init_array+0x48>)
 8001564:	1ae4      	subs	r4, r4, r3
 8001566:	10a4      	asrs	r4, r4, #2
 8001568:	2500      	movs	r5, #0
 800156a:	461e      	mov	r6, r3
 800156c:	42a5      	cmp	r5, r4
 800156e:	d004      	beq.n	800157a <__libc_init_array+0x3a>
 8001570:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001574:	4798      	blx	r3
 8001576:	3501      	adds	r5, #1
 8001578:	e7f8      	b.n	800156c <__libc_init_array+0x2c>
 800157a:	bd70      	pop	{r4, r5, r6, pc}
 800157c:	080015c8 	.word	0x080015c8
 8001580:	080015c8 	.word	0x080015c8
 8001584:	080015cc 	.word	0x080015cc
 8001588:	080015c8 	.word	0x080015c8

0800158c <_init>:
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158e:	bf00      	nop
 8001590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001592:	bc08      	pop	{r3}
 8001594:	469e      	mov	lr, r3
 8001596:	4770      	bx	lr

08001598 <_fini>:
 8001598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800159a:	bf00      	nop
 800159c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800159e:	bc08      	pop	{r3}
 80015a0:	469e      	mov	lr, r3
 80015a2:	4770      	bx	lr
